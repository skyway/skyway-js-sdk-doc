{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u65e5\u672c\u8a9e\u30b5\u30a4\u30c8\u306f \u3053\u3061\u3089 English site is here","title":"Home"},{"location":"en/","text":"This document is ECLWebRTC JavaScript SDK API Reference. See Communication model of ECLWebRTC if this is the first time for you to develop applciation with ECLWebRTC. About class \u00b6 A list of the classes described in this document. Peer MediaConnection DataConnection MeshRoom SFURoom About EventEmitter \u00b6 All classes above inherit EventEmitter . Therefore, methods such as on() , off() , and emit() are available. function onOpen () { console . log ( 'an open event occurred!' ); } // add listener peer . on ( 'open' , onOpen ); // remove listener peer . off ( 'open' , onOpen ) // custom events peer . on ( 'myev' , val => { console . log ( val ); // 3 }) peer . emit ( 'myev' , 3 ); For API details, see the document of EventEmitter . For events details, see the document of each class. Set a listener for 'error' event is always recommended to avoid unexpected behavior.","title":"Introduction"},{"location":"en/#about-class","text":"A list of the classes described in this document. Peer MediaConnection DataConnection MeshRoom SFURoom","title":"About class"},{"location":"en/#about-eventemitter","text":"All classes above inherit EventEmitter . Therefore, methods such as on() , off() , and emit() are available. function onOpen () { console . log ( 'an open event occurred!' ); } // add listener peer . on ( 'open' , onOpen ); // remove listener peer . off ( 'open' , onOpen ) // custom events peer . on ( 'myev' , val => { console . log ( val ); // 3 }) peer . emit ( 'myev' , 3 ); For API details, see the document of EventEmitter . For events details, see the document of each class. Set a listener for 'error' event is always recommended to avoid unexpected behavior.","title":"About EventEmitter"},{"location":"en/dataconnection/","text":"The DataConnection is a class which manages a data connection to another peer. The constructor should not be used other than used inside the ECLWebRTC SDK. A DataConnection instance will be given as a return value of Peer#connect() and as an input of connection event of the Peer . Sample \u00b6 // Calling party const dataConnection = peer . connect ( 'peerID' ); // Called party peer . on ( 'connection' , dataConnection => { // ... }); Members \u00b6 Name Type Description type string String which describes the connection type. In DataConnection, the value is 'data' . metadata Object User-defined metadata object given in Peer#connect() . The called party has the value given by the calling party. serialization string The serialization type given in Peer#connect() . The called party has the value given by the calling party. dcInit RTCDataChannelInit RTCDataChannelInit object given in Peer#connect() . The called party has the value given by the calling party. open boolean Boolean that is True if the connection is opened. The open event of DataConnection can open the connection, and it will be closed when the close event of DataConnection is fired or the data connection is disconnected. remoteId string The Peer ID of the peer this connection connect to. peer string Deprecated The Peer ID of the peer this connection connect to. Use remoteId instead. id string The ID to identify each connection. Methods \u00b6 send(data) \u00b6 Send data to the remote peer. If serialization is 'binary', it will chunk it before sending. Parameters \u00b6 Name Type Required Default Description data * \u2714 The data to send to the peer. Return value \u00b6 undefined Sample \u00b6 // Send data dataConnection . on ( 'open' , () => { const data = { name : 'SkyWay' , msg : 'Hello, World!' }; dataConnection . send ( data ); }); // Receive data dataConnection . on ( 'data' , ({ name , msg }) => { console . log ( ` ${ name } : ${ msg } ` ); // => 'SkyWay: Hello, World!' }); getPeerConnection() \u00b6 Get RTCPeerConnection instance which used internally in the DataConnection between remote peer. If open property is false , it returns null instead. !!! Notice Note that if you operate RTCPeerConnection directly, the ECLWebRTC SDK may not work properly. Return value \u00b6 A [RTCPeerConnection] instance or null . Sample \u00b6 if ( dataConnection . open ) { const pc = dataConnection . getPeerConnection (); // ... } close(forceClose) \u00b6 Close the DataConnection between the remote peer. Parameters \u00b6 Name Type Required Default Description forceClose boolean false Set to true and the connection on remote peer will close immediately. When set to false , the connection on remote peer will close after the end of the ICE reconnect by the browser. Return value \u00b6 undefined Events \u00b6 Event: 'open' \u00b6 Fired when the data connection is opened. dataConnection . on ( 'open' , () => { // ... }); Event: 'data' \u00b6 Fired when received data from the remote peer. If serialization is 'binary' , this event is fired when received all the chunked data and completed to unchunk. Name Type Description data * The data which received. dataConnection . on ( 'data' , data => { // ... }); Event: 'close' \u00b6 Fired when call DataConnection#close() , or the data connection is closed. dataConnection . on ( 'close' , () => { // ... }); Event: 'error' \u00b6 Fired when call DataConnection#send() , but the data connecion is not opened yet. dataConnection . on ( 'error' , () => { // ... });","title":"DataConnection"},{"location":"en/dataconnection/#sample","text":"// Calling party const dataConnection = peer . connect ( 'peerID' ); // Called party peer . on ( 'connection' , dataConnection => { // ... });","title":"Sample"},{"location":"en/dataconnection/#members","text":"Name Type Description type string String which describes the connection type. In DataConnection, the value is 'data' . metadata Object User-defined metadata object given in Peer#connect() . The called party has the value given by the calling party. serialization string The serialization type given in Peer#connect() . The called party has the value given by the calling party. dcInit RTCDataChannelInit RTCDataChannelInit object given in Peer#connect() . The called party has the value given by the calling party. open boolean Boolean that is True if the connection is opened. The open event of DataConnection can open the connection, and it will be closed when the close event of DataConnection is fired or the data connection is disconnected. remoteId string The Peer ID of the peer this connection connect to. peer string Deprecated The Peer ID of the peer this connection connect to. Use remoteId instead. id string The ID to identify each connection.","title":"Members"},{"location":"en/dataconnection/#methods","text":"","title":"Methods"},{"location":"en/dataconnection/#senddata","text":"Send data to the remote peer. If serialization is 'binary', it will chunk it before sending.","title":"send(data)"},{"location":"en/dataconnection/#parameters","text":"Name Type Required Default Description data * \u2714 The data to send to the peer.","title":"Parameters"},{"location":"en/dataconnection/#return-value","text":"undefined","title":"Return value"},{"location":"en/dataconnection/#sample_1","text":"// Send data dataConnection . on ( 'open' , () => { const data = { name : 'SkyWay' , msg : 'Hello, World!' }; dataConnection . send ( data ); }); // Receive data dataConnection . on ( 'data' , ({ name , msg }) => { console . log ( ` ${ name } : ${ msg } ` ); // => 'SkyWay: Hello, World!' });","title":"Sample"},{"location":"en/dataconnection/#getpeerconnection","text":"Get RTCPeerConnection instance which used internally in the DataConnection between remote peer. If open property is false , it returns null instead. !!! Notice Note that if you operate RTCPeerConnection directly, the ECLWebRTC SDK may not work properly.","title":"getPeerConnection()"},{"location":"en/dataconnection/#return-value_1","text":"A [RTCPeerConnection] instance or null .","title":"Return value"},{"location":"en/dataconnection/#sample_2","text":"if ( dataConnection . open ) { const pc = dataConnection . getPeerConnection (); // ... }","title":"Sample"},{"location":"en/dataconnection/#closeforceclose","text":"Close the DataConnection between the remote peer.","title":"close(forceClose)"},{"location":"en/dataconnection/#parameters_1","text":"Name Type Required Default Description forceClose boolean false Set to true and the connection on remote peer will close immediately. When set to false , the connection on remote peer will close after the end of the ICE reconnect by the browser.","title":"Parameters"},{"location":"en/dataconnection/#return-value_2","text":"undefined","title":"Return value"},{"location":"en/dataconnection/#events","text":"","title":"Events"},{"location":"en/dataconnection/#event-open","text":"Fired when the data connection is opened. dataConnection . on ( 'open' , () => { // ... });","title":"Event: 'open'"},{"location":"en/dataconnection/#event-data","text":"Fired when received data from the remote peer. If serialization is 'binary' , this event is fired when received all the chunked data and completed to unchunk. Name Type Description data * The data which received. dataConnection . on ( 'data' , data => { // ... });","title":"Event: 'data'"},{"location":"en/dataconnection/#event-close","text":"Fired when call DataConnection#close() , or the data connection is closed. dataConnection . on ( 'close' , () => { // ... });","title":"Event: 'close'"},{"location":"en/dataconnection/#event-error","text":"Fired when call DataConnection#send() , but the data connecion is not opened yet. dataConnection . on ( 'error' , () => { // ... });","title":"Event: 'error'"},{"location":"en/mediaconnection/","text":"The MediaConnection is a class which manages a media connection to another peer. The constructor should not be used other than used inside the ECLWebRTC SDK. A MediaConnection instance will be given as a return value of Peer#call() and as an input of call event of the Peer . Sample \u00b6 // Calling party const mediaConnection = peer . call ( 'peerID' , mediaStream ); // Called party peer . on ( 'call' , mediaConnection => { // answer with called party's media stream. mediaConnection . answer ( mediaStream ); }); Members \u00b6 Name Type Description type string String which describes the connection type. In MediaConnection, the value is 'media' . metadata Object User-defined metadata given in Peer#call() . The called party has the value given by the calling party. localStream MediaStream Local stream given in Peer#call() or MediaConnection#answer() . open boolean Boolean that is True if the connection is opened. The stream event of MediaConnection and MediaConnection#answer() could open the connection, the close event of MediaConnection and MediaConnection#close() could close the connection. remoteId string The Peer ID of the peer this connection connect to. peer string Deprecated The Peer ID of the peer this connection connect to. Use remoteId instead. id string The ID to identify each connection. Methods \u00b6 answer(stream[, options]) \u00b6 Create and send an answer for the media connection offer. Parameters \u00b6 Name Type Required Default Description stream MediaStream \u2714 A MediaStream which send to the calling party. options answer options object Object which contains options which customize the answer. answer options object \u00b6 Name Type Required Default Description videoBandwidth number A max video bandwidth(kbps). audioBandwidth number A max audio bandwidth(kbps). videoCodec string A video codec like 'H264' . audioCodec string A audio codec like 'PCMU' . Return value \u00b6 undefined Sample \u00b6 peer . on ( 'call' , mediaConnection => { const answerOption = { videoCodec : 'H264' , }; mediaConnection . answer ( mediaStream , answerOption ); }); close(forceClose) \u00b6 Close the MediaConnection between remote peer. Parameters \u00b6 Name Type Required Default Description forceClose boolean false Set to true and the connection on remote peer will close immediately. When set to false , the connection on remote peer will close after the end of the ICE reconnect by the browser. Return value \u00b6 undefined replaceStream(stream) \u00b6 Replace the MediaStream being sent with a new one. When a new MediaStream has a media track, the media connection will be in send and receive mode even if the former connection was in receive only mode. Parameters \u00b6 Name Type Required Default Description stream MediaStream \u2714 The stream to be replaced. Return value \u00b6 undefined getPeerConnection() \u00b6 Get RTCPeerConnection instance which used internally in the MediaConnection between remote peer. If open property is false , it returns null instead. !!! Notice Note that if you operate RTCPeerConnection directly, the ECLWebRTC SDK may not work properly. Return value \u00b6 A RTCPeerConnection instance or null . Sample \u00b6 if ( mediaConnection . open ) { const pc = mediaConnection . getPeerConnection (); // ... } Events \u00b6 Event: 'stream' \u00b6 Fired when received a stream. Name Type Description stream MediaStream A MediaStream which received from remote peer. mediaConnection . on ( 'stream' , stream => { // ... }); Event: 'close' \u00b6 Fired when call MediaConnection#close() , or the media connection is closed. mediaConnection . on ( 'close' , () => { // ... });","title":"MediaConnection"},{"location":"en/mediaconnection/#sample","text":"// Calling party const mediaConnection = peer . call ( 'peerID' , mediaStream ); // Called party peer . on ( 'call' , mediaConnection => { // answer with called party's media stream. mediaConnection . answer ( mediaStream ); });","title":"Sample"},{"location":"en/mediaconnection/#members","text":"Name Type Description type string String which describes the connection type. In MediaConnection, the value is 'media' . metadata Object User-defined metadata given in Peer#call() . The called party has the value given by the calling party. localStream MediaStream Local stream given in Peer#call() or MediaConnection#answer() . open boolean Boolean that is True if the connection is opened. The stream event of MediaConnection and MediaConnection#answer() could open the connection, the close event of MediaConnection and MediaConnection#close() could close the connection. remoteId string The Peer ID of the peer this connection connect to. peer string Deprecated The Peer ID of the peer this connection connect to. Use remoteId instead. id string The ID to identify each connection.","title":"Members"},{"location":"en/mediaconnection/#methods","text":"","title":"Methods"},{"location":"en/mediaconnection/#answerstream-options","text":"Create and send an answer for the media connection offer.","title":"answer(stream[, options])"},{"location":"en/mediaconnection/#parameters","text":"Name Type Required Default Description stream MediaStream \u2714 A MediaStream which send to the calling party. options answer options object Object which contains options which customize the answer.","title":"Parameters"},{"location":"en/mediaconnection/#answer-options-object","text":"Name Type Required Default Description videoBandwidth number A max video bandwidth(kbps). audioBandwidth number A max audio bandwidth(kbps). videoCodec string A video codec like 'H264' . audioCodec string A audio codec like 'PCMU' .","title":"answer options object"},{"location":"en/mediaconnection/#return-value","text":"undefined","title":"Return value"},{"location":"en/mediaconnection/#sample_1","text":"peer . on ( 'call' , mediaConnection => { const answerOption = { videoCodec : 'H264' , }; mediaConnection . answer ( mediaStream , answerOption ); });","title":"Sample"},{"location":"en/mediaconnection/#closeforceclose","text":"Close the MediaConnection between remote peer.","title":"close(forceClose)"},{"location":"en/mediaconnection/#parameters_1","text":"Name Type Required Default Description forceClose boolean false Set to true and the connection on remote peer will close immediately. When set to false , the connection on remote peer will close after the end of the ICE reconnect by the browser.","title":"Parameters"},{"location":"en/mediaconnection/#return-value_1","text":"undefined","title":"Return value"},{"location":"en/mediaconnection/#replacestreamstream","text":"Replace the MediaStream being sent with a new one. When a new MediaStream has a media track, the media connection will be in send and receive mode even if the former connection was in receive only mode.","title":"replaceStream(stream)"},{"location":"en/mediaconnection/#parameters_2","text":"Name Type Required Default Description stream MediaStream \u2714 The stream to be replaced.","title":"Parameters"},{"location":"en/mediaconnection/#return-value_2","text":"undefined","title":"Return value"},{"location":"en/mediaconnection/#getpeerconnection","text":"Get RTCPeerConnection instance which used internally in the MediaConnection between remote peer. If open property is false , it returns null instead. !!! Notice Note that if you operate RTCPeerConnection directly, the ECLWebRTC SDK may not work properly.","title":"getPeerConnection()"},{"location":"en/mediaconnection/#return-value_3","text":"A RTCPeerConnection instance or null .","title":"Return value"},{"location":"en/mediaconnection/#sample_2","text":"if ( mediaConnection . open ) { const pc = mediaConnection . getPeerConnection (); // ... }","title":"Sample"},{"location":"en/mediaconnection/#events","text":"","title":"Events"},{"location":"en/mediaconnection/#event-stream","text":"Fired when received a stream. Name Type Description stream MediaStream A MediaStream which received from remote peer. mediaConnection . on ( 'stream' , stream => { // ... });","title":"Event: 'stream'"},{"location":"en/mediaconnection/#event-close","text":"Fired when call MediaConnection#close() , or the media connection is closed. mediaConnection . on ( 'close' , () => { // ... });","title":"Event: 'close'"},{"location":"en/meshroom/","text":"The MeshRoom is a class which manages a full-mesh type room. The constructor should not be used other than used inside the ECLWebRTC SDK. A MeshRoom instance will be given as a return value of Peer#joinRoom() . Sample \u00b6 const meshRoom = peer . joinRoom ( 'roomName' , { mode : 'mesh' , stream : localStream , }); meshRoom . on ( 'open' , () => {}); Members \u00b6 Name Type Description name string The room name. connections Object Object contains all connections. Methods \u00b6 close() \u00b6 Close all connections in the room. Return value \u00b6 undefined getLog() \u00b6 Start getting room's logs from signaling server. When fetching logs succeeds, log event fires. Return value \u00b6 undefined Sample \u00b6 room . once ( 'log' , log => { // ... }); room . getLog (); replaceStream(stream) \u00b6 Replace the stream being sent on all MediaConnections with a new one. When a new MediaStream has an enabled audio and/or video, the media connection will be in send and receive mode even if the former connection was in receive only mode. Parameters \u00b6 Name Type Required Default Description stream MediaStream \u2714 The stream to be replaced. Return value \u00b6 undefined send(data) \u00b6 Send data to all members in the room with WebSocket. Parameters \u00b6 Name Type Required Default Description data * \u2714 The data to send. Return value \u00b6 undefined Events \u00b6 Event: 'open' \u00b6 Fired when the room is ready and you joined the room successfully. room . on ( 'open' , () => { // ... }); Event: 'peerJoin' \u00b6 Fired when a new remote peer has joined. Name Type Description peerId string The Peer ID of joined peer. room . on ( 'peerJoin' , peerId => { // ... }); Event: 'peerLeave' \u00b6 Fired when a remote peer has left. Name Type Description peerId string The Peer ID of left peer. room . on ( 'peerLeave' , peerId => { // ... }); Event: 'log' \u00b6 Fired when received the room log. Name Type Description logs string[] Array of JSON strings. room . once ( 'log' , logs => { for ( const logStr of logs ) { const { messageType , message , timestamp } = JSON . parse ( logStr ); // ... } }); Event: 'stream' \u00b6 Fired when received a MediaStream from remote peer in the room. The Peer ID of stream origin can be obtained via stream.peerId . Name Type Description stream MediaStream A MediaStream instance. room . on ( 'stream' , stream => { // ... }); Event: 'data' \u00b6 Fired when received the data from a remote peer in the room. Name Type Description data object data object itself. data object \u00b6 Name Type Description src string The Peer ID who sent this data. data * Sent data. room . on ( 'data' , ({ src , data }) => { // ... }); Event: 'close' \u00b6 Fired when the room is closed. room . on ( 'close' , () => { // ... });","title":"MeshRoom"},{"location":"en/meshroom/#sample","text":"const meshRoom = peer . joinRoom ( 'roomName' , { mode : 'mesh' , stream : localStream , }); meshRoom . on ( 'open' , () => {});","title":"Sample"},{"location":"en/meshroom/#members","text":"Name Type Description name string The room name. connections Object Object contains all connections.","title":"Members"},{"location":"en/meshroom/#methods","text":"","title":"Methods"},{"location":"en/meshroom/#close","text":"Close all connections in the room.","title":"close()"},{"location":"en/meshroom/#return-value","text":"undefined","title":"Return value"},{"location":"en/meshroom/#getlog","text":"Start getting room's logs from signaling server. When fetching logs succeeds, log event fires.","title":"getLog()"},{"location":"en/meshroom/#return-value_1","text":"undefined","title":"Return value"},{"location":"en/meshroom/#sample_1","text":"room . once ( 'log' , log => { // ... }); room . getLog ();","title":"Sample"},{"location":"en/meshroom/#replacestreamstream","text":"Replace the stream being sent on all MediaConnections with a new one. When a new MediaStream has an enabled audio and/or video, the media connection will be in send and receive mode even if the former connection was in receive only mode.","title":"replaceStream(stream)"},{"location":"en/meshroom/#parameters","text":"Name Type Required Default Description stream MediaStream \u2714 The stream to be replaced.","title":"Parameters"},{"location":"en/meshroom/#return-value_2","text":"undefined","title":"Return value"},{"location":"en/meshroom/#senddata","text":"Send data to all members in the room with WebSocket.","title":"send(data)"},{"location":"en/meshroom/#parameters_1","text":"Name Type Required Default Description data * \u2714 The data to send.","title":"Parameters"},{"location":"en/meshroom/#return-value_3","text":"undefined","title":"Return value"},{"location":"en/meshroom/#events","text":"","title":"Events"},{"location":"en/meshroom/#event-open","text":"Fired when the room is ready and you joined the room successfully. room . on ( 'open' , () => { // ... });","title":"Event: 'open'"},{"location":"en/meshroom/#event-peerjoin","text":"Fired when a new remote peer has joined. Name Type Description peerId string The Peer ID of joined peer. room . on ( 'peerJoin' , peerId => { // ... });","title":"Event: 'peerJoin'"},{"location":"en/meshroom/#event-peerleave","text":"Fired when a remote peer has left. Name Type Description peerId string The Peer ID of left peer. room . on ( 'peerLeave' , peerId => { // ... });","title":"Event: 'peerLeave'"},{"location":"en/meshroom/#event-log","text":"Fired when received the room log. Name Type Description logs string[] Array of JSON strings. room . once ( 'log' , logs => { for ( const logStr of logs ) { const { messageType , message , timestamp } = JSON . parse ( logStr ); // ... } });","title":"Event: 'log'"},{"location":"en/meshroom/#event-stream","text":"Fired when received a MediaStream from remote peer in the room. The Peer ID of stream origin can be obtained via stream.peerId . Name Type Description stream MediaStream A MediaStream instance. room . on ( 'stream' , stream => { // ... });","title":"Event: 'stream'"},{"location":"en/meshroom/#event-data","text":"Fired when received the data from a remote peer in the room. Name Type Description data object data object itself.","title":"Event: 'data'"},{"location":"en/meshroom/#data-object","text":"Name Type Description src string The Peer ID who sent this data. data * Sent data. room . on ( 'data' , ({ src , data }) => { // ... });","title":"data object"},{"location":"en/meshroom/#event-close","text":"Fired when the room is closed. room . on ( 'close' , () => { // ... });","title":"Event: 'close'"},{"location":"en/peer/","text":"The Peer class is a entry point for P2P connection and room connection. In order to use ECLWebRTC, Peer instance is necessary. Constructor(id, options) \u00b6 Constructor(options) \u00b6 Create a new Peer instance. new Peer() starts connection to ECLWebRTC's signaling server. Sample \u00b6 // Set debug level to 3 const peer = new Peer ( 'some-peer-name' , { key : \"<YOUR-API-KEY>\" debug : 3 , }); // Use TURN server forcely const peer = new Peer ({ key : \"<YOUR-API-KEY>\" config : { iceTransportPolicy : 'relay' , }, }); Parameter \u00b6 Name Type Required Default Description id string Your Peer ID. If no value is given, the Peer ID is generated by the signaling server. options options object \u2714 Options to configure connection parameters. options object \u00b6 Name Type Required Default Description key string \u2714 ECLWebRTC API key. debug number 0 Log level. NONE: 0 , ERROR: 1 , WARN: 2 , FULL: 3 . turn boolean true Whether using ECLWebRTC's TURN server or NOT. credential credential object The credential to authenticate peer. config RTCConfiguration Default RTCConfiguration object RTCConfiguration object passed into RTCPeerConnection . This is advanced option. credential object \u00b6 See Peer authentication example for details. Name Type Required Default Description timestamp number Current UNIX timestamp. ttl number Time to live; The credential expires at timestamp + ttl. authToken string Credential token calculated with HMAC. Default RTCConfiguration object \u00b6 const defaultConfig = { iceServers : [{ urls : 'stun:stun.webrtc.ecl.ntt.com:3478' , url : 'stun:stun.webrtc.ecl.ntt.com:3478' , }], iceTransportPolicy : 'all' , sdpSemantics : 'unified-plan' , }; Members \u00b6 Name Type Description id string The Peer ID specified by a user or generated by signaling server. open boolean Whether the socket is connecting to the signaling server or NOT. connections Object Object contains all connections. rooms Object Object contains all rooms. options Object Object reflects Constructor() options and default options. Methods \u00b6 call(peerId[, stream][, options]) \u00b6 Create a new MediaConnection with Peer ID. With option, bandwidth or/and codec can be specified. Parameters \u00b6 Name Type Required Default Description peerId string \u2714 The Peer ID you are calling. stream MediaStream The MediaStream to send to the remote peer. If not set, connection will behave as recvonly . options call options object Options for call() . call options object \u00b6 Name Type Required Default Description metadata Object Any additional data to send to the remote peer. videoBandwidth number A max video bandwidth(kbps). audioBandwidth number A max audio bandwidth(kbps). videoCodec string A video codec such as 'H264' . audioCodec string A audio codec such as 'PCMU' . videoReceiveEnabled boolean Set to true and your stream does not include video track, you will be video receive only mode. audioReceiveEnabled boolean Set to true and your stream does not include audio track, you will be audio receive only mode. connectionId string The ID to identify each connection. label string Deprecated! The Label to identify each connection. Use connectionId instead. Return value \u00b6 A MediaConnection instance. Sample \u00b6 // Call a remote peer with your stream const call = peer . call ( 'peerID' , localStream ); // Call a remote peer with your stream and metadata const call = peer . call ( 'peerID' , localStream , { metadata : { foo : 'bar' , } }); // Call a remote peer with H264 as a video codec const call = peer . call ( 'peerID' , localStream , { videoCodec : 'H264' , }); // Call a remote peer with audio receive only mode const call = peer . call ( 'peerID' , null , { audioReceiveEnabled : true , }); connect(peerId[, options]) \u00b6 Create a new DataConnection with Peer ID. Parameters \u00b6 Name Type Required Default Description peerId string \u2714 The Peer ID you are connecting. options connect options object Options for connect() . connect options object \u00b6 Name Type Required Default Description metadata Object Any additional data to send to the remote peer. serialization string 'binary' Serialization for data when sending. One of 'binary' , 'json' , or 'none' . dcInit RTCDataChannelInit {} RTCDataChannelInit object passed into createDataChannel() to change reliability. It is defaulting to true . connectionId string The ID to identify each connection. label string Deprecated! The Label to identify each connection. Use connectionId instead. Return value \u00b6 A DataConnection instance. Sample \u00b6 // Connect a remote peer with reliable mode(default) peer . connect ( 'peerId' ); // Connect a remote peer with metadata peer . connect ( 'peerId' , { metadata : { hoge : \"foobar\" , } }); // Connect a remote peer with unreliable mode peer . connect ( 'peerId' , { dcInit : { maxRetransmits : 2 , }, }); destroy() \u00b6 Destroy all connections and disconnect socket to the signaling server. Return value \u00b6 undefined disconnect() \u00b6 Disconnect socket to the signaling server, then emit disconnected event. Return value \u00b6 undefined reconnect() \u00b6 Reconnect to the signaling server. Return value \u00b6 undefined joinRoom(roomName[, roomOptions]) \u00b6 Join full-mesh type or SFU type room. See this page for the difference between full-mesh and SFU type. Parameters \u00b6 Name Type Rquired Default Description roomName string \u2714 The room name you are joining. roomOptions room options object {} Options for joinRoom() . room options object \u00b6 Name Type Required Default Description mode string 'mesh' One of 'sfu' or 'mesh' . stream MediaStream The MediaStream to send to the room you are joining. If not set, connection will behave as recvonly . videoBandwidth number A max video bandwidth(kbps). Only available when mode is 'mesh' . audioBandwidth number A max audio bandwidth(kbps). Only available when mode is 'mesh' . videoCodec string A video codec such as 'H264' . Only available when mode is 'mesh' . audioCodec string A audio codec such as 'PCMU' . Only available when mode is 'mesh' . videoReceiveEnabled boolean Set to true and your stream does not include video track, you will be video receive only mode. Only available when mode is 'mesh' . audioReceiveEnabled boolean Set to true and your stream does not include audio track, you will be audio receive only mode. Only available when mode is 'mesh' . Return value \u00b6 An SFURoom instance or a MeshRoom instance. Sample \u00b6 // Join full-mesh room const room = peer . joinRoom ( 'roomName' , { mode : 'mesh' , stream : localStream , }); // Join sfu room const room = peer . joinRoom ( 'roomName' , { mode : 'sfu' , stream : localStream , }); listAllPeers(callback) \u00b6 Call REST API to get the list of Peer IDs associated with API key. Parameters \u00b6 Name Type Required Default Description callback Function \u2714 The callback function to get Peer IDs. Return value \u00b6 undefined Sample \u00b6 peer . listAllPeers ( peers => { console . log ( peers ) // => [\"yNtQkNyjAojJNGrt\", \"EzAmgFhCKBQMzKw9\"] }); getConnection(peerId, connectionId) \u00b6 Query the created MediaConnection or DataConnection. Parameters \u00b6 Name Type Required Default Description peerId string \u2714 The Peer ID. connectionId string \u2714 The connection ID. Return value \u00b6 MediaConnection instance or DataConnection instance or null . updateCredential(credential) \u00b6 Update credential to extend TTL of authentication. See Peer authentication example for details. Parameters \u00b6 Name Type Required Default Description credential credential object \u2714 A new credential generated by user. Return value \u00b6 undefined Events \u00b6 Event names can be referred by static property EVENTS of Peer class. // These are the same peer . on ( 'open' , () => {}); peer . on ( Peer . EVENTS . open , () => {}); Event: 'open' \u00b6 Fired when connected to the signaling server successfully. Name Type Description id string The Peer ID. peer . on ( 'open' , id => { // ... }); Event: 'call' \u00b6 Fired when received a media call from remote peer. Name Type Description call MediaConnection A MediaConnection instance. peer . on ( 'call' , call => { // ... }); Event: 'close' \u00b6 Fired when finished closing all connections. peer . on ( 'close' , () => { // ... }); Event: 'connection' \u00b6 Fired when received a data connection from remote peer. Name Type Description conn DataConnection A DataConnection instance. peer . on ( 'connection' , conn => { // ... }); Event: 'disconnected' \u00b6 Fired when disconnected from the signaling server. Name Type Description id string The Peer ID. peer . on ( 'disconnected' , id => { // ... }); Event: 'expiresin' \u00b6 Fired when the former credential expired. Name Type Description sec number The second before credential expires. peer . on ( 'expiresin' , sec => { // ... }); Event: 'error' \u00b6 Fired upon some error. Name Type Description error Error An error object. Error object has type property to know its details. Type Description room-error Room name must be defined. Room type is different (e.g. On the condition that the mesh room was created, that another user tries to create SFU room with same room name of Mesh cause this error) SFU usage is disabled. Please enable SFU usage on dashboard. Unknown-error. Please wait for a while and connect again. Failed to fetch the room log. Please wait for a while and connect again authentication Failed to authenticate permission The room usage is not permitted list-error Look like you have permission to list peers IDs. Please enable the ECLWebRTC REST API on dashboard. disconnected Cannot connect to new Peer before connecting to ECLWebRTC server or after disconnecting from the server. socket-error Lost connection to server invalid-key API key is invalid server-error Could not get peers from the server. // If you join a room without room name peer . on ( 'error' , error => { console . log ( ` ${ error . type } : ${ error . message } ` ); // => room-error: Room name must be defined. });","title":"Peer"},{"location":"en/peer/#constructorid-options","text":"","title":"Constructor(id, options)"},{"location":"en/peer/#constructoroptions","text":"Create a new Peer instance. new Peer() starts connection to ECLWebRTC's signaling server.","title":"Constructor(options)"},{"location":"en/peer/#sample","text":"// Set debug level to 3 const peer = new Peer ( 'some-peer-name' , { key : \"<YOUR-API-KEY>\" debug : 3 , }); // Use TURN server forcely const peer = new Peer ({ key : \"<YOUR-API-KEY>\" config : { iceTransportPolicy : 'relay' , }, });","title":"Sample"},{"location":"en/peer/#parameter","text":"Name Type Required Default Description id string Your Peer ID. If no value is given, the Peer ID is generated by the signaling server. options options object \u2714 Options to configure connection parameters.","title":"Parameter"},{"location":"en/peer/#options-object","text":"Name Type Required Default Description key string \u2714 ECLWebRTC API key. debug number 0 Log level. NONE: 0 , ERROR: 1 , WARN: 2 , FULL: 3 . turn boolean true Whether using ECLWebRTC's TURN server or NOT. credential credential object The credential to authenticate peer. config RTCConfiguration Default RTCConfiguration object RTCConfiguration object passed into RTCPeerConnection . This is advanced option.","title":"options object"},{"location":"en/peer/#credential-object","text":"See Peer authentication example for details. Name Type Required Default Description timestamp number Current UNIX timestamp. ttl number Time to live; The credential expires at timestamp + ttl. authToken string Credential token calculated with HMAC.","title":"credential object"},{"location":"en/peer/#default-rtcconfiguration-object","text":"const defaultConfig = { iceServers : [{ urls : 'stun:stun.webrtc.ecl.ntt.com:3478' , url : 'stun:stun.webrtc.ecl.ntt.com:3478' , }], iceTransportPolicy : 'all' , sdpSemantics : 'unified-plan' , };","title":"Default RTCConfiguration object"},{"location":"en/peer/#members","text":"Name Type Description id string The Peer ID specified by a user or generated by signaling server. open boolean Whether the socket is connecting to the signaling server or NOT. connections Object Object contains all connections. rooms Object Object contains all rooms. options Object Object reflects Constructor() options and default options.","title":"Members"},{"location":"en/peer/#methods","text":"","title":"Methods"},{"location":"en/peer/#callpeerid-stream-options","text":"Create a new MediaConnection with Peer ID. With option, bandwidth or/and codec can be specified.","title":"call(peerId[, stream][, options])"},{"location":"en/peer/#parameters","text":"Name Type Required Default Description peerId string \u2714 The Peer ID you are calling. stream MediaStream The MediaStream to send to the remote peer. If not set, connection will behave as recvonly . options call options object Options for call() .","title":"Parameters"},{"location":"en/peer/#call-options-object","text":"Name Type Required Default Description metadata Object Any additional data to send to the remote peer. videoBandwidth number A max video bandwidth(kbps). audioBandwidth number A max audio bandwidth(kbps). videoCodec string A video codec such as 'H264' . audioCodec string A audio codec such as 'PCMU' . videoReceiveEnabled boolean Set to true and your stream does not include video track, you will be video receive only mode. audioReceiveEnabled boolean Set to true and your stream does not include audio track, you will be audio receive only mode. connectionId string The ID to identify each connection. label string Deprecated! The Label to identify each connection. Use connectionId instead.","title":"call options object"},{"location":"en/peer/#return-value","text":"A MediaConnection instance.","title":"Return value"},{"location":"en/peer/#sample_1","text":"// Call a remote peer with your stream const call = peer . call ( 'peerID' , localStream ); // Call a remote peer with your stream and metadata const call = peer . call ( 'peerID' , localStream , { metadata : { foo : 'bar' , } }); // Call a remote peer with H264 as a video codec const call = peer . call ( 'peerID' , localStream , { videoCodec : 'H264' , }); // Call a remote peer with audio receive only mode const call = peer . call ( 'peerID' , null , { audioReceiveEnabled : true , });","title":"Sample"},{"location":"en/peer/#connectpeerid-options","text":"Create a new DataConnection with Peer ID.","title":"connect(peerId[, options])"},{"location":"en/peer/#parameters_1","text":"Name Type Required Default Description peerId string \u2714 The Peer ID you are connecting. options connect options object Options for connect() .","title":"Parameters"},{"location":"en/peer/#connect-options-object","text":"Name Type Required Default Description metadata Object Any additional data to send to the remote peer. serialization string 'binary' Serialization for data when sending. One of 'binary' , 'json' , or 'none' . dcInit RTCDataChannelInit {} RTCDataChannelInit object passed into createDataChannel() to change reliability. It is defaulting to true . connectionId string The ID to identify each connection. label string Deprecated! The Label to identify each connection. Use connectionId instead.","title":"connect options object"},{"location":"en/peer/#return-value_1","text":"A DataConnection instance.","title":"Return value"},{"location":"en/peer/#sample_2","text":"// Connect a remote peer with reliable mode(default) peer . connect ( 'peerId' ); // Connect a remote peer with metadata peer . connect ( 'peerId' , { metadata : { hoge : \"foobar\" , } }); // Connect a remote peer with unreliable mode peer . connect ( 'peerId' , { dcInit : { maxRetransmits : 2 , }, });","title":"Sample"},{"location":"en/peer/#destroy","text":"Destroy all connections and disconnect socket to the signaling server.","title":"destroy()"},{"location":"en/peer/#return-value_2","text":"undefined","title":"Return value"},{"location":"en/peer/#disconnect","text":"Disconnect socket to the signaling server, then emit disconnected event.","title":"disconnect()"},{"location":"en/peer/#return-value_3","text":"undefined","title":"Return value"},{"location":"en/peer/#reconnect","text":"Reconnect to the signaling server.","title":"reconnect()"},{"location":"en/peer/#return-value_4","text":"undefined","title":"Return value"},{"location":"en/peer/#joinroomroomname-roomoptions","text":"Join full-mesh type or SFU type room. See this page for the difference between full-mesh and SFU type.","title":"joinRoom(roomName[, roomOptions])"},{"location":"en/peer/#parameters_2","text":"Name Type Rquired Default Description roomName string \u2714 The room name you are joining. roomOptions room options object {} Options for joinRoom() .","title":"Parameters"},{"location":"en/peer/#room-options-object","text":"Name Type Required Default Description mode string 'mesh' One of 'sfu' or 'mesh' . stream MediaStream The MediaStream to send to the room you are joining. If not set, connection will behave as recvonly . videoBandwidth number A max video bandwidth(kbps). Only available when mode is 'mesh' . audioBandwidth number A max audio bandwidth(kbps). Only available when mode is 'mesh' . videoCodec string A video codec such as 'H264' . Only available when mode is 'mesh' . audioCodec string A audio codec such as 'PCMU' . Only available when mode is 'mesh' . videoReceiveEnabled boolean Set to true and your stream does not include video track, you will be video receive only mode. Only available when mode is 'mesh' . audioReceiveEnabled boolean Set to true and your stream does not include audio track, you will be audio receive only mode. Only available when mode is 'mesh' .","title":"room options object"},{"location":"en/peer/#return-value_5","text":"An SFURoom instance or a MeshRoom instance.","title":"Return value"},{"location":"en/peer/#sample_3","text":"// Join full-mesh room const room = peer . joinRoom ( 'roomName' , { mode : 'mesh' , stream : localStream , }); // Join sfu room const room = peer . joinRoom ( 'roomName' , { mode : 'sfu' , stream : localStream , });","title":"Sample"},{"location":"en/peer/#listallpeerscallback","text":"Call REST API to get the list of Peer IDs associated with API key.","title":"listAllPeers(callback)"},{"location":"en/peer/#parameters_3","text":"Name Type Required Default Description callback Function \u2714 The callback function to get Peer IDs.","title":"Parameters"},{"location":"en/peer/#return-value_6","text":"undefined","title":"Return value"},{"location":"en/peer/#sample_4","text":"peer . listAllPeers ( peers => { console . log ( peers ) // => [\"yNtQkNyjAojJNGrt\", \"EzAmgFhCKBQMzKw9\"] });","title":"Sample"},{"location":"en/peer/#getconnectionpeerid-connectionid","text":"Query the created MediaConnection or DataConnection.","title":"getConnection(peerId, connectionId)"},{"location":"en/peer/#parameters_4","text":"Name Type Required Default Description peerId string \u2714 The Peer ID. connectionId string \u2714 The connection ID.","title":"Parameters"},{"location":"en/peer/#return-value_7","text":"MediaConnection instance or DataConnection instance or null .","title":"Return value"},{"location":"en/peer/#updatecredentialcredential","text":"Update credential to extend TTL of authentication. See Peer authentication example for details.","title":"updateCredential(credential)"},{"location":"en/peer/#parameters_5","text":"Name Type Required Default Description credential credential object \u2714 A new credential generated by user.","title":"Parameters"},{"location":"en/peer/#return-value_8","text":"undefined","title":"Return value"},{"location":"en/peer/#events","text":"Event names can be referred by static property EVENTS of Peer class. // These are the same peer . on ( 'open' , () => {}); peer . on ( Peer . EVENTS . open , () => {});","title":"Events"},{"location":"en/peer/#event-open","text":"Fired when connected to the signaling server successfully. Name Type Description id string The Peer ID. peer . on ( 'open' , id => { // ... });","title":"Event: 'open'"},{"location":"en/peer/#event-call","text":"Fired when received a media call from remote peer. Name Type Description call MediaConnection A MediaConnection instance. peer . on ( 'call' , call => { // ... });","title":"Event: 'call'"},{"location":"en/peer/#event-close","text":"Fired when finished closing all connections. peer . on ( 'close' , () => { // ... });","title":"Event: 'close'"},{"location":"en/peer/#event-connection","text":"Fired when received a data connection from remote peer. Name Type Description conn DataConnection A DataConnection instance. peer . on ( 'connection' , conn => { // ... });","title":"Event: 'connection'"},{"location":"en/peer/#event-disconnected","text":"Fired when disconnected from the signaling server. Name Type Description id string The Peer ID. peer . on ( 'disconnected' , id => { // ... });","title":"Event: 'disconnected'"},{"location":"en/peer/#event-expiresin","text":"Fired when the former credential expired. Name Type Description sec number The second before credential expires. peer . on ( 'expiresin' , sec => { // ... });","title":"Event: 'expiresin'"},{"location":"en/peer/#event-error","text":"Fired upon some error. Name Type Description error Error An error object. Error object has type property to know its details. Type Description room-error Room name must be defined. Room type is different (e.g. On the condition that the mesh room was created, that another user tries to create SFU room with same room name of Mesh cause this error) SFU usage is disabled. Please enable SFU usage on dashboard. Unknown-error. Please wait for a while and connect again. Failed to fetch the room log. Please wait for a while and connect again authentication Failed to authenticate permission The room usage is not permitted list-error Look like you have permission to list peers IDs. Please enable the ECLWebRTC REST API on dashboard. disconnected Cannot connect to new Peer before connecting to ECLWebRTC server or after disconnecting from the server. socket-error Lost connection to server invalid-key API key is invalid server-error Could not get peers from the server. // If you join a room without room name peer . on ( 'error' , error => { console . log ( ` ${ error . type } : ${ error . message } ` ); // => room-error: Room name must be defined. });","title":"Event: 'error'"},{"location":"en/sfuroom/","text":"The SFURoom is a class which manages an SFU type room. The constructor should not be used other than used inside the ECLWebRTC SDK. An SFURoom instance will be given as a return value of Peer#joinRoom() . Sample \u00b6 const sfuRoom = peer . joinRoom ( 'roomName' , { mode : 'sfu' , stream : localStream , }); sfuRoom . on ( 'open' , () => {}); Members \u00b6 Name Type Description name string The room name. remoteStreams Object Object contains all remote streams with MediaStream .id as key. members string[] Array of the Peer ID in this room. Methods \u00b6 close() \u00b6 Close all connections in the room. Return value \u00b6 undefined getLog() \u00b6 Start getting room's logs from signaling server. When fetching logs succeeds, log event fires. Return value \u00b6 undefined Sample \u00b6 room . once ( 'log' , log => { // ... }); room . getLog (); replaceStream(stream) \u00b6 Replace the stream being sent with a new one. When a new MediaStream has an enabled audio and/or video, the media connection will be in send and receive mode even if the former connection was in receive only mode. Parameters \u00b6 Name Type Required Default Description stream MediaStream \u2714 The stream to be replaced. Return value \u00b6 undefined send(data) \u00b6 Send data to all members in the room with WebSocket. Parameters \u00b6 Name Type Required Default Description data * \u2714 The data to send. Return value \u00b6 undefined Events \u00b6 Event: 'open' \u00b6 Fired when the room is ready and you joined the room successfully. room . on ( 'open' , () => { // ... }); Event: 'peerJoin' \u00b6 Fired when a new remote peer joined. Name Type Description peerId string The Peer ID of joined peer. room . on ( 'peerJoin' , peerId => { // ... }); Event: 'peerLeave' \u00b6 Fired when a remote peer left. Name Type Description peerId string The Peer ID of left peer. room . on ( 'peerLeave' , peerId => { // ... }); Event: 'log' \u00b6 Fired when received the room log. Name Type Description logs string[] Array of JSON strings. room . once ( 'log' , logs => { for ( const logStr of logs ) { const { messageType , message , timestamp } = JSON . parse ( logStr ); // ... } }); Event: 'stream' \u00b6 Fired when received a MediaStream from remote peer in the room. The Peer ID of stream origin can be obtained via stream.peerId . Name Type Description stream MediaStream A MediaStream instance. room . on ( 'stream' , stream => { // ... }); Event: 'data' \u00b6 Fired when received the data from a remote peer in the room. Name Type Description data object data object itself. data object \u00b6 Name Type Description src string The Peer ID who sent this data. data * Sent data. room . on ( 'data' , ({ src , data }) => { // ... }); Event: 'close' \u00b6 Fired when the room is closed. room . on ( 'close' , () => { // ... });","title":"SFURoom"},{"location":"en/sfuroom/#sample","text":"const sfuRoom = peer . joinRoom ( 'roomName' , { mode : 'sfu' , stream : localStream , }); sfuRoom . on ( 'open' , () => {});","title":"Sample"},{"location":"en/sfuroom/#members","text":"Name Type Description name string The room name. remoteStreams Object Object contains all remote streams with MediaStream .id as key. members string[] Array of the Peer ID in this room.","title":"Members"},{"location":"en/sfuroom/#methods","text":"","title":"Methods"},{"location":"en/sfuroom/#close","text":"Close all connections in the room.","title":"close()"},{"location":"en/sfuroom/#return-value","text":"undefined","title":"Return value"},{"location":"en/sfuroom/#getlog","text":"Start getting room's logs from signaling server. When fetching logs succeeds, log event fires.","title":"getLog()"},{"location":"en/sfuroom/#return-value_1","text":"undefined","title":"Return value"},{"location":"en/sfuroom/#sample_1","text":"room . once ( 'log' , log => { // ... }); room . getLog ();","title":"Sample"},{"location":"en/sfuroom/#replacestreamstream","text":"Replace the stream being sent with a new one. When a new MediaStream has an enabled audio and/or video, the media connection will be in send and receive mode even if the former connection was in receive only mode.","title":"replaceStream(stream)"},{"location":"en/sfuroom/#parameters","text":"Name Type Required Default Description stream MediaStream \u2714 The stream to be replaced.","title":"Parameters"},{"location":"en/sfuroom/#return-value_2","text":"undefined","title":"Return value"},{"location":"en/sfuroom/#senddata","text":"Send data to all members in the room with WebSocket.","title":"send(data)"},{"location":"en/sfuroom/#parameters_1","text":"Name Type Required Default Description data * \u2714 The data to send.","title":"Parameters"},{"location":"en/sfuroom/#return-value_3","text":"undefined","title":"Return value"},{"location":"en/sfuroom/#events","text":"","title":"Events"},{"location":"en/sfuroom/#event-open","text":"Fired when the room is ready and you joined the room successfully. room . on ( 'open' , () => { // ... });","title":"Event: 'open'"},{"location":"en/sfuroom/#event-peerjoin","text":"Fired when a new remote peer joined. Name Type Description peerId string The Peer ID of joined peer. room . on ( 'peerJoin' , peerId => { // ... });","title":"Event: 'peerJoin'"},{"location":"en/sfuroom/#event-peerleave","text":"Fired when a remote peer left. Name Type Description peerId string The Peer ID of left peer. room . on ( 'peerLeave' , peerId => { // ... });","title":"Event: 'peerLeave'"},{"location":"en/sfuroom/#event-log","text":"Fired when received the room log. Name Type Description logs string[] Array of JSON strings. room . once ( 'log' , logs => { for ( const logStr of logs ) { const { messageType , message , timestamp } = JSON . parse ( logStr ); // ... } });","title":"Event: 'log'"},{"location":"en/sfuroom/#event-stream","text":"Fired when received a MediaStream from remote peer in the room. The Peer ID of stream origin can be obtained via stream.peerId . Name Type Description stream MediaStream A MediaStream instance. room . on ( 'stream' , stream => { // ... });","title":"Event: 'stream'"},{"location":"en/sfuroom/#event-data","text":"Fired when received the data from a remote peer in the room. Name Type Description data object data object itself.","title":"Event: 'data'"},{"location":"en/sfuroom/#data-object","text":"Name Type Description src string The Peer ID who sent this data. data * Sent data. room . on ( 'data' , ({ src , data }) => { // ... });","title":"data object"},{"location":"en/sfuroom/#event-close","text":"Fired when the room is closed. room . on ( 'close' , () => { // ... });","title":"Event: 'close'"},{"location":"en/tips/","text":"This page introduces Tips on WebRTC application development using ECLWebRTC JavaScript SDK. The content does no guarantee its behavior. It always depends on the browser implementation. How to get MediaStream \u00b6 Some methods like Peer#call() and Peer#joinRoom() accepts MediaStream as its arguments. But our SDK does not provide specific API to get MediaStream . In JavaScript API, you can get MediaStream in the following way. navigator.mediaDevices.getUserMedia(options) navigator.mediaDevices.getDisplayMedia(options) ( async function () { // .. const stream = await navigator . mediaDevices . getUserMedia ({ video : true }); const call = peer . call ( 'remote-peerId' , stream ); // ... }()); Details of options and how it works depends on each browser implementation. Other than that, you can use captureStream() method from HTMLVideoElement , HTMLAudioElement and HTMLCanvasElement . Screen sharing \u00b6 You can also use your own display itself as MediaStream . By using it, it is possible to share your screen to the remote peer. ( async function () { // .. const stream = await navigator . mediaDevices . getDisplayMedia ({ video : true }); const call = peer . call ( 'remote-peerId' , stream ); // ... }()); If your browser does not support this API, a library like skyway/skyway-screenshare will be helpful. Select devices to use \u00b6 If multiple cameras and microphones are available, you can select and use it. ( async function () { // .. const defaultVideoStream = await navigator . mediaDevices . getUserMedia ({ video : true , }); // \u30c7\u30d0\u30a4\u30b9\u306e\u4e00\u89a7\u3092\u53d6\u5f97 const devices = await navigator . mediaDevices . enumerateDevices (); // \u4efb\u610f\u306e\u30c7\u30d0\u30a4\u30b9\u3092\u6307\u5b9a const newVideoInputDevice = devices . find ( device => device . kind === 'videoinput' ); const newVideoStream = await navigator . mediaDevices . getUserMedia ({ video : { deviceId : newVideoInputDevice . deviceId , }, }); // ... }()); By using navigator.mediaDevices.enumerateDevices() , you can get the list of available devices. Then select one in the list, and pass its deviceId to getUserMedia() , you can specify input source. Mute a MediaStream \u00b6 If you want to mute your video and/or audio temporarily, set enabled property of MediaStreamTrack . ( async function () { // .. const stream = await navigator . mediaDevices . getUserMedia ({ video : true , audio : true , }); const call = peer . call ( 'remote-peerId' , stream ); // mute audio stream . getAudioTracks (). forEach ( track => track . enabled = false ); // ... }()); Multistream \u00b6 In case sending multiple streams. Currently, our SDK does not provide function to achieve that. On your application code, you can do it by preparing multiple [ MediaConnection ] (../ mediaconnection). sdpSemantics \u00b6 You can pass RTCConfiguration for the RTCPeerConnection via Peer constructor. But we always use the value unified-plan for the sdpSemantics property.","title":"Tips"},{"location":"en/tips/#how-to-get-mediastream","text":"Some methods like Peer#call() and Peer#joinRoom() accepts MediaStream as its arguments. But our SDK does not provide specific API to get MediaStream . In JavaScript API, you can get MediaStream in the following way. navigator.mediaDevices.getUserMedia(options) navigator.mediaDevices.getDisplayMedia(options) ( async function () { // .. const stream = await navigator . mediaDevices . getUserMedia ({ video : true }); const call = peer . call ( 'remote-peerId' , stream ); // ... }()); Details of options and how it works depends on each browser implementation. Other than that, you can use captureStream() method from HTMLVideoElement , HTMLAudioElement and HTMLCanvasElement .","title":"How to get MediaStream"},{"location":"en/tips/#screen-sharing","text":"You can also use your own display itself as MediaStream . By using it, it is possible to share your screen to the remote peer. ( async function () { // .. const stream = await navigator . mediaDevices . getDisplayMedia ({ video : true }); const call = peer . call ( 'remote-peerId' , stream ); // ... }()); If your browser does not support this API, a library like skyway/skyway-screenshare will be helpful.","title":"Screen sharing"},{"location":"en/tips/#select-devices-to-use","text":"If multiple cameras and microphones are available, you can select and use it. ( async function () { // .. const defaultVideoStream = await navigator . mediaDevices . getUserMedia ({ video : true , }); // \u30c7\u30d0\u30a4\u30b9\u306e\u4e00\u89a7\u3092\u53d6\u5f97 const devices = await navigator . mediaDevices . enumerateDevices (); // \u4efb\u610f\u306e\u30c7\u30d0\u30a4\u30b9\u3092\u6307\u5b9a const newVideoInputDevice = devices . find ( device => device . kind === 'videoinput' ); const newVideoStream = await navigator . mediaDevices . getUserMedia ({ video : { deviceId : newVideoInputDevice . deviceId , }, }); // ... }()); By using navigator.mediaDevices.enumerateDevices() , you can get the list of available devices. Then select one in the list, and pass its deviceId to getUserMedia() , you can specify input source.","title":"Select devices to use"},{"location":"en/tips/#mute-a-mediastream","text":"If you want to mute your video and/or audio temporarily, set enabled property of MediaStreamTrack . ( async function () { // .. const stream = await navigator . mediaDevices . getUserMedia ({ video : true , audio : true , }); const call = peer . call ( 'remote-peerId' , stream ); // mute audio stream . getAudioTracks (). forEach ( track => track . enabled = false ); // ... }());","title":"Mute a MediaStream"},{"location":"en/tips/#multistream","text":"In case sending multiple streams. Currently, our SDK does not provide function to achieve that. On your application code, you can do it by preparing multiple [ MediaConnection ] (../ mediaconnection).","title":"Multistream"},{"location":"en/tips/#sdpsemantics","text":"You can pass RTCConfiguration for the RTCPeerConnection via Peer constructor. But we always use the value unified-plan for the sdpSemantics property.","title":"sdpSemantics"},{"location":"ja/","text":"\u672c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f\u3001SkyWay JavaScript SDK\u306eAPI\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3067\u3059\u3002 SkyWay\u3092\u4f7f\u3063\u305f\u958b\u767a\u304c\u521d\u3081\u3066\u306e\u5834\u5408\u306f\u3001SkyWay\u306e \u901a\u4fe1\u30e2\u30c7\u30eb \u3092\u5148\u306b\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002 \u30af\u30e9\u30b9\u306b\u3064\u3044\u3066 \u00b6 \u3053\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u8a18\u8f09\u3057\u3066\u3044\u308b\u30af\u30e9\u30b9\u306e\u4e00\u89a7\u3067\u3059\u3002 Peer MediaConnection DataConnection MeshRoom SFURoom EventEmitter \u306b\u3064\u3044\u3066 \u00b6 \u3059\u3079\u3066\u306e\u30af\u30e9\u30b9\u306f\u3001 EventEmitter \u3092\u7d99\u627f\u3057\u3066\u3044\u307e\u3059\u3002 \u305d\u306e\u305f\u3081\u3001 on() \u3084 off() \u3001 emit() \u306a\u3069\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u5229\u7528\u53ef\u80fd\u3067\u3059\u3002 function onOpen () { console . log ( 'an open event occurred!' ); } // add listener peer . on ( 'open' , onOpen ); // remove listener peer . off ( 'open' , onOpen ) // custom events peer . on ( 'myev' , val => { console . log ( val ); // 3 }) peer . emit ( 'myev' , 3 ); \u30e1\u30bd\u30c3\u30c9\u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3001 EventEmitter \u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u3001\u30af\u30e9\u30b9\u3054\u3068\u306e\u767a\u751f\u3059\u308b\u30a4\u30d9\u30f3\u30c8\u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3001\u5404\u30af\u30e9\u30b9\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u5404\u30af\u30e9\u30b9\u304b\u3089\u306e 'error' \u30a4\u30d9\u30f3\u30c8\u306f\u3001\u5fc5\u305a on('error', listener) \u3059\u308b\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u305d\u3046\u3057\u306a\u3044\u5834\u5408\u3001\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u3066\u4e88\u671f\u305b\u306c\u6319\u52d5\u306b\u306a\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002","title":"Introduction"},{"location":"ja/#_1","text":"\u3053\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u8a18\u8f09\u3057\u3066\u3044\u308b\u30af\u30e9\u30b9\u306e\u4e00\u89a7\u3067\u3059\u3002 Peer MediaConnection DataConnection MeshRoom SFURoom","title":"\u30af\u30e9\u30b9\u306b\u3064\u3044\u3066"},{"location":"ja/#eventemitter","text":"\u3059\u3079\u3066\u306e\u30af\u30e9\u30b9\u306f\u3001 EventEmitter \u3092\u7d99\u627f\u3057\u3066\u3044\u307e\u3059\u3002 \u305d\u306e\u305f\u3081\u3001 on() \u3084 off() \u3001 emit() \u306a\u3069\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u5229\u7528\u53ef\u80fd\u3067\u3059\u3002 function onOpen () { console . log ( 'an open event occurred!' ); } // add listener peer . on ( 'open' , onOpen ); // remove listener peer . off ( 'open' , onOpen ) // custom events peer . on ( 'myev' , val => { console . log ( val ); // 3 }) peer . emit ( 'myev' , 3 ); \u30e1\u30bd\u30c3\u30c9\u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3001 EventEmitter \u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u3001\u30af\u30e9\u30b9\u3054\u3068\u306e\u767a\u751f\u3059\u308b\u30a4\u30d9\u30f3\u30c8\u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3001\u5404\u30af\u30e9\u30b9\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u5404\u30af\u30e9\u30b9\u304b\u3089\u306e 'error' \u30a4\u30d9\u30f3\u30c8\u306f\u3001\u5fc5\u305a on('error', listener) \u3059\u308b\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u305d\u3046\u3057\u306a\u3044\u5834\u5408\u3001\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u3066\u4e88\u671f\u305b\u306c\u6319\u52d5\u306b\u306a\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002","title":"EventEmitter\u306b\u3064\u3044\u3066"},{"location":"ja/dataconnection/","text":"\u63a5\u7d9a\u5148Peer\u3078\u306e\u30c7\u30fc\u30bf\u30c1\u30e3\u30cd\u30eb\u63a5\u7d9a\u3092\u7ba1\u7406\u3059\u308b\u30af\u30e9\u30b9\u3067\u3059\u3002 SDK\u5185\u90e8\u306e\u5229\u7528\u306e\u307f\u3067\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u901a\u5e38\u5229\u7528\u3057\u307e\u305b\u3093\u3002 DataConnection \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u3001 Peer#connect() \u304a\u3088\u3073 Peer \u306e connection \u30a4\u30d9\u30f3\u30c8 \u3067\u751f\u6210\u3055\u308c\u307e\u3059\u3002 Sample \u00b6 // \u767a\u4fe1\u5074 const dataConnection = peer . connect ( 'peerID' ); // \u7740\u4fe1\u5074 peer . on ( 'connection' , dataConnection => { // ... }); Members \u00b6 Name Type Description type string \u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u30bf\u30a4\u30d7\u3092\u793a\u3059\u6587\u5b57\u5217\u3067\u3059\u3002DataConnection\u3067\u306f\u3001\u3053\u306e\u5024\u306f 'data' \u3067\u3059\u3002 metadata Object \u767a\u4fe1\u5074\u304c Peer#connect() \u5b9f\u884c\u6642\u306b\u6307\u5b9a\u3057\u305f metadata \u3067\u3059\u3002\u7740\u4fe1\u5074\u3067\u306f\u3001\u767a\u4fe1\u5074\u304c\u6307\u5b9a\u3057\u305f\u5024\u306b\u306a\u308a\u307e\u3059\u3002 serialization string \u767a\u4fe1\u5074\u304c Peer#connect() \u5b9f\u884c\u6642\u306b\u6307\u5b9a\u3057\u305f serialization \u3067\u3059\u3002\u7740\u4fe1\u5074\u3067\u306f\u3001\u767a\u4fe1\u5074\u304c\u6307\u5b9a\u3057\u305f\u5024\u306b\u306a\u308a\u307e\u3059\u3002 dcInit RTCDataChannelInit \u767a\u4fe1\u5074\u304c Peer#connect() \u5b9f\u884c\u6642\u306b\u6307\u5b9a\u3057\u305f dcInit \u3067\u3059\u3002\u7740\u4fe1\u5074\u3067\u306f\u3001\u767a\u4fe1\u5074\u304c\u6307\u5b9a\u3057\u305f\u5024\u306b\u306a\u308a\u307e\u3059\u3002 open boolean \u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u304c\u30aa\u30fc\u30d7\u30f3\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u793a\u3057\u307e\u3059\u3002 DataConnection \u306e open \u30a4\u30d9\u30f3\u30c8 \u304c\u767a\u751f\u3057\u305f\u969b\u306b\u30aa\u30fc\u30d7\u30f3\u3057\u3001 DataConnection#close() \u304c\u547c\u3073\u51fa\u3055\u308c\u305f\u307e\u305f\u306f\u30c7\u30fc\u30bf\u30c1\u30e3\u30cd\u30eb\u63a5\u7d9a\u304c\u5207\u65ad\u3055\u308c\u305f\u969b\u306b\u30af\u30ed\u30fc\u30ba\u3057\u307e\u3059\u3002 remoteId string \u63a5\u7d9a\u5148Peer\u306ePeer ID\u3067\u3059\u3002 peer string Deprecated! \u63a5\u7d9a\u5148Peer\u306ePeer ID\u3067\u3059\u3002remoteId\u3092\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002 id string \u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u8b58\u5225\u3059\u308bID\u3067\u3059\u3002 Methods \u00b6 send(data) \u00b6 \u63a5\u7d9a\u5148Peer\u306b\u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3057\u307e\u3059\u3002\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u65b9\u6cd5\u304c 'binary' \u3067\u3042\u308b\u5834\u5408\u306f\u3001\u9001\u4fe1\u524d\u306b\u5206\u5272\u3057\u307e\u3059\u3002 Parameters \u00b6 Name Type Required Default Description data * \u2714 \u63a5\u7d9a\u5148\u306ePeer\u3078\u9001\u308b\u30c7\u30fc\u30bf\u3067\u3059\u3002 Return value \u00b6 undefined Sample \u00b6 // \u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3059\u308b dataConnection . on ( 'open' , () => { const data = { name : 'SkyWay' , msg : 'Hello, World!' }; dataConnection . send ( data ); }); // \u30c7\u30fc\u30bf\u3092\u53d7\u4fe1\u3059\u308b dataConnection . on ( 'data' , ({ name , msg }) => { console . log ( ` ${ name } : ${ msg } ` ); // => 'SkyWay: Hello, World!' }); getPeerConnection() \u00b6 \u63a5\u7d9a\u5148Peer\u3068\u306eDataConnection\u304c\u5185\u90e8\u7684\u306b\u4f7f\u7528\u3057\u3066\u3044\u308b RTCPeerConnection \u3092\u53d6\u5f97\u3057\u307e\u3059\u3002 \u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u306e open \u30d7\u30ed\u30d1\u30c6\u30a3\u304c false \u306e\u5834\u5408\u306f\u3001 null \u304c\u8fd4\u308a\u307e\u3059\u3002 !!! \u6ce8\u610f RTCPeerConnection \u3092\u76f4\u63a5\u64cd\u4f5c\u3059\u308b\u3068\u3001SDK\u306f\u6b63\u3057\u304f\u52d5\u4f5c\u3057\u306a\u304f\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002 Return value \u00b6 RTCPeerConnection \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9 \u307e\u305f\u306f null Sample \u00b6 if ( dataConnection . open ) { const pc = dataConnection . getPeerConnection (); // ... } close(forceClose) \u00b6 \u63a5\u7d9a\u5148Peer\u3068\u306eDataConnection\u306e\u63a5\u7d9a\u3092\u5207\u65ad\u3057\u307e\u3059\u3002 Parameters \u00b6 Name Type Required Default Description forceClose boolean false \u3053\u306e\u5024\u304c true \u306e\u5834\u5408\u3001\u76f8\u624b\u306eDataConnection\u3082\u5373\u5ea7\u306bclose\u3057\u307e\u3059\u3002 false \u306e\u5834\u5408\u76f8\u624b\u306f\u3001\u30d6\u30e9\u30a6\u30b6\u306b\u3088\u308bice\u518d\u63a5\u7d9a\u304c\u5931\u6557\u3057\u3066\u304b\u3089\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092close\u3057\u307e\u3059\u3002 Return value \u00b6 undefined Events \u00b6 Event: 'open' \u00b6 \u30c7\u30fc\u30bf\u30c1\u30e3\u30cd\u30eb\u304c\u63a5\u7d9a\u3055\u308c\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 dataConnection . on ( 'open' , () => { // ... }); Event: 'data' \u00b6 \u63a5\u7d9a\u5148\u306ePeer\u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d7\u4fe1\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 \u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u65b9\u6cd5\u304c 'binary' \u3067\u3042\u308b\u5834\u5408\u306f\u3001\u5206\u5272\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3059\u3079\u3066\u3092\u53d7\u4fe1\u3057\u3001\u518d\u7d50\u5408\u304c\u5b8c\u4e86\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 Name Type Description data * \u53d7\u4fe1\u3057\u305f\u30c7\u30fc\u30bf\u3067\u3059\u3002 dataConnection . on ( 'data' , data => { // ... }); Event: 'close' \u00b6 DataConnection#close() \u304c\u547c\u3070\u308c\u305f\u3068\u304d\u3001\u307e\u305f\u306f\u63a5\u7d9a\u5148Peer\u3068\u306e\u30c7\u30fc\u30bf\u30c1\u30e3\u30cd\u30eb\u63a5\u7d9a\u304c\u5207\u65ad\u3055\u308c\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 dataConnection . on ( 'close' , () => { // ... }); Event: 'error' \u00b6 DataConnection#send() \u304c\u547c\u3070\u308c\u305f\u304c\u3001\u307e\u3060\u30c7\u30fc\u30bf\u30c1\u30e3\u30cd\u30eb\u304c\u63a5\u7d9a\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 dataConnection . on ( 'error' , () => { // ... });","title":"DataConnection"},{"location":"ja/dataconnection/#sample","text":"// \u767a\u4fe1\u5074 const dataConnection = peer . connect ( 'peerID' ); // \u7740\u4fe1\u5074 peer . on ( 'connection' , dataConnection => { // ... });","title":"Sample"},{"location":"ja/dataconnection/#members","text":"Name Type Description type string \u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u30bf\u30a4\u30d7\u3092\u793a\u3059\u6587\u5b57\u5217\u3067\u3059\u3002DataConnection\u3067\u306f\u3001\u3053\u306e\u5024\u306f 'data' \u3067\u3059\u3002 metadata Object \u767a\u4fe1\u5074\u304c Peer#connect() \u5b9f\u884c\u6642\u306b\u6307\u5b9a\u3057\u305f metadata \u3067\u3059\u3002\u7740\u4fe1\u5074\u3067\u306f\u3001\u767a\u4fe1\u5074\u304c\u6307\u5b9a\u3057\u305f\u5024\u306b\u306a\u308a\u307e\u3059\u3002 serialization string \u767a\u4fe1\u5074\u304c Peer#connect() \u5b9f\u884c\u6642\u306b\u6307\u5b9a\u3057\u305f serialization \u3067\u3059\u3002\u7740\u4fe1\u5074\u3067\u306f\u3001\u767a\u4fe1\u5074\u304c\u6307\u5b9a\u3057\u305f\u5024\u306b\u306a\u308a\u307e\u3059\u3002 dcInit RTCDataChannelInit \u767a\u4fe1\u5074\u304c Peer#connect() \u5b9f\u884c\u6642\u306b\u6307\u5b9a\u3057\u305f dcInit \u3067\u3059\u3002\u7740\u4fe1\u5074\u3067\u306f\u3001\u767a\u4fe1\u5074\u304c\u6307\u5b9a\u3057\u305f\u5024\u306b\u306a\u308a\u307e\u3059\u3002 open boolean \u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u304c\u30aa\u30fc\u30d7\u30f3\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u793a\u3057\u307e\u3059\u3002 DataConnection \u306e open \u30a4\u30d9\u30f3\u30c8 \u304c\u767a\u751f\u3057\u305f\u969b\u306b\u30aa\u30fc\u30d7\u30f3\u3057\u3001 DataConnection#close() \u304c\u547c\u3073\u51fa\u3055\u308c\u305f\u307e\u305f\u306f\u30c7\u30fc\u30bf\u30c1\u30e3\u30cd\u30eb\u63a5\u7d9a\u304c\u5207\u65ad\u3055\u308c\u305f\u969b\u306b\u30af\u30ed\u30fc\u30ba\u3057\u307e\u3059\u3002 remoteId string \u63a5\u7d9a\u5148Peer\u306ePeer ID\u3067\u3059\u3002 peer string Deprecated! \u63a5\u7d9a\u5148Peer\u306ePeer ID\u3067\u3059\u3002remoteId\u3092\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002 id string \u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u8b58\u5225\u3059\u308bID\u3067\u3059\u3002","title":"Members"},{"location":"ja/dataconnection/#methods","text":"","title":"Methods"},{"location":"ja/dataconnection/#senddata","text":"\u63a5\u7d9a\u5148Peer\u306b\u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3057\u307e\u3059\u3002\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u65b9\u6cd5\u304c 'binary' \u3067\u3042\u308b\u5834\u5408\u306f\u3001\u9001\u4fe1\u524d\u306b\u5206\u5272\u3057\u307e\u3059\u3002","title":"send(data)"},{"location":"ja/dataconnection/#parameters","text":"Name Type Required Default Description data * \u2714 \u63a5\u7d9a\u5148\u306ePeer\u3078\u9001\u308b\u30c7\u30fc\u30bf\u3067\u3059\u3002","title":"Parameters"},{"location":"ja/dataconnection/#return-value","text":"undefined","title":"Return value"},{"location":"ja/dataconnection/#sample_1","text":"// \u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3059\u308b dataConnection . on ( 'open' , () => { const data = { name : 'SkyWay' , msg : 'Hello, World!' }; dataConnection . send ( data ); }); // \u30c7\u30fc\u30bf\u3092\u53d7\u4fe1\u3059\u308b dataConnection . on ( 'data' , ({ name , msg }) => { console . log ( ` ${ name } : ${ msg } ` ); // => 'SkyWay: Hello, World!' });","title":"Sample"},{"location":"ja/dataconnection/#getpeerconnection","text":"\u63a5\u7d9a\u5148Peer\u3068\u306eDataConnection\u304c\u5185\u90e8\u7684\u306b\u4f7f\u7528\u3057\u3066\u3044\u308b RTCPeerConnection \u3092\u53d6\u5f97\u3057\u307e\u3059\u3002 \u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u306e open \u30d7\u30ed\u30d1\u30c6\u30a3\u304c false \u306e\u5834\u5408\u306f\u3001 null \u304c\u8fd4\u308a\u307e\u3059\u3002 !!! \u6ce8\u610f RTCPeerConnection \u3092\u76f4\u63a5\u64cd\u4f5c\u3059\u308b\u3068\u3001SDK\u306f\u6b63\u3057\u304f\u52d5\u4f5c\u3057\u306a\u304f\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002","title":"getPeerConnection()"},{"location":"ja/dataconnection/#return-value_1","text":"RTCPeerConnection \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9 \u307e\u305f\u306f null","title":"Return value"},{"location":"ja/dataconnection/#sample_2","text":"if ( dataConnection . open ) { const pc = dataConnection . getPeerConnection (); // ... }","title":"Sample"},{"location":"ja/dataconnection/#closeforceclose","text":"\u63a5\u7d9a\u5148Peer\u3068\u306eDataConnection\u306e\u63a5\u7d9a\u3092\u5207\u65ad\u3057\u307e\u3059\u3002","title":"close(forceClose)"},{"location":"ja/dataconnection/#parameters_1","text":"Name Type Required Default Description forceClose boolean false \u3053\u306e\u5024\u304c true \u306e\u5834\u5408\u3001\u76f8\u624b\u306eDataConnection\u3082\u5373\u5ea7\u306bclose\u3057\u307e\u3059\u3002 false \u306e\u5834\u5408\u76f8\u624b\u306f\u3001\u30d6\u30e9\u30a6\u30b6\u306b\u3088\u308bice\u518d\u63a5\u7d9a\u304c\u5931\u6557\u3057\u3066\u304b\u3089\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092close\u3057\u307e\u3059\u3002","title":"Parameters"},{"location":"ja/dataconnection/#return-value_2","text":"undefined","title":"Return value"},{"location":"ja/dataconnection/#events","text":"","title":"Events"},{"location":"ja/dataconnection/#event-open","text":"\u30c7\u30fc\u30bf\u30c1\u30e3\u30cd\u30eb\u304c\u63a5\u7d9a\u3055\u308c\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 dataConnection . on ( 'open' , () => { // ... });","title":"Event: 'open'"},{"location":"ja/dataconnection/#event-data","text":"\u63a5\u7d9a\u5148\u306ePeer\u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d7\u4fe1\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 \u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u65b9\u6cd5\u304c 'binary' \u3067\u3042\u308b\u5834\u5408\u306f\u3001\u5206\u5272\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3059\u3079\u3066\u3092\u53d7\u4fe1\u3057\u3001\u518d\u7d50\u5408\u304c\u5b8c\u4e86\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 Name Type Description data * \u53d7\u4fe1\u3057\u305f\u30c7\u30fc\u30bf\u3067\u3059\u3002 dataConnection . on ( 'data' , data => { // ... });","title":"Event: 'data'"},{"location":"ja/dataconnection/#event-close","text":"DataConnection#close() \u304c\u547c\u3070\u308c\u305f\u3068\u304d\u3001\u307e\u305f\u306f\u63a5\u7d9a\u5148Peer\u3068\u306e\u30c7\u30fc\u30bf\u30c1\u30e3\u30cd\u30eb\u63a5\u7d9a\u304c\u5207\u65ad\u3055\u308c\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 dataConnection . on ( 'close' , () => { // ... });","title":"Event: 'close'"},{"location":"ja/dataconnection/#event-error","text":"DataConnection#send() \u304c\u547c\u3070\u308c\u305f\u304c\u3001\u307e\u3060\u30c7\u30fc\u30bf\u30c1\u30e3\u30cd\u30eb\u304c\u63a5\u7d9a\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 dataConnection . on ( 'error' , () => { // ... });","title":"Event: 'error'"},{"location":"ja/mediaconnection/","text":"\u63a5\u7d9a\u5148Peer\u3078\u306e\u30e1\u30c7\u30a3\u30a2\u30c1\u30e3\u30cd\u30eb\u63a5\u7d9a\u3092\u7ba1\u7406\u3059\u308b\u30af\u30e9\u30b9\u3067\u3059\u3002 SDK\u5185\u90e8\u306e\u5229\u7528\u306e\u307f\u3067\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u901a\u5e38\u5229\u7528\u3057\u307e\u305b\u3093\u3002 MediaConnection \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u3001 Peer#call() \u304a\u3088\u3073 Peer \u306e call \u30a4\u30d9\u30f3\u30c8 \u3067\u751f\u6210\u3055\u308c\u307e\u3059\u3002 Sample \u00b6 // \u767a\u4fe1\u5074 const mediaConnection = peer . call ( 'peerID' , mediaStream ); // \u7740\u4fe1\u5074 peer . on ( 'call' , mediaConnection => { // MediaStream\u3067\u5fdc\u7b54\u3059\u308b mediaConnection . answer ( mediaStream ); }); Members \u00b6 Name Type Description type string \u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u30bf\u30a4\u30d7\u3092\u793a\u3059\u6587\u5b57\u5217\u3067\u3059\u3002MediaConnection\u3067\u306f\u3001\u3053\u306e\u5024\u306f 'media' \u3067\u3059\u3002 metadata Object \u767a\u4fe1\u5074\u304c Peer#call() \u5b9f\u884c\u6642\u306b\u6307\u5b9a\u3057\u305f metadata \u3067\u3059\u3002\u7740\u4fe1\u5074\u3067\u306f\u3001\u767a\u4fe1\u5074\u304c\u6307\u5b9a\u3057\u305f\u5024\u306b\u306a\u308a\u307e\u3059\u3002 localStream MediaStream Peer#call() \u3042\u308b\u3044\u306f MediaConnection#answer() \u3067\u6307\u5b9a\u3057\u305f\u81ea\u8eab\u306eMediaStream\u3067\u3059\u3002 open boolean \u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u304c\u30aa\u30fc\u30d7\u30f3\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u793a\u3057\u307e\u3059\u3002 MediaConnection \u306e stream \u30a4\u30d9\u30f3\u30c8 \u307e\u305f\u306f MediaConnection#answer() \u304c\u547c\u3073\u51fa\u3055\u308c\u305f\u969b\u306b\u30aa\u30fc\u30d7\u30f3\u3057\u3001 MediaConnection#close() \u304c\u547c\u3073\u51fa\u3055\u308c\u305f\u307e\u305f\u306f MediaConnection \u306e close \u30a4\u30d9\u30f3\u30c8 \u304c\u767a\u751f\u3057\u305f\u969b\u306b\u30af\u30ed\u30fc\u30ba\u3057\u307e\u3059\u3002 remoteId string \u63a5\u7d9a\u5148Peer\u306ePeer ID\u3067\u3059\u3002 peer string Deprecated! \u63a5\u7d9a\u5148Peer\u306ePeer ID\u3067\u3059\u3002remoteId\u3092\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002 id string \u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u8b58\u5225\u3059\u308bID\u3067\u3059\u3002 Methods \u00b6 answer(stream[, options]) \u00b6 \u767a\u4fe1\u5074\u304b\u3089\u306e\u30e1\u30c7\u30a3\u30a2\u30c1\u30e3\u30cd\u30eb\u63a5\u7d9a\u306e\u63a5\u7d9a\u8981\u6c42\u306b\u5bfe\u3057\u3066\u5fdc\u7b54\u3057\u307e\u3059\u3002 Parameters \u00b6 Name Type Required Default Description stream MediaStream \u2714 \u767a\u4fe1\u5074\u306ePeer\u3078\u9001\u308bMediaStream\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002 options answer options object \u5fdc\u7b54\u6642\u306b\u4ed8\u4e0e\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3059\u3002 answer options object \u00b6 Name Type Required Default Description videoBandwidth number \u63a5\u7d9a\u5148Peer\u304b\u3089\u53d7\u4fe1\u3059\u308b\u6620\u50cf\u306e\u6700\u5927\u5e2f\u57df\u5e45(kbps)\u3067\u3059\u3002 audioBandwidth number \u63a5\u7d9a\u5148Peer\u304b\u3089\u53d7\u4fe1\u3059\u308b\u97f3\u58f0\u306e\u6700\u5927\u5e2f\u57df\u5e45(kbps)\u3067\u3059\u3002 videoCodec string 'H264' \u306a\u3069\u306e\u6620\u50cf\u30b3\u30fc\u30c7\u30c3\u30af\u3067\u3059\u3002 audioCodec string 'PCMU' \u306a\u3069\u306e\u97f3\u58f0\u30b3\u30fc\u30c7\u30c3\u30af\u3067\u3059\u3002 Return value \u00b6 undefined Sample \u00b6 peer . on ( 'call' , mediaConnection => { const answerOption = { videoCodec : 'H264' , }; mediaConnection . answer ( mediaStream , answerOption ); }); close(forceClose) \u00b6 \u63a5\u7d9a\u5148Peer\u3068\u306eMediaConnection\u306e\u63a5\u7d9a\u3092\u5207\u65ad\u3057\u307e\u3059\u3002 Parameters \u00b6 Name Type Required Default Description forceClose boolean false \u3053\u306e\u5024\u304c true \u306e\u5834\u5408\u3001\u76f8\u624b\u306eMediaConnection\u3082\u5373\u5ea7\u306bclose\u3057\u307e\u3059\u3002 false \u306e\u5834\u5408\u76f8\u624b\u306f\u3001\u30d6\u30e9\u30a6\u30b6\u306b\u3088\u308bice\u518d\u63a5\u7d9a\u304c\u5931\u6557\u3057\u3066\u304b\u3089\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092close\u3057\u307e\u3059\u3002 Return value \u00b6 undefined replaceStream(stream) \u00b6 \u9001\u4fe1\u3057\u3066\u3044\u308bMediaStream\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002 \u53d7\u4fe1\u306e\u307f\u30e2\u30fc\u30c9\u3067\u30e1\u30c7\u30a3\u30a2\u30c1\u30e3\u30cd\u30eb\u63a5\u7d9a\u3092\u884c\u306a\u3063\u3066\u3044\u308b\u72b6\u614b\u3067\u3001 \u65b0\u3057\u3044MediaStream\u304c\u30e1\u30c7\u30a3\u30a2\u30c8\u30e9\u30c3\u30af\u3092\u6301\u3064\u5834\u5408\u3001\u81ea\u52d5\u7684\u306b\u9001\u53d7\u4fe1\u30e2\u30fc\u30c9\u306b\u5207\u308a\u66ff\u308f\u308a\u307e\u3059\u3002 Parameters \u00b6 Name Type Required Default Description stream MediaStream \u2714 \u66f4\u65b0\u5bfe\u8c61\u3068\u306a\u308b\u65b0\u3057\u3044MediaStream\u3067\u3059\u3002 Return value \u00b6 undefined getPeerConnection() \u00b6 \u63a5\u7d9a\u5148Peer\u3068\u306eMediaConnection\u304c\u5185\u90e8\u7684\u306b\u4f7f\u7528\u3057\u3066\u3044\u308b RTCPeerConnection \u3092\u53d6\u5f97\u3057\u307e\u3059\u3002 \u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u306e open \u30d7\u30ed\u30d1\u30c6\u30a3\u304c false \u306e\u5834\u5408\u306f\u3001 null \u304c\u8fd4\u308a\u307e\u3059\u3002 !!! \u6ce8\u610f RTCPeerConnection \u3092\u76f4\u63a5\u64cd\u4f5c\u3059\u308b\u3068\u3001SDK\u306f\u6b63\u3057\u304f\u52d5\u4f5c\u3057\u306a\u304f\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002 Return value \u00b6 RTCPeerConnection \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9 \u307e\u305f\u306f null Sample \u00b6 if ( mediaConnection . open ) { const pc = mediaConnection . getPeerConnection (); // ... } Events \u00b6 Event: 'stream' \u00b6 MediaStream\u3092\u53d7\u4fe1\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 Name Type Description stream MediaStream MediaStream\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\u3002 mediaConnection . on ( 'stream' , stream => { // ... }); Event: 'close' \u00b6 MediaConnection#close() \u304c\u547c\u3070\u308c\u305f\u3068\u304d\u3001\u307e\u305f\u306f\u63a5\u7d9a\u5148Peer\u3068\u306e\u30e1\u30c7\u30a3\u30a2\u30c1\u30e3\u30cd\u30eb\u63a5\u7d9a\u304c\u5207\u65ad\u3055\u308c\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 mediaConnection . on ( 'close' , () => { // ... });","title":"MediaConnection"},{"location":"ja/mediaconnection/#sample","text":"// \u767a\u4fe1\u5074 const mediaConnection = peer . call ( 'peerID' , mediaStream ); // \u7740\u4fe1\u5074 peer . on ( 'call' , mediaConnection => { // MediaStream\u3067\u5fdc\u7b54\u3059\u308b mediaConnection . answer ( mediaStream ); });","title":"Sample"},{"location":"ja/mediaconnection/#members","text":"Name Type Description type string \u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u30bf\u30a4\u30d7\u3092\u793a\u3059\u6587\u5b57\u5217\u3067\u3059\u3002MediaConnection\u3067\u306f\u3001\u3053\u306e\u5024\u306f 'media' \u3067\u3059\u3002 metadata Object \u767a\u4fe1\u5074\u304c Peer#call() \u5b9f\u884c\u6642\u306b\u6307\u5b9a\u3057\u305f metadata \u3067\u3059\u3002\u7740\u4fe1\u5074\u3067\u306f\u3001\u767a\u4fe1\u5074\u304c\u6307\u5b9a\u3057\u305f\u5024\u306b\u306a\u308a\u307e\u3059\u3002 localStream MediaStream Peer#call() \u3042\u308b\u3044\u306f MediaConnection#answer() \u3067\u6307\u5b9a\u3057\u305f\u81ea\u8eab\u306eMediaStream\u3067\u3059\u3002 open boolean \u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u304c\u30aa\u30fc\u30d7\u30f3\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u793a\u3057\u307e\u3059\u3002 MediaConnection \u306e stream \u30a4\u30d9\u30f3\u30c8 \u307e\u305f\u306f MediaConnection#answer() \u304c\u547c\u3073\u51fa\u3055\u308c\u305f\u969b\u306b\u30aa\u30fc\u30d7\u30f3\u3057\u3001 MediaConnection#close() \u304c\u547c\u3073\u51fa\u3055\u308c\u305f\u307e\u305f\u306f MediaConnection \u306e close \u30a4\u30d9\u30f3\u30c8 \u304c\u767a\u751f\u3057\u305f\u969b\u306b\u30af\u30ed\u30fc\u30ba\u3057\u307e\u3059\u3002 remoteId string \u63a5\u7d9a\u5148Peer\u306ePeer ID\u3067\u3059\u3002 peer string Deprecated! \u63a5\u7d9a\u5148Peer\u306ePeer ID\u3067\u3059\u3002remoteId\u3092\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002 id string \u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u8b58\u5225\u3059\u308bID\u3067\u3059\u3002","title":"Members"},{"location":"ja/mediaconnection/#methods","text":"","title":"Methods"},{"location":"ja/mediaconnection/#answerstream-options","text":"\u767a\u4fe1\u5074\u304b\u3089\u306e\u30e1\u30c7\u30a3\u30a2\u30c1\u30e3\u30cd\u30eb\u63a5\u7d9a\u306e\u63a5\u7d9a\u8981\u6c42\u306b\u5bfe\u3057\u3066\u5fdc\u7b54\u3057\u307e\u3059\u3002","title":"answer(stream[, options])"},{"location":"ja/mediaconnection/#parameters","text":"Name Type Required Default Description stream MediaStream \u2714 \u767a\u4fe1\u5074\u306ePeer\u3078\u9001\u308bMediaStream\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002 options answer options object \u5fdc\u7b54\u6642\u306b\u4ed8\u4e0e\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3059\u3002","title":"Parameters"},{"location":"ja/mediaconnection/#answer-options-object","text":"Name Type Required Default Description videoBandwidth number \u63a5\u7d9a\u5148Peer\u304b\u3089\u53d7\u4fe1\u3059\u308b\u6620\u50cf\u306e\u6700\u5927\u5e2f\u57df\u5e45(kbps)\u3067\u3059\u3002 audioBandwidth number \u63a5\u7d9a\u5148Peer\u304b\u3089\u53d7\u4fe1\u3059\u308b\u97f3\u58f0\u306e\u6700\u5927\u5e2f\u57df\u5e45(kbps)\u3067\u3059\u3002 videoCodec string 'H264' \u306a\u3069\u306e\u6620\u50cf\u30b3\u30fc\u30c7\u30c3\u30af\u3067\u3059\u3002 audioCodec string 'PCMU' \u306a\u3069\u306e\u97f3\u58f0\u30b3\u30fc\u30c7\u30c3\u30af\u3067\u3059\u3002","title":"answer options object"},{"location":"ja/mediaconnection/#return-value","text":"undefined","title":"Return value"},{"location":"ja/mediaconnection/#sample_1","text":"peer . on ( 'call' , mediaConnection => { const answerOption = { videoCodec : 'H264' , }; mediaConnection . answer ( mediaStream , answerOption ); });","title":"Sample"},{"location":"ja/mediaconnection/#closeforceclose","text":"\u63a5\u7d9a\u5148Peer\u3068\u306eMediaConnection\u306e\u63a5\u7d9a\u3092\u5207\u65ad\u3057\u307e\u3059\u3002","title":"close(forceClose)"},{"location":"ja/mediaconnection/#parameters_1","text":"Name Type Required Default Description forceClose boolean false \u3053\u306e\u5024\u304c true \u306e\u5834\u5408\u3001\u76f8\u624b\u306eMediaConnection\u3082\u5373\u5ea7\u306bclose\u3057\u307e\u3059\u3002 false \u306e\u5834\u5408\u76f8\u624b\u306f\u3001\u30d6\u30e9\u30a6\u30b6\u306b\u3088\u308bice\u518d\u63a5\u7d9a\u304c\u5931\u6557\u3057\u3066\u304b\u3089\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092close\u3057\u307e\u3059\u3002","title":"Parameters"},{"location":"ja/mediaconnection/#return-value_1","text":"undefined","title":"Return value"},{"location":"ja/mediaconnection/#replacestreamstream","text":"\u9001\u4fe1\u3057\u3066\u3044\u308bMediaStream\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002 \u53d7\u4fe1\u306e\u307f\u30e2\u30fc\u30c9\u3067\u30e1\u30c7\u30a3\u30a2\u30c1\u30e3\u30cd\u30eb\u63a5\u7d9a\u3092\u884c\u306a\u3063\u3066\u3044\u308b\u72b6\u614b\u3067\u3001 \u65b0\u3057\u3044MediaStream\u304c\u30e1\u30c7\u30a3\u30a2\u30c8\u30e9\u30c3\u30af\u3092\u6301\u3064\u5834\u5408\u3001\u81ea\u52d5\u7684\u306b\u9001\u53d7\u4fe1\u30e2\u30fc\u30c9\u306b\u5207\u308a\u66ff\u308f\u308a\u307e\u3059\u3002","title":"replaceStream(stream)"},{"location":"ja/mediaconnection/#parameters_2","text":"Name Type Required Default Description stream MediaStream \u2714 \u66f4\u65b0\u5bfe\u8c61\u3068\u306a\u308b\u65b0\u3057\u3044MediaStream\u3067\u3059\u3002","title":"Parameters"},{"location":"ja/mediaconnection/#return-value_2","text":"undefined","title":"Return value"},{"location":"ja/mediaconnection/#getpeerconnection","text":"\u63a5\u7d9a\u5148Peer\u3068\u306eMediaConnection\u304c\u5185\u90e8\u7684\u306b\u4f7f\u7528\u3057\u3066\u3044\u308b RTCPeerConnection \u3092\u53d6\u5f97\u3057\u307e\u3059\u3002 \u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u306e open \u30d7\u30ed\u30d1\u30c6\u30a3\u304c false \u306e\u5834\u5408\u306f\u3001 null \u304c\u8fd4\u308a\u307e\u3059\u3002 !!! \u6ce8\u610f RTCPeerConnection \u3092\u76f4\u63a5\u64cd\u4f5c\u3059\u308b\u3068\u3001SDK\u306f\u6b63\u3057\u304f\u52d5\u4f5c\u3057\u306a\u304f\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002","title":"getPeerConnection()"},{"location":"ja/mediaconnection/#return-value_3","text":"RTCPeerConnection \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9 \u307e\u305f\u306f null","title":"Return value"},{"location":"ja/mediaconnection/#sample_2","text":"if ( mediaConnection . open ) { const pc = mediaConnection . getPeerConnection (); // ... }","title":"Sample"},{"location":"ja/mediaconnection/#events","text":"","title":"Events"},{"location":"ja/mediaconnection/#event-stream","text":"MediaStream\u3092\u53d7\u4fe1\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 Name Type Description stream MediaStream MediaStream\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\u3002 mediaConnection . on ( 'stream' , stream => { // ... });","title":"Event: 'stream'"},{"location":"ja/mediaconnection/#event-close","text":"MediaConnection#close() \u304c\u547c\u3070\u308c\u305f\u3068\u304d\u3001\u307e\u305f\u306f\u63a5\u7d9a\u5148Peer\u3068\u306e\u30e1\u30c7\u30a3\u30a2\u30c1\u30e3\u30cd\u30eb\u63a5\u7d9a\u304c\u5207\u65ad\u3055\u308c\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 mediaConnection . on ( 'close' , () => { // ... });","title":"Event: 'close'"},{"location":"ja/meshroom/","text":"\u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u3067\u306e\u30eb\u30fc\u30e0\u3092\u7ba1\u7406\u3059\u308b\u30af\u30e9\u30b9\u3067\u3059\u3002 SDK\u5185\u90e8\u306e\u5229\u7528\u306e\u307f\u3067\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u901a\u5e38\u5229\u7528\u3057\u307e\u305b\u3093\u3002 MeshRoom\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u3001 Peer#joinRoom() \u3067\u751f\u6210\u3055\u308c\u307e\u3059\u3002 Sample \u00b6 const meshRoom = peer . joinRoom ( 'roomName' , { mode : 'mesh' , stream : localStream , }); meshRoom . on ( 'open' , () => {}); Members \u00b6 Name Type Description name string \u30eb\u30fc\u30e0\u540d\u3067\u3059\u3002 connections Object Peer ID\u3092\u30ad\u30fc\u306b\u3001\u30eb\u30fc\u30e0\u5185\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u4fdd\u6301\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002 Methods \u00b6 close() \u00b6 \u30eb\u30fc\u30e0\u3092\u9000\u51fa\u3057\u3001\u30eb\u30fc\u30e0\u5185\u306e\u3059\u3079\u3066\u306e\u30e6\u30fc\u30b6\u30fc\u3068\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u5207\u65ad\u3057\u307e\u3059\u3002 Return value \u00b6 undefined getLog() \u00b6 \u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u306b\u30eb\u30fc\u30e0\u306e\u30ed\u30b0\u53d6\u5f97\u3092\u8981\u6c42\u3057\u307e\u3059\u3002 \u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u304b\u3089\u30ed\u30b0\u3092\u53d7\u4fe1\u3059\u308b\u3068\u3001 log \u30a4\u30d9\u30f3\u30c8 \u304c\u767a\u706b\u3057\u307e\u3059\u3002 Return value \u00b6 undefined Sample \u00b6 room . once ( 'log' , log => { // ... }); room . getLog (); replaceStream(stream) \u00b6 \u9001\u4fe1\u3057\u3066\u3044\u308bMediaStream\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002 \u53d7\u4fe1\u306e\u307f\u30e2\u30fc\u30c9\u3067\u30e1\u30c7\u30a3\u30a2\u30c1\u30e3\u30cd\u30eb\u63a5\u7d9a\u3092\u884c\u306a\u3063\u3066\u3044\u308b\u72b6\u614b\u3067\u3001 \u65b0\u3057\u3044MediaStream\u304c\u30e1\u30c7\u30a3\u30a2\u30c8\u30e9\u30c3\u30af\u3092\u6301\u3064\u5834\u5408\u3001\u81ea\u52d5\u7684\u306b\u9001\u53d7\u4fe1\u30e2\u30fc\u30c9\u306b\u5207\u308a\u66ff\u308f\u308a\u307e\u3059\u3002 Parameters \u00b6 Name Type Required Default Description stream MediaStream \u2714 \u66f4\u65b0\u5bfe\u8c61\u3068\u306a\u308b\u65b0\u3057\u3044MediaStream\u3067\u3059\u3002 Return value \u00b6 undefined send(data) \u00b6 WebSocket\u3092\u4f7f\u7528\u3057\u3066\u30eb\u30fc\u30e0\u5185\u306e\u5168\u3066\u306e\u30e6\u30fc\u30b6\u30fc\u306b\u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3057\u307e\u3059\u3002 Parameters \u00b6 Name Type Required Default Description data * \u2714 \u9001\u4fe1\u3059\u308b\u30c7\u30fc\u30bf\u3067\u3059\u3002 Return value \u00b6 undefined Events \u00b6 Event: 'open' \u00b6 \u65b0\u898f\u306bPeer\u304c\u30eb\u30fc\u30e0\u3078\u5165\u5ba4\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 room . on ( 'open' , () => { // ... }); Event: 'peerJoin' \u00b6 \u30eb\u30fc\u30e0\u306b\u65b0\u3057\u3044Peer\u304c\u53c2\u52a0\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 Name Type Description peerId string \u53c2\u52a0\u3057\u305fPeer\u306eID\u3067\u3059\u3002 room . on ( 'peerJoin' , peerId => { // ... }); Event: 'peerLeave' \u00b6 \u65b0\u898f\u306bPeer\u304c\u30eb\u30fc\u30e0\u3092\u9000\u51fa\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 Name Type Description peerId string \u9000\u51fa\u3057\u305fPeer\u306eID\u3067\u3059\u3002 room . on ( 'peerLeave' , peerId => { // ... }); Event: 'log' \u00b6 \u30eb\u30fc\u30e0\u306e\u30ed\u30b0\u3092\u53d7\u4fe1\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 Name Type Description logs string[] \u30ed\u30b0\uff08JSON\u6587\u5b57\u5217\uff09\u306e\u914d\u5217\u3067\u3059\u3002 room . once ( 'log' , logs => { for ( const logStr of logs ) { const { messageType , message , timestamp } = JSON . parse ( logStr ); // ... } }); Event: 'stream' \u00b6 \u30eb\u30fc\u30e0\u306bJoin\u3057\u3066\u3044\u308b\u4ed6\u306e\u30e6\u30fc\u30b6\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u53d7\u4fe1\u3057\u305f\u6642\u306b\u767a\u751f\u3057\u307e\u3059\u3002 \u30b9\u30c8\u30ea\u30fc\u30e0\u9001\u4fe1\u5143\u306ePeer ID\u306f stream.peerId \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 Name Type Description stream MediaStream MediaStream\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\u3002 room . on ( 'stream' , stream => { // ... }); Event: 'data' \u00b6 \u4ed6\u306e\u30e6\u30fc\u30b6\u30fc\u304b\u3089\u9001\u4fe1\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3092\u53d7\u4fe1\u3057\u305f\u6642\u306b\u767a\u751f\u3057\u307e\u3059\u3002 Name Type Description data object data object \u5f62\u5f0f\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002 data object \u00b6 Name Type Description src string \u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3057\u305fPeer\u306eID\u3067\u3059\u3002 data * \u53d7\u4fe1\u3057\u305f\u30c7\u30fc\u30bf\u3067\u3059\u3002 room . on ( 'data' , ({ src , data }) => { // ... }); Event: 'close' \u00b6 \u30eb\u30fc\u30e0\u3092close\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 room . on ( 'close' , () => { // ... });","title":"MeshRoom"},{"location":"ja/meshroom/#sample","text":"const meshRoom = peer . joinRoom ( 'roomName' , { mode : 'mesh' , stream : localStream , }); meshRoom . on ( 'open' , () => {});","title":"Sample"},{"location":"ja/meshroom/#members","text":"Name Type Description name string \u30eb\u30fc\u30e0\u540d\u3067\u3059\u3002 connections Object Peer ID\u3092\u30ad\u30fc\u306b\u3001\u30eb\u30fc\u30e0\u5185\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u4fdd\u6301\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002","title":"Members"},{"location":"ja/meshroom/#methods","text":"","title":"Methods"},{"location":"ja/meshroom/#close","text":"\u30eb\u30fc\u30e0\u3092\u9000\u51fa\u3057\u3001\u30eb\u30fc\u30e0\u5185\u306e\u3059\u3079\u3066\u306e\u30e6\u30fc\u30b6\u30fc\u3068\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u5207\u65ad\u3057\u307e\u3059\u3002","title":"close()"},{"location":"ja/meshroom/#return-value","text":"undefined","title":"Return value"},{"location":"ja/meshroom/#getlog","text":"\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u306b\u30eb\u30fc\u30e0\u306e\u30ed\u30b0\u53d6\u5f97\u3092\u8981\u6c42\u3057\u307e\u3059\u3002 \u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u304b\u3089\u30ed\u30b0\u3092\u53d7\u4fe1\u3059\u308b\u3068\u3001 log \u30a4\u30d9\u30f3\u30c8 \u304c\u767a\u706b\u3057\u307e\u3059\u3002","title":"getLog()"},{"location":"ja/meshroom/#return-value_1","text":"undefined","title":"Return value"},{"location":"ja/meshroom/#sample_1","text":"room . once ( 'log' , log => { // ... }); room . getLog ();","title":"Sample"},{"location":"ja/meshroom/#replacestreamstream","text":"\u9001\u4fe1\u3057\u3066\u3044\u308bMediaStream\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002 \u53d7\u4fe1\u306e\u307f\u30e2\u30fc\u30c9\u3067\u30e1\u30c7\u30a3\u30a2\u30c1\u30e3\u30cd\u30eb\u63a5\u7d9a\u3092\u884c\u306a\u3063\u3066\u3044\u308b\u72b6\u614b\u3067\u3001 \u65b0\u3057\u3044MediaStream\u304c\u30e1\u30c7\u30a3\u30a2\u30c8\u30e9\u30c3\u30af\u3092\u6301\u3064\u5834\u5408\u3001\u81ea\u52d5\u7684\u306b\u9001\u53d7\u4fe1\u30e2\u30fc\u30c9\u306b\u5207\u308a\u66ff\u308f\u308a\u307e\u3059\u3002","title":"replaceStream(stream)"},{"location":"ja/meshroom/#parameters","text":"Name Type Required Default Description stream MediaStream \u2714 \u66f4\u65b0\u5bfe\u8c61\u3068\u306a\u308b\u65b0\u3057\u3044MediaStream\u3067\u3059\u3002","title":"Parameters"},{"location":"ja/meshroom/#return-value_2","text":"undefined","title":"Return value"},{"location":"ja/meshroom/#senddata","text":"WebSocket\u3092\u4f7f\u7528\u3057\u3066\u30eb\u30fc\u30e0\u5185\u306e\u5168\u3066\u306e\u30e6\u30fc\u30b6\u30fc\u306b\u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3057\u307e\u3059\u3002","title":"send(data)"},{"location":"ja/meshroom/#parameters_1","text":"Name Type Required Default Description data * \u2714 \u9001\u4fe1\u3059\u308b\u30c7\u30fc\u30bf\u3067\u3059\u3002","title":"Parameters"},{"location":"ja/meshroom/#return-value_3","text":"undefined","title":"Return value"},{"location":"ja/meshroom/#events","text":"","title":"Events"},{"location":"ja/meshroom/#event-open","text":"\u65b0\u898f\u306bPeer\u304c\u30eb\u30fc\u30e0\u3078\u5165\u5ba4\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 room . on ( 'open' , () => { // ... });","title":"Event: 'open'"},{"location":"ja/meshroom/#event-peerjoin","text":"\u30eb\u30fc\u30e0\u306b\u65b0\u3057\u3044Peer\u304c\u53c2\u52a0\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 Name Type Description peerId string \u53c2\u52a0\u3057\u305fPeer\u306eID\u3067\u3059\u3002 room . on ( 'peerJoin' , peerId => { // ... });","title":"Event: 'peerJoin'"},{"location":"ja/meshroom/#event-peerleave","text":"\u65b0\u898f\u306bPeer\u304c\u30eb\u30fc\u30e0\u3092\u9000\u51fa\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 Name Type Description peerId string \u9000\u51fa\u3057\u305fPeer\u306eID\u3067\u3059\u3002 room . on ( 'peerLeave' , peerId => { // ... });","title":"Event: 'peerLeave'"},{"location":"ja/meshroom/#event-log","text":"\u30eb\u30fc\u30e0\u306e\u30ed\u30b0\u3092\u53d7\u4fe1\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 Name Type Description logs string[] \u30ed\u30b0\uff08JSON\u6587\u5b57\u5217\uff09\u306e\u914d\u5217\u3067\u3059\u3002 room . once ( 'log' , logs => { for ( const logStr of logs ) { const { messageType , message , timestamp } = JSON . parse ( logStr ); // ... } });","title":"Event: 'log'"},{"location":"ja/meshroom/#event-stream","text":"\u30eb\u30fc\u30e0\u306bJoin\u3057\u3066\u3044\u308b\u4ed6\u306e\u30e6\u30fc\u30b6\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u53d7\u4fe1\u3057\u305f\u6642\u306b\u767a\u751f\u3057\u307e\u3059\u3002 \u30b9\u30c8\u30ea\u30fc\u30e0\u9001\u4fe1\u5143\u306ePeer ID\u306f stream.peerId \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 Name Type Description stream MediaStream MediaStream\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\u3002 room . on ( 'stream' , stream => { // ... });","title":"Event: 'stream'"},{"location":"ja/meshroom/#event-data","text":"\u4ed6\u306e\u30e6\u30fc\u30b6\u30fc\u304b\u3089\u9001\u4fe1\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3092\u53d7\u4fe1\u3057\u305f\u6642\u306b\u767a\u751f\u3057\u307e\u3059\u3002 Name Type Description data object data object \u5f62\u5f0f\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002","title":"Event: 'data'"},{"location":"ja/meshroom/#data-object","text":"Name Type Description src string \u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3057\u305fPeer\u306eID\u3067\u3059\u3002 data * \u53d7\u4fe1\u3057\u305f\u30c7\u30fc\u30bf\u3067\u3059\u3002 room . on ( 'data' , ({ src , data }) => { // ... });","title":"data object"},{"location":"ja/meshroom/#event-close","text":"\u30eb\u30fc\u30e0\u3092close\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 room . on ( 'close' , () => { // ... });","title":"Event: 'close'"},{"location":"ja/peer/","text":"P2P\u63a5\u7d9a\u304a\u3088\u3073\u30eb\u30fc\u30e0\u63a5\u7d9a\u6a5f\u80fd\u3092\u64cd\u4f5c\u3059\u308b\u305f\u3081\u306e\u30af\u30e9\u30b9\u3067\u3059\u3002 SkyWay\u3092\u5229\u7528\u3059\u308b\u305f\u3081\u306b\u3001\u6700\u521d\u306bPeer\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\u304c\u5fc5\u8981\u3067\u3059\u3002 Constructor(id, options) \u00b6 Constructor(options) \u00b6 \u65b0\u898f\u306bPeer\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u307e\u3059\u3002 new Peer() \u306b\u3088\u308a\u3001SkyWay\u306e\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u3068\u63a5\u7d9a\u3057\u307e\u3059\u3002 Sample \u00b6 // \u30c7\u30d0\u30c3\u30b0\u60c5\u5831\u3092\u6700\u5927(3)\u306b\u3057\u3066\u63a5\u7d9a\u3059\u308b\u5834\u5408 const peer = new Peer ( 'some-peer-name' , { key : \"<YOUR-API-KEY>\" debug : 3 , }); // TURN\u30b5\u30fc\u30d0\u3092\u5f37\u5236\u5229\u7528\u3059\u308b\u5834\u5408 const peer = new Peer ({ key : \"<YOUR-API-KEY>\" config : { iceTransportPolicy : 'relay' , }, }); Parameter \u00b6 Name Type Required Default Description id string \u30e6\u30fc\u30b6\u306ePeer ID\u3067\u3059\u3002\u5024\u3092\u4e0e\u3048\u306a\u304b\u3063\u305f\u5834\u5408\u3001Peer ID\u306f\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u304b\u3089\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002 options options object \u2714 \u63a5\u7d9a\u306b\u95a2\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6307\u5b9a\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3059\u3002 options object \u00b6 Name Type Required Default Description key string \u2714 SkyWay\u306eAPI\u30ad\u30fc\u3067\u3059\u3002 debug number 0 \u30ed\u30b0\u30ec\u30d9\u30eb\u306f NONE: 0 , ERROR: 1 , WARN: 2 , FULL: 3 \u304b\u3089\u9078\u629e\u3067\u304d\u307e\u3059\u3002 turn boolean true SkyWay\u3067\u63d0\u4f9b\u3059\u308bTURN\u3092\u4f7f\u3046\u304b\u3069\u3046\u304b\u306e\u30d5\u30e9\u30b0\u3067\u3059\u3002TURN\u5229\u7528\u304c\u6709\u52b9\u306e\u5834\u5408\u306e\u307f\u4f7f\u3048\u307e\u3059\u3002 credential credential object Peer\u3092\u8a8d\u8a3c\u3059\u308b\u305f\u3081\u306e\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u3067\u3059\u3002\u8a8d\u8a3c\u6a5f\u80fd\u304c\u6709\u52b9\u306e\u5834\u5408\u306e\u307f\u4f7f\u3048\u307e\u3059\u3002 config RTCConfiguration Default RTCConfiguration object RTCPeerConnection \u306b\u6e21\u3055\u308c\u308bRTCConfiguration\u3067\u3059\u3002\u767a\u5c55\u7684\u306a\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u305f\u3081\u3001\u5185\u5bb9\u3092\u7406\u89e3\u3057\u3066\u3044\u308b\u5834\u5408\u306e\u307f\u3054\u5229\u7528\u304f\u3060\u3055\u3044\u3002 credential object \u00b6 Peer\u8a8d\u8a3c\u6a5f\u80fd\u306e\u8a73\u7d30\u306f Peer\u8a8d\u8a3c\u306e\u30b5\u30f3\u30d7\u30eb \u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002 Name Type Required Default Description timestamp number \u73fe\u5728\u306eUNIX\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u3067\u3059\u3002 ttl number Time to live(ttl)\u3002\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7 + ttl \u306e\u6642\u9593\u3067\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u304c\u5931\u52b9\u3057\u307e\u3059\u3002 authToken string HMAC\u3092\u5229\u7528\u3057\u3066\u751f\u6210\u3059\u308b\u8a8d\u8a3c\u7528\u30c8\u30fc\u30af\u30f3\u3067\u3059\u3002 Default RTCConfiguration object \u00b6 const defaultConfig = { iceServers : [{ urls : 'stun:stun.webrtc.ecl.ntt.com:3478' , url : 'stun:stun.webrtc.ecl.ntt.com:3478' , }], iceTransportPolicy : 'all' , sdpSemantics : 'unified-plan' , }; Members \u00b6 Name Type Description id string \u30e6\u30fc\u30b6\u30fc\u304c\u6307\u5b9a\u3057\u305fPeer ID\u3001\u3082\u3057\u304f\u306f\u30b5\u30fc\u30d0\u304c\u751f\u6210\u3057\u305fPeer ID\u3067\u3059\u3002 open boolean \u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u3078\u306e\u63a5\u7d9a\u72b6\u6cc1\u3092\u4fdd\u6301\u3057\u307e\u3059\u3002 connections Object \u5168\u3066\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u4fdd\u6301\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002 rooms Object \u5168\u3066\u306e\u30eb\u30fc\u30e0\u3092\u4fdd\u6301\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002 options Object Constructor() \u3067\u306e\u6307\u5b9a\u3068\u3001SDK\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u8a2d\u5b9a\u3092\u53cd\u6620\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002 Methods \u00b6 call(peerId[, stream][, options]) \u00b6 \u6307\u5b9a\u3057\u305fPeer\u306b\u30e1\u30c7\u30a3\u30a2\u30c1\u30e3\u30cd\u30eb(\u97f3\u58f0\u30fb\u6620\u50cf)\u3067\u63a5\u7d9a\u3057\u3066\u3001 MediaConnection \u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u5e2f\u57df\u5e45\u30fb\u30b3\u30fc\u30c7\u30c3\u30af\u306a\u3069\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002 Parameters \u00b6 Name Type Required Default Description peerId string \u2714 \u63a5\u7d9a\u5148\u306ePeer ID\u3067\u3059\u3002 stream MediaStream \u63a5\u7d9a\u5148\u306ePeer\u3078\u9001\u308b\u30e1\u30c7\u30a3\u30a2\u30b9\u30c8\u30ea\u30fc\u30e0\u3067\u3059\u3002 \u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001\u53d7\u4fe1\u306e\u307f\u30e2\u30fc\u30c9\u3067\u767a\u4fe1\u3057\u307e\u3059\u3002 options call options object \u767a\u4fe1\u6642\u306b\u4ed8\u4e0e\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3059\u3002\u5e2f\u57df\u5e45\u30fb\u30b3\u30fc\u30c7\u30c3\u30af\u306a\u3069\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 call options object \u00b6 Name Type Required Default Description metadata Object \u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u306b\u95a2\u9023\u4ed8\u3051\u3055\u308c\u308b\u4efb\u610f\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\u3067\u3001\u63a5\u7d9a\u5148\u306ePeer\u306b\u6e21\u3055\u308c\u307e\u3059\u3002 videoBandwidth number \u63a5\u7d9a\u5148\u304b\u3089\u53d7\u4fe1\u3059\u308b\u6620\u50cf\u306e\u6700\u5927\u5e2f\u57df\u5e45(kbps)\u3067\u3059\u3002 audioBandwidth number \u63a5\u7d9a\u5148\u304b\u3089\u53d7\u4fe1\u3059\u308b\u97f3\u58f0\u306e\u6700\u5927\u5e2f\u57df\u5e45(kbps)\u3067\u3059\u3002 videoCodec string 'H264' \u306a\u3069\u306e\u6620\u50cf\u30b3\u30fc\u30c7\u30c3\u30af\u3067\u3059\u3002 audioCodec string 'PCMU' \u306a\u3069\u306e\u97f3\u58f0\u30b3\u30fc\u30c7\u30c3\u30af\u3067\u3059\u3002 videoReceiveEnabled boolean \u6620\u50cf\u3092\u53d7\u4fe1\u306e\u307f\u3067\u4f7f\u3046\u5834\u5408\u306e\u30d5\u30e9\u30b0\u3067\u3059\u3002\u3053\u306e\u5024\u304c true \u304b\u3064 stream \u306b\u6620\u50cf\u30c8\u30e9\u30c3\u30af\u304c\u542b\u307e\u308c\u306a\u3044\u5834\u5408\u3001\u53d7\u4fe1\u306e\u307f\u3067\u6620\u50cf\u306e\u901a\u4fe1\u3092\u884c\u3044\u307e\u3059\u3002 audioReceiveEnabled boolean \u97f3\u58f0\u3092\u53d7\u4fe1\u306e\u307f\u3067\u4f7f\u3046\u5834\u5408\u306e\u30d5\u30e9\u30b0\u3067\u3059\u3002\u3053\u306e\u5024\u304c true \u304b\u3064 stream \u306b\u97f3\u58f0\u30c8\u30e9\u30c3\u30af\u304c\u542b\u307e\u308c\u306a\u3044\u5834\u5408\u3001\u53d7\u4fe1\u306e\u307f\u3067\u97f3\u58f0\u306e\u901a\u4fe1\u3092\u884c\u3044\u307e\u3059\u3002 connectionId string \u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u8b58\u5225\u3059\u308bID\u3067\u3059\u3002 label string Deprecated! \u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u8b58\u5225\u3059\u308b\u306e\u306b\u5229\u7528\u3059\u308b\u30e9\u30d9\u30eb\u3067\u3059\u3002\u4ee3\u308f\u308a\u306b connectionId \u3092\u4f7f\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002 Return value \u00b6 MediaConnection \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9 Sample \u00b6 // \u81ea\u8eab\u306elocalStream\u3092\u8a2d\u5b9a\u3057\u3066\u3001\u76f8\u624b\u306b\u767a\u4fe1\u3059\u308b\u5834\u5408 const call = peer . call ( 'peerID' , localStream ); // \u81ea\u8eab\u306elocalStream\u304a\u3088\u3073metadata\u3092\u8a2d\u5b9a\u3057\u3066\u3001\u76f8\u624b\u306b\u767a\u4fe1\u3059\u308b\u5834\u5408 const call = peer . call ( 'peerID' , localStream , { metadata : { foo : 'bar' , } }); // \u6620\u50cf\u30b3\u30fc\u30c7\u30c3\u30af\u3068\u3057\u3066H264\u3092\u5229\u7528\u3059\u308b\u5834\u5408 const call = peer . call ( 'peerID' , localStream , { videoCodec : 'H264' , }); // \u97f3\u58f0\u306e\u307f\u63a5\u7d9a\u5148\u304b\u3089\u53d7\u4fe1\u3059\u308b\u8a2d\u5b9a\u3067\u3001\u76f8\u624b\u306b\u767a\u4fe1\u3059\u308b\u5834\u5408 const call = peer . call ( 'peerID' , null , { audioReceiveEnabled : true , }); connect(peerId[, options]) \u00b6 \u6307\u5b9a\u3057\u305fPeer\u306b\u30c7\u30fc\u30bf\u30c1\u30e3\u30cd\u30eb\u3067\u63a5\u7d9a\u3057\u3066\u3001 DataConnection \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u307e\u3059\u3002 Parameters \u00b6 Name Type Required Default Description peerId string \u2714 \u63a5\u7d9a\u5148\u306ePeer ID\u3067\u3059\u3002 options connect options object \u63a5\u7d9a\u6642\u306b\u4ed8\u4e0e\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3059\u3002 connect options object \u00b6 Name Type Required Default Description metadata Object \u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u306b\u95a2\u9023\u4ed8\u3051\u3055\u308c\u308b\u4efb\u610f\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\u3067\u3001\u63a5\u7d9a\u5148\u306ePeer\u306b\u6e21\u3055\u308c\u307e\u3059\u3002 serialization string 'binary' \u9001\u4fe1\u6642\u306e\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u65b9\u6cd5\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 'binary' , 'json' , 'none' \u306e\u3044\u305a\u308c\u304b\u3068\u306a\u308a\u307e\u3059\u3002 dcInit RTCDataChannelInit {} DataChannel\u5229\u7528\u6642\u306b\u4fe1\u983c\u6027\u306e\u6709\u7121\u3092\u6307\u5b9a\u3059\u308b\u305f\u3081\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u4fe1\u983c\u6027\u6709\u3067\u52d5\u4f5c\u3057\u307e\u3059\u3002 connectionId string \u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u8b58\u5225\u3059\u308bID\u3067\u3059\u3002 label string Deprecated! \u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u8b58\u5225\u3059\u308b\u306e\u306b\u5229\u7528\u3059\u308b\u30e9\u30d9\u30eb\u3067\u3059\u3002\u4ee3\u308f\u308a\u306b connectionId \u3092\u4f7f\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002 Return value \u00b6 DataConnection \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9 Sample \u00b6 // \u5358\u306bDataChannel\u3092\u63a5\u7d9a\u3059\u308b\u5834\u5408(\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u4fe1\u983c\u6027\u6709\u308a) peer . connect ( 'peerId' ); // metadata\u4ed8\u304d\u3067connect\u3059\u308b\u5834\u5408 peer . connect ( 'peerId' , { metadata : { hoge : \"foobar\" , } }); // \u4fe1\u983c\u6027\u7121\u3057\u30e2\u30fc\u30c9\u3067DataChannel\u3092\u63a5\u7d9a\u3059\u308b\u5834\u5408 peer . connect ( 'peerId' , { dcInit : { // \u6700\u59272\u56de\u3001\u518d\u9001\u3059\u308b maxRetransmits : 2 , }, }); destroy() \u00b6 \u5168\u3066\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u9589\u3058\u3001\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u3078\u306e\u63a5\u7d9a\u3092\u5207\u65ad\u3057\u307e\u3059\u3002 Return value \u00b6 undefined disconnect() \u00b6 \u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u3078\u306e\u63a5\u7d9a\u3092\u9589\u3058\u3001disconnected\u30a4\u30d9\u30f3\u30c8\u3092\u9001\u51fa\u3057\u307e\u3059\u3002 Return value \u00b6 undefined reconnect() \u00b6 \u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u3078\u518d\u63a5\u7d9a\u3092\u3057\u307e\u3059\u3002 Return value \u00b6 undefined joinRoom(roomName[, roomOptions]) \u00b6 \u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u306e\u30eb\u30fc\u30e0\u3001\u307e\u305f\u306fSFU\u63a5\u7d9a\u306e\u30eb\u30fc\u30e0\u306b\u53c2\u52a0\u3057\u307e\u3059\u3002 \u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u304a\u3088\u3073SFU\u63a5\u7d9a\u306b\u3064\u3044\u3066\u306f \u30b3\u30c1\u30e9 \u3092\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002 Parameters \u00b6 Name Type Rquired Default Description roomName string \u2714 \u53c2\u52a0\u5148\u306e\u30eb\u30fc\u30e0\u306e\u540d\u524d\u3067\u3059\u3002 roomOptions room options object {} \u63a5\u7d9a\u6642\u306b\u9078\u629e\u30fb\u4ed8\u4e0e\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3059\u3002 room options object \u00b6 Name Type Required Default Description mode string 'mesh' 'sfu' \u307e\u305f\u306f 'mesh' \u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 stream MediaStream \u53c2\u52a0\u5148\u306e\u30eb\u30fc\u30e0\u3078\u9001\u308b\u30e1\u30c7\u30a3\u30a2\u30b9\u30c8\u30ea\u30fc\u30e0\u3067\u3059\u3002\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001\u53d7\u4fe1\u306e\u307f\u30e2\u30fc\u30c9\u3067\u767a\u4fe1\u3057\u307e\u3059\u3002 videoBandwidth number \u6620\u50cf\u306e\u6700\u5927\u5e2f\u57df\u5e45(kbps)\u3067\u3059\u3002\u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u306e\u307f\u4f7f\u7528\u53ef\u80fd\u3067\u3059\u3002 audioBandwidth number \u97f3\u58f0\u306e\u6700\u5927\u5e2f\u57df\u5e45(kbps)\u3067\u3059\u3002 \u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u306e\u307f\u4f7f\u7528\u53ef\u80fd\u3067\u3059\u3002 videoCodec string 'H264' \u306a\u3069\u306e\u6620\u50cf\u30b3\u30fc\u30c7\u30c3\u30af\u3067\u3059\u3002 \u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u306e\u307f\u4f7f\u7528\u53ef\u80fd\u3067\u3059\u3002 audioCodec string 'PCMU' \u306a\u3069\u306e\u97f3\u58f0\u30b3\u30fc\u30c7\u30c3\u30af\u3067\u3059\u3002\u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u306e\u307f\u4f7f\u7528\u53ef\u80fd\u3067\u3059\u3002 videoReceiveEnabled boolean \u6620\u50cf\u3092\u53d7\u4fe1\u306e\u307f\u3067\u4f7f\u3046\u5834\u5408\u306e\u30d5\u30e9\u30b0\u3067\u3059\u3002\u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u306e\u307f\u4f7f\u7528\u53ef\u80fd\u3067\u3059\u3002 audioReceiveEnabled boolean \u97f3\u58f0\u3092\u53d7\u4fe1\u306e\u307f\u3067\u4f7f\u3046\u5834\u5408\u306e\u30d5\u30e9\u30b0\u3067\u3059\u3002\u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u306e\u307f\u4f7f\u7528\u53ef\u80fd\u3067\u3059\u3002 Return value \u00b6 SFURoom \u307e\u305f\u306f MeshRoom \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9 Sample \u00b6 // Mesh\u63a5\u7d9a\u3092\u5229\u7528\u3059\u308b\u5834\u5408 const room = peer . joinRoom ( 'roomName' , { mode : 'mesh' , stream : localStream , }); // SFU\u63a5\u7d9a\u3092\u5229\u7528\u3059\u308b\u5834\u5408 const room = peer . joinRoom ( 'roomName' , { mode : 'sfu' , stream : localStream , }); listAllPeers(callback) \u00b6 REST API\u3092\u5229\u7528\u3057\u3066\u3001API\u30ad\u30fc\u306b\u7d10\u3065\u304fPeer ID\u4e00\u89a7\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002 Parameters \u00b6 Name Type Required Default Description callback Function \u2714 Peer ID\u4e00\u89a7\u3092\u53d7\u3051\u53d6\u308b\u95a2\u6570\u3067\u3059\u3002 Return value \u00b6 undefined Sample \u00b6 peer . listAllPeers ( peers => { console . log ( peers ) // => [\"yNtQkNyjAojJNGrt\", \"EzAmgFhCKBQMzKw9\"] }); getConnection(peerId, connectionId) \u00b6 \u4f5c\u6210\u3057\u305fMediaConnection\u304a\u3088\u3073DataConnection\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002 Parameters \u00b6 Name Type Required Default Description peerId string \u2714 Peer ID\u3067\u3059\u3002 connectionId string \u2714 \u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u306eID\u3067\u3059\u3002 Return value \u00b6 MediaConnection \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3001\u307e\u305f\u306f DataConnection \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3001\u307e\u305f\u306f null updateCredential(credential) \u00b6 Peer\u8a8d\u8a3c\u306e\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u306eTTL\u3092\u5ef6\u9577\u3059\u308b\u305f\u3081\u306e\u66f4\u65b0\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u9001\u4ed8\u3057\u307e\u3059\u3002 Peer\u8a8d\u8a3c\u306b\u3064\u3044\u3066\u306f\u3001 \u30b3\u30c1\u30e9 \u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002 Parameters \u00b6 Name Type Required Default Description credential credential object \u2714 \u30e6\u30fc\u30b6\u30fc\u5074\u3067\u4f5c\u6210\u3059\u308b\u65b0\u3057\u3044\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u3067\u3059\u3002 Return value \u00b6 undefined Events \u00b6 \u305d\u308c\u305e\u308c\u306e\u30a4\u30d9\u30f3\u30c8\u540d\u306f\u3001 Peer \u30af\u30e9\u30b9\u306e EVENTS \u30d7\u30ed\u30d1\u30c6\u30a3\u304b\u3089\u3082\u53c2\u7167\u3067\u304d\u307e\u3059\u3002 // \u3053\u308c\u3089\u306f\u540c\u3058\u610f\u5473 peer . on ( 'open' , () => {}); peer . on ( Peer . EVENTS . open , () => {}); Event: 'open' \u00b6 \u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u3078\u6b63\u5e38\u306b\u63a5\u7d9a\u3067\u304d\u305f\u3068\u304d\u306e\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002 Name Type Description id string Peer ID peer . on ( 'open' , id => { // ... }); Event: 'call' \u00b6 \u63a5\u7d9a\u5148\u306ePeer\u304b\u3089\u30e1\u30c7\u30a3\u30a2\u30c1\u30e3\u30cd\u30eb(\u97f3\u58f0\u30fb\u6620\u50cf)\u306e\u63a5\u7d9a\u3092\u53d7\u4fe1\u3057\u305f\u3068\u304d\u306e\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002 Name Type Description call MediaConnection MediaConnection \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\u3002 peer . on ( 'call' , call => { // ... }); Event: 'close' \u00b6 Peer\u306b\u5bfe\u3059\u308b\u5168\u3066\u306e\u63a5\u7d9a\u3092\u7d42\u4e86\u3057\u305f\u3068\u304d\u306e\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002 peer . on ( 'close' , () => { // ... }); Event: 'connection' \u00b6 \u63a5\u7d9a\u5148\u306ePeer\u304b\u3089DataChannel\u306e\u63a5\u7d9a\u3092\u53d7\u4fe1\u3057\u305f\u3068\u304d\u306e\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002 Name Type Description conn DataConnection DataConnection \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\u3002 peer . on ( 'connection' , conn => { // ... }); Event: 'disconnected' \u00b6 \u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u304b\u3089\u5207\u65ad\u3057\u305f\u3068\u304d\u306e\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002 Name Type Description id string Peer ID peer . on ( 'disconnected' , id => { // ... }); Event: 'expiresin' \u00b6 \u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u304c\u5931\u52b9\u3059\u308b\u524d\u306b\u767a\u751f\u3059\u308b\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002 Name Type Description sec number \u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u304c\u5931\u52b9\u3059\u308b\u307e\u3067\u306e\u6642\u9593(\u79d2)\u3067\u3059\u3002 peer . on ( 'expiresin' , sec => { // ... }); Event: 'error' \u00b6 \u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306e\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002 Name Type Description error Error \u30a8\u30e9\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002 type \u30d7\u30ed\u30d1\u30c6\u30a3\u304b\u3089\u4ee5\u4e0b\u3092\u5224\u5225\u3067\u304d\u307e\u3059\u3002 Type Description room-error \u30eb\u30fc\u30e0\u540d\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u307e\u305b\u3093 \u30eb\u30fc\u30e0\u30bf\u30a4\u30d7\u304c\u7570\u306a\u308a\u307e\u3059\u3002(\u30e1\u30c3\u30b7\u30e5\u30eb\u30fc\u30e0\u3068\u3057\u3066\u4f5c\u6210\u3057\u305f\u90e8\u5c4b\u306b\u3001SFU\u30eb\u30fc\u30e0\u6307\u5b9a\u3067\u53c2\u52a0\u3057\u305f\u5834\u5408) SFU\u6a5f\u80fd\u304c\u8a72\u5f53\u306eAPI\u30ad\u30fc\u3067Disabled\u3067\u3059\u3002\u5229\u7528\u3059\u308b\u306b\u306f\u3001Dashboard\u304b\u3089enable\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u4e0d\u660e\u306a\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f\u3002\u5c11\u3057\u5f85\u3063\u3066\u3001\u30ea\u30c8\u30e9\u30a4\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u30eb\u30fc\u30e0\u30ed\u30b0\u53d6\u5f97\u6642\u306b\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f\u3002\u5c11\u3057\u5f85\u3063\u3066\u3001\u30ea\u30c8\u30e9\u30a4\u3057\u3066\u304f\u3060\u3055\u3044\u3002 authentication \u6307\u5b9a\u3055\u308c\u305f\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u3092\u7528\u3044\u305f\u8a8d\u8a3c\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002 permission \u8a72\u5f53\u306e\u30eb\u30fc\u30e0\u306e\u5229\u7528\u304c\u8a31\u53ef\u3055\u308c\u3066\u307e\u305b\u3093\u3002 list-error API\u30ad\u30fc\u306eREST API\u304c\u8a31\u53ef\u3055\u308c\u3066\u307e\u305b\u3093\u3002 disconnected SkyWay\u306e\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 socket-error SkyWay\u306e\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u3068\u306e\u63a5\u7d9a\u304c\u5931\u308f\u308c\u307e\u3057\u305f\u3002 invalid-key API\u30ad\u30fc\u304c\u7121\u52b9\u3067\u3059\u3002 server-error SkyWay\u306e\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u304b\u3089Peer\u4e00\u89a7\u3092\u53d6\u5f97\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002 // \u4eee\u306bRoom\u540d\u3092\u6307\u5b9a\u305b\u305a\u306bjoinRoom\u3092\u547c\u3093\u3060\u5834\u5408 peer . on ( 'error' , error => { console . log ( ` ${ error . type } : ${ error . message } ` ); // => room-error: Room name must be defined. });","title":"Peer"},{"location":"ja/peer/#constructorid-options","text":"","title":"Constructor(id, options)"},{"location":"ja/peer/#constructoroptions","text":"\u65b0\u898f\u306bPeer\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u307e\u3059\u3002 new Peer() \u306b\u3088\u308a\u3001SkyWay\u306e\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u3068\u63a5\u7d9a\u3057\u307e\u3059\u3002","title":"Constructor(options)"},{"location":"ja/peer/#sample","text":"// \u30c7\u30d0\u30c3\u30b0\u60c5\u5831\u3092\u6700\u5927(3)\u306b\u3057\u3066\u63a5\u7d9a\u3059\u308b\u5834\u5408 const peer = new Peer ( 'some-peer-name' , { key : \"<YOUR-API-KEY>\" debug : 3 , }); // TURN\u30b5\u30fc\u30d0\u3092\u5f37\u5236\u5229\u7528\u3059\u308b\u5834\u5408 const peer = new Peer ({ key : \"<YOUR-API-KEY>\" config : { iceTransportPolicy : 'relay' , }, });","title":"Sample"},{"location":"ja/peer/#parameter","text":"Name Type Required Default Description id string \u30e6\u30fc\u30b6\u306ePeer ID\u3067\u3059\u3002\u5024\u3092\u4e0e\u3048\u306a\u304b\u3063\u305f\u5834\u5408\u3001Peer ID\u306f\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u304b\u3089\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002 options options object \u2714 \u63a5\u7d9a\u306b\u95a2\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6307\u5b9a\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3059\u3002","title":"Parameter"},{"location":"ja/peer/#options-object","text":"Name Type Required Default Description key string \u2714 SkyWay\u306eAPI\u30ad\u30fc\u3067\u3059\u3002 debug number 0 \u30ed\u30b0\u30ec\u30d9\u30eb\u306f NONE: 0 , ERROR: 1 , WARN: 2 , FULL: 3 \u304b\u3089\u9078\u629e\u3067\u304d\u307e\u3059\u3002 turn boolean true SkyWay\u3067\u63d0\u4f9b\u3059\u308bTURN\u3092\u4f7f\u3046\u304b\u3069\u3046\u304b\u306e\u30d5\u30e9\u30b0\u3067\u3059\u3002TURN\u5229\u7528\u304c\u6709\u52b9\u306e\u5834\u5408\u306e\u307f\u4f7f\u3048\u307e\u3059\u3002 credential credential object Peer\u3092\u8a8d\u8a3c\u3059\u308b\u305f\u3081\u306e\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u3067\u3059\u3002\u8a8d\u8a3c\u6a5f\u80fd\u304c\u6709\u52b9\u306e\u5834\u5408\u306e\u307f\u4f7f\u3048\u307e\u3059\u3002 config RTCConfiguration Default RTCConfiguration object RTCPeerConnection \u306b\u6e21\u3055\u308c\u308bRTCConfiguration\u3067\u3059\u3002\u767a\u5c55\u7684\u306a\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u305f\u3081\u3001\u5185\u5bb9\u3092\u7406\u89e3\u3057\u3066\u3044\u308b\u5834\u5408\u306e\u307f\u3054\u5229\u7528\u304f\u3060\u3055\u3044\u3002","title":"options object"},{"location":"ja/peer/#credential-object","text":"Peer\u8a8d\u8a3c\u6a5f\u80fd\u306e\u8a73\u7d30\u306f Peer\u8a8d\u8a3c\u306e\u30b5\u30f3\u30d7\u30eb \u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002 Name Type Required Default Description timestamp number \u73fe\u5728\u306eUNIX\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u3067\u3059\u3002 ttl number Time to live(ttl)\u3002\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7 + ttl \u306e\u6642\u9593\u3067\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u304c\u5931\u52b9\u3057\u307e\u3059\u3002 authToken string HMAC\u3092\u5229\u7528\u3057\u3066\u751f\u6210\u3059\u308b\u8a8d\u8a3c\u7528\u30c8\u30fc\u30af\u30f3\u3067\u3059\u3002","title":"credential object"},{"location":"ja/peer/#default-rtcconfiguration-object","text":"const defaultConfig = { iceServers : [{ urls : 'stun:stun.webrtc.ecl.ntt.com:3478' , url : 'stun:stun.webrtc.ecl.ntt.com:3478' , }], iceTransportPolicy : 'all' , sdpSemantics : 'unified-plan' , };","title":"Default RTCConfiguration object"},{"location":"ja/peer/#members","text":"Name Type Description id string \u30e6\u30fc\u30b6\u30fc\u304c\u6307\u5b9a\u3057\u305fPeer ID\u3001\u3082\u3057\u304f\u306f\u30b5\u30fc\u30d0\u304c\u751f\u6210\u3057\u305fPeer ID\u3067\u3059\u3002 open boolean \u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u3078\u306e\u63a5\u7d9a\u72b6\u6cc1\u3092\u4fdd\u6301\u3057\u307e\u3059\u3002 connections Object \u5168\u3066\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u4fdd\u6301\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002 rooms Object \u5168\u3066\u306e\u30eb\u30fc\u30e0\u3092\u4fdd\u6301\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002 options Object Constructor() \u3067\u306e\u6307\u5b9a\u3068\u3001SDK\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u8a2d\u5b9a\u3092\u53cd\u6620\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002","title":"Members"},{"location":"ja/peer/#methods","text":"","title":"Methods"},{"location":"ja/peer/#callpeerid-stream-options","text":"\u6307\u5b9a\u3057\u305fPeer\u306b\u30e1\u30c7\u30a3\u30a2\u30c1\u30e3\u30cd\u30eb(\u97f3\u58f0\u30fb\u6620\u50cf)\u3067\u63a5\u7d9a\u3057\u3066\u3001 MediaConnection \u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u5e2f\u57df\u5e45\u30fb\u30b3\u30fc\u30c7\u30c3\u30af\u306a\u3069\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002","title":"call(peerId[, stream][, options])"},{"location":"ja/peer/#parameters","text":"Name Type Required Default Description peerId string \u2714 \u63a5\u7d9a\u5148\u306ePeer ID\u3067\u3059\u3002 stream MediaStream \u63a5\u7d9a\u5148\u306ePeer\u3078\u9001\u308b\u30e1\u30c7\u30a3\u30a2\u30b9\u30c8\u30ea\u30fc\u30e0\u3067\u3059\u3002 \u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001\u53d7\u4fe1\u306e\u307f\u30e2\u30fc\u30c9\u3067\u767a\u4fe1\u3057\u307e\u3059\u3002 options call options object \u767a\u4fe1\u6642\u306b\u4ed8\u4e0e\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3059\u3002\u5e2f\u57df\u5e45\u30fb\u30b3\u30fc\u30c7\u30c3\u30af\u306a\u3069\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002","title":"Parameters"},{"location":"ja/peer/#call-options-object","text":"Name Type Required Default Description metadata Object \u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u306b\u95a2\u9023\u4ed8\u3051\u3055\u308c\u308b\u4efb\u610f\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\u3067\u3001\u63a5\u7d9a\u5148\u306ePeer\u306b\u6e21\u3055\u308c\u307e\u3059\u3002 videoBandwidth number \u63a5\u7d9a\u5148\u304b\u3089\u53d7\u4fe1\u3059\u308b\u6620\u50cf\u306e\u6700\u5927\u5e2f\u57df\u5e45(kbps)\u3067\u3059\u3002 audioBandwidth number \u63a5\u7d9a\u5148\u304b\u3089\u53d7\u4fe1\u3059\u308b\u97f3\u58f0\u306e\u6700\u5927\u5e2f\u57df\u5e45(kbps)\u3067\u3059\u3002 videoCodec string 'H264' \u306a\u3069\u306e\u6620\u50cf\u30b3\u30fc\u30c7\u30c3\u30af\u3067\u3059\u3002 audioCodec string 'PCMU' \u306a\u3069\u306e\u97f3\u58f0\u30b3\u30fc\u30c7\u30c3\u30af\u3067\u3059\u3002 videoReceiveEnabled boolean \u6620\u50cf\u3092\u53d7\u4fe1\u306e\u307f\u3067\u4f7f\u3046\u5834\u5408\u306e\u30d5\u30e9\u30b0\u3067\u3059\u3002\u3053\u306e\u5024\u304c true \u304b\u3064 stream \u306b\u6620\u50cf\u30c8\u30e9\u30c3\u30af\u304c\u542b\u307e\u308c\u306a\u3044\u5834\u5408\u3001\u53d7\u4fe1\u306e\u307f\u3067\u6620\u50cf\u306e\u901a\u4fe1\u3092\u884c\u3044\u307e\u3059\u3002 audioReceiveEnabled boolean \u97f3\u58f0\u3092\u53d7\u4fe1\u306e\u307f\u3067\u4f7f\u3046\u5834\u5408\u306e\u30d5\u30e9\u30b0\u3067\u3059\u3002\u3053\u306e\u5024\u304c true \u304b\u3064 stream \u306b\u97f3\u58f0\u30c8\u30e9\u30c3\u30af\u304c\u542b\u307e\u308c\u306a\u3044\u5834\u5408\u3001\u53d7\u4fe1\u306e\u307f\u3067\u97f3\u58f0\u306e\u901a\u4fe1\u3092\u884c\u3044\u307e\u3059\u3002 connectionId string \u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u8b58\u5225\u3059\u308bID\u3067\u3059\u3002 label string Deprecated! \u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u8b58\u5225\u3059\u308b\u306e\u306b\u5229\u7528\u3059\u308b\u30e9\u30d9\u30eb\u3067\u3059\u3002\u4ee3\u308f\u308a\u306b connectionId \u3092\u4f7f\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"call options object"},{"location":"ja/peer/#return-value","text":"MediaConnection \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9","title":"Return value"},{"location":"ja/peer/#sample_1","text":"// \u81ea\u8eab\u306elocalStream\u3092\u8a2d\u5b9a\u3057\u3066\u3001\u76f8\u624b\u306b\u767a\u4fe1\u3059\u308b\u5834\u5408 const call = peer . call ( 'peerID' , localStream ); // \u81ea\u8eab\u306elocalStream\u304a\u3088\u3073metadata\u3092\u8a2d\u5b9a\u3057\u3066\u3001\u76f8\u624b\u306b\u767a\u4fe1\u3059\u308b\u5834\u5408 const call = peer . call ( 'peerID' , localStream , { metadata : { foo : 'bar' , } }); // \u6620\u50cf\u30b3\u30fc\u30c7\u30c3\u30af\u3068\u3057\u3066H264\u3092\u5229\u7528\u3059\u308b\u5834\u5408 const call = peer . call ( 'peerID' , localStream , { videoCodec : 'H264' , }); // \u97f3\u58f0\u306e\u307f\u63a5\u7d9a\u5148\u304b\u3089\u53d7\u4fe1\u3059\u308b\u8a2d\u5b9a\u3067\u3001\u76f8\u624b\u306b\u767a\u4fe1\u3059\u308b\u5834\u5408 const call = peer . call ( 'peerID' , null , { audioReceiveEnabled : true , });","title":"Sample"},{"location":"ja/peer/#connectpeerid-options","text":"\u6307\u5b9a\u3057\u305fPeer\u306b\u30c7\u30fc\u30bf\u30c1\u30e3\u30cd\u30eb\u3067\u63a5\u7d9a\u3057\u3066\u3001 DataConnection \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u307e\u3059\u3002","title":"connect(peerId[, options])"},{"location":"ja/peer/#parameters_1","text":"Name Type Required Default Description peerId string \u2714 \u63a5\u7d9a\u5148\u306ePeer ID\u3067\u3059\u3002 options connect options object \u63a5\u7d9a\u6642\u306b\u4ed8\u4e0e\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3059\u3002","title":"Parameters"},{"location":"ja/peer/#connect-options-object","text":"Name Type Required Default Description metadata Object \u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u306b\u95a2\u9023\u4ed8\u3051\u3055\u308c\u308b\u4efb\u610f\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\u3067\u3001\u63a5\u7d9a\u5148\u306ePeer\u306b\u6e21\u3055\u308c\u307e\u3059\u3002 serialization string 'binary' \u9001\u4fe1\u6642\u306e\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u65b9\u6cd5\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 'binary' , 'json' , 'none' \u306e\u3044\u305a\u308c\u304b\u3068\u306a\u308a\u307e\u3059\u3002 dcInit RTCDataChannelInit {} DataChannel\u5229\u7528\u6642\u306b\u4fe1\u983c\u6027\u306e\u6709\u7121\u3092\u6307\u5b9a\u3059\u308b\u305f\u3081\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u4fe1\u983c\u6027\u6709\u3067\u52d5\u4f5c\u3057\u307e\u3059\u3002 connectionId string \u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u8b58\u5225\u3059\u308bID\u3067\u3059\u3002 label string Deprecated! \u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u8b58\u5225\u3059\u308b\u306e\u306b\u5229\u7528\u3059\u308b\u30e9\u30d9\u30eb\u3067\u3059\u3002\u4ee3\u308f\u308a\u306b connectionId \u3092\u4f7f\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"connect options object"},{"location":"ja/peer/#return-value_1","text":"DataConnection \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9","title":"Return value"},{"location":"ja/peer/#sample_2","text":"// \u5358\u306bDataChannel\u3092\u63a5\u7d9a\u3059\u308b\u5834\u5408(\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u4fe1\u983c\u6027\u6709\u308a) peer . connect ( 'peerId' ); // metadata\u4ed8\u304d\u3067connect\u3059\u308b\u5834\u5408 peer . connect ( 'peerId' , { metadata : { hoge : \"foobar\" , } }); // \u4fe1\u983c\u6027\u7121\u3057\u30e2\u30fc\u30c9\u3067DataChannel\u3092\u63a5\u7d9a\u3059\u308b\u5834\u5408 peer . connect ( 'peerId' , { dcInit : { // \u6700\u59272\u56de\u3001\u518d\u9001\u3059\u308b maxRetransmits : 2 , }, });","title":"Sample"},{"location":"ja/peer/#destroy","text":"\u5168\u3066\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u9589\u3058\u3001\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u3078\u306e\u63a5\u7d9a\u3092\u5207\u65ad\u3057\u307e\u3059\u3002","title":"destroy()"},{"location":"ja/peer/#return-value_2","text":"undefined","title":"Return value"},{"location":"ja/peer/#disconnect","text":"\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u3078\u306e\u63a5\u7d9a\u3092\u9589\u3058\u3001disconnected\u30a4\u30d9\u30f3\u30c8\u3092\u9001\u51fa\u3057\u307e\u3059\u3002","title":"disconnect()"},{"location":"ja/peer/#return-value_3","text":"undefined","title":"Return value"},{"location":"ja/peer/#reconnect","text":"\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u3078\u518d\u63a5\u7d9a\u3092\u3057\u307e\u3059\u3002","title":"reconnect()"},{"location":"ja/peer/#return-value_4","text":"undefined","title":"Return value"},{"location":"ja/peer/#joinroomroomname-roomoptions","text":"\u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u306e\u30eb\u30fc\u30e0\u3001\u307e\u305f\u306fSFU\u63a5\u7d9a\u306e\u30eb\u30fc\u30e0\u306b\u53c2\u52a0\u3057\u307e\u3059\u3002 \u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u304a\u3088\u3073SFU\u63a5\u7d9a\u306b\u3064\u3044\u3066\u306f \u30b3\u30c1\u30e9 \u3092\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002","title":"joinRoom(roomName[, roomOptions])"},{"location":"ja/peer/#parameters_2","text":"Name Type Rquired Default Description roomName string \u2714 \u53c2\u52a0\u5148\u306e\u30eb\u30fc\u30e0\u306e\u540d\u524d\u3067\u3059\u3002 roomOptions room options object {} \u63a5\u7d9a\u6642\u306b\u9078\u629e\u30fb\u4ed8\u4e0e\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3059\u3002","title":"Parameters"},{"location":"ja/peer/#room-options-object","text":"Name Type Required Default Description mode string 'mesh' 'sfu' \u307e\u305f\u306f 'mesh' \u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 stream MediaStream \u53c2\u52a0\u5148\u306e\u30eb\u30fc\u30e0\u3078\u9001\u308b\u30e1\u30c7\u30a3\u30a2\u30b9\u30c8\u30ea\u30fc\u30e0\u3067\u3059\u3002\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001\u53d7\u4fe1\u306e\u307f\u30e2\u30fc\u30c9\u3067\u767a\u4fe1\u3057\u307e\u3059\u3002 videoBandwidth number \u6620\u50cf\u306e\u6700\u5927\u5e2f\u57df\u5e45(kbps)\u3067\u3059\u3002\u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u306e\u307f\u4f7f\u7528\u53ef\u80fd\u3067\u3059\u3002 audioBandwidth number \u97f3\u58f0\u306e\u6700\u5927\u5e2f\u57df\u5e45(kbps)\u3067\u3059\u3002 \u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u306e\u307f\u4f7f\u7528\u53ef\u80fd\u3067\u3059\u3002 videoCodec string 'H264' \u306a\u3069\u306e\u6620\u50cf\u30b3\u30fc\u30c7\u30c3\u30af\u3067\u3059\u3002 \u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u306e\u307f\u4f7f\u7528\u53ef\u80fd\u3067\u3059\u3002 audioCodec string 'PCMU' \u306a\u3069\u306e\u97f3\u58f0\u30b3\u30fc\u30c7\u30c3\u30af\u3067\u3059\u3002\u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u306e\u307f\u4f7f\u7528\u53ef\u80fd\u3067\u3059\u3002 videoReceiveEnabled boolean \u6620\u50cf\u3092\u53d7\u4fe1\u306e\u307f\u3067\u4f7f\u3046\u5834\u5408\u306e\u30d5\u30e9\u30b0\u3067\u3059\u3002\u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u306e\u307f\u4f7f\u7528\u53ef\u80fd\u3067\u3059\u3002 audioReceiveEnabled boolean \u97f3\u58f0\u3092\u53d7\u4fe1\u306e\u307f\u3067\u4f7f\u3046\u5834\u5408\u306e\u30d5\u30e9\u30b0\u3067\u3059\u3002\u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u306e\u307f\u4f7f\u7528\u53ef\u80fd\u3067\u3059\u3002","title":"room options object"},{"location":"ja/peer/#return-value_5","text":"SFURoom \u307e\u305f\u306f MeshRoom \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9","title":"Return value"},{"location":"ja/peer/#sample_3","text":"// Mesh\u63a5\u7d9a\u3092\u5229\u7528\u3059\u308b\u5834\u5408 const room = peer . joinRoom ( 'roomName' , { mode : 'mesh' , stream : localStream , }); // SFU\u63a5\u7d9a\u3092\u5229\u7528\u3059\u308b\u5834\u5408 const room = peer . joinRoom ( 'roomName' , { mode : 'sfu' , stream : localStream , });","title":"Sample"},{"location":"ja/peer/#listallpeerscallback","text":"REST API\u3092\u5229\u7528\u3057\u3066\u3001API\u30ad\u30fc\u306b\u7d10\u3065\u304fPeer ID\u4e00\u89a7\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002","title":"listAllPeers(callback)"},{"location":"ja/peer/#parameters_3","text":"Name Type Required Default Description callback Function \u2714 Peer ID\u4e00\u89a7\u3092\u53d7\u3051\u53d6\u308b\u95a2\u6570\u3067\u3059\u3002","title":"Parameters"},{"location":"ja/peer/#return-value_6","text":"undefined","title":"Return value"},{"location":"ja/peer/#sample_4","text":"peer . listAllPeers ( peers => { console . log ( peers ) // => [\"yNtQkNyjAojJNGrt\", \"EzAmgFhCKBQMzKw9\"] });","title":"Sample"},{"location":"ja/peer/#getconnectionpeerid-connectionid","text":"\u4f5c\u6210\u3057\u305fMediaConnection\u304a\u3088\u3073DataConnection\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002","title":"getConnection(peerId, connectionId)"},{"location":"ja/peer/#parameters_4","text":"Name Type Required Default Description peerId string \u2714 Peer ID\u3067\u3059\u3002 connectionId string \u2714 \u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u306eID\u3067\u3059\u3002","title":"Parameters"},{"location":"ja/peer/#return-value_7","text":"MediaConnection \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3001\u307e\u305f\u306f DataConnection \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3001\u307e\u305f\u306f null","title":"Return value"},{"location":"ja/peer/#updatecredentialcredential","text":"Peer\u8a8d\u8a3c\u306e\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u306eTTL\u3092\u5ef6\u9577\u3059\u308b\u305f\u3081\u306e\u66f4\u65b0\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u9001\u4ed8\u3057\u307e\u3059\u3002 Peer\u8a8d\u8a3c\u306b\u3064\u3044\u3066\u306f\u3001 \u30b3\u30c1\u30e9 \u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002","title":"updateCredential(credential)"},{"location":"ja/peer/#parameters_5","text":"Name Type Required Default Description credential credential object \u2714 \u30e6\u30fc\u30b6\u30fc\u5074\u3067\u4f5c\u6210\u3059\u308b\u65b0\u3057\u3044\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u3067\u3059\u3002","title":"Parameters"},{"location":"ja/peer/#return-value_8","text":"undefined","title":"Return value"},{"location":"ja/peer/#events","text":"\u305d\u308c\u305e\u308c\u306e\u30a4\u30d9\u30f3\u30c8\u540d\u306f\u3001 Peer \u30af\u30e9\u30b9\u306e EVENTS \u30d7\u30ed\u30d1\u30c6\u30a3\u304b\u3089\u3082\u53c2\u7167\u3067\u304d\u307e\u3059\u3002 // \u3053\u308c\u3089\u306f\u540c\u3058\u610f\u5473 peer . on ( 'open' , () => {}); peer . on ( Peer . EVENTS . open , () => {});","title":"Events"},{"location":"ja/peer/#event-open","text":"\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u3078\u6b63\u5e38\u306b\u63a5\u7d9a\u3067\u304d\u305f\u3068\u304d\u306e\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002 Name Type Description id string Peer ID peer . on ( 'open' , id => { // ... });","title":"Event: 'open'"},{"location":"ja/peer/#event-call","text":"\u63a5\u7d9a\u5148\u306ePeer\u304b\u3089\u30e1\u30c7\u30a3\u30a2\u30c1\u30e3\u30cd\u30eb(\u97f3\u58f0\u30fb\u6620\u50cf)\u306e\u63a5\u7d9a\u3092\u53d7\u4fe1\u3057\u305f\u3068\u304d\u306e\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002 Name Type Description call MediaConnection MediaConnection \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\u3002 peer . on ( 'call' , call => { // ... });","title":"Event: 'call'"},{"location":"ja/peer/#event-close","text":"Peer\u306b\u5bfe\u3059\u308b\u5168\u3066\u306e\u63a5\u7d9a\u3092\u7d42\u4e86\u3057\u305f\u3068\u304d\u306e\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002 peer . on ( 'close' , () => { // ... });","title":"Event: 'close'"},{"location":"ja/peer/#event-connection","text":"\u63a5\u7d9a\u5148\u306ePeer\u304b\u3089DataChannel\u306e\u63a5\u7d9a\u3092\u53d7\u4fe1\u3057\u305f\u3068\u304d\u306e\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002 Name Type Description conn DataConnection DataConnection \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\u3002 peer . on ( 'connection' , conn => { // ... });","title":"Event: 'connection'"},{"location":"ja/peer/#event-disconnected","text":"\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u304b\u3089\u5207\u65ad\u3057\u305f\u3068\u304d\u306e\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002 Name Type Description id string Peer ID peer . on ( 'disconnected' , id => { // ... });","title":"Event: 'disconnected'"},{"location":"ja/peer/#event-expiresin","text":"\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u304c\u5931\u52b9\u3059\u308b\u524d\u306b\u767a\u751f\u3059\u308b\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002 Name Type Description sec number \u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u304c\u5931\u52b9\u3059\u308b\u307e\u3067\u306e\u6642\u9593(\u79d2)\u3067\u3059\u3002 peer . on ( 'expiresin' , sec => { // ... });","title":"Event: 'expiresin'"},{"location":"ja/peer/#event-error","text":"\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306e\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002 Name Type Description error Error \u30a8\u30e9\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002 type \u30d7\u30ed\u30d1\u30c6\u30a3\u304b\u3089\u4ee5\u4e0b\u3092\u5224\u5225\u3067\u304d\u307e\u3059\u3002 Type Description room-error \u30eb\u30fc\u30e0\u540d\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u307e\u305b\u3093 \u30eb\u30fc\u30e0\u30bf\u30a4\u30d7\u304c\u7570\u306a\u308a\u307e\u3059\u3002(\u30e1\u30c3\u30b7\u30e5\u30eb\u30fc\u30e0\u3068\u3057\u3066\u4f5c\u6210\u3057\u305f\u90e8\u5c4b\u306b\u3001SFU\u30eb\u30fc\u30e0\u6307\u5b9a\u3067\u53c2\u52a0\u3057\u305f\u5834\u5408) SFU\u6a5f\u80fd\u304c\u8a72\u5f53\u306eAPI\u30ad\u30fc\u3067Disabled\u3067\u3059\u3002\u5229\u7528\u3059\u308b\u306b\u306f\u3001Dashboard\u304b\u3089enable\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u4e0d\u660e\u306a\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f\u3002\u5c11\u3057\u5f85\u3063\u3066\u3001\u30ea\u30c8\u30e9\u30a4\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u30eb\u30fc\u30e0\u30ed\u30b0\u53d6\u5f97\u6642\u306b\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f\u3002\u5c11\u3057\u5f85\u3063\u3066\u3001\u30ea\u30c8\u30e9\u30a4\u3057\u3066\u304f\u3060\u3055\u3044\u3002 authentication \u6307\u5b9a\u3055\u308c\u305f\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u3092\u7528\u3044\u305f\u8a8d\u8a3c\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002 permission \u8a72\u5f53\u306e\u30eb\u30fc\u30e0\u306e\u5229\u7528\u304c\u8a31\u53ef\u3055\u308c\u3066\u307e\u305b\u3093\u3002 list-error API\u30ad\u30fc\u306eREST API\u304c\u8a31\u53ef\u3055\u308c\u3066\u307e\u305b\u3093\u3002 disconnected SkyWay\u306e\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 socket-error SkyWay\u306e\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u3068\u306e\u63a5\u7d9a\u304c\u5931\u308f\u308c\u307e\u3057\u305f\u3002 invalid-key API\u30ad\u30fc\u304c\u7121\u52b9\u3067\u3059\u3002 server-error SkyWay\u306e\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u304b\u3089Peer\u4e00\u89a7\u3092\u53d6\u5f97\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002 // \u4eee\u306bRoom\u540d\u3092\u6307\u5b9a\u305b\u305a\u306bjoinRoom\u3092\u547c\u3093\u3060\u5834\u5408 peer . on ( 'error' , error => { console . log ( ` ${ error . type } : ${ error . message } ` ); // => room-error: Room name must be defined. });","title":"Event: 'error'"},{"location":"ja/sfuroom/","text":"SFU\u63a5\u7d9a\u3067\u306e\u30eb\u30fc\u30e0\u3092\u7ba1\u7406\u3059\u308b\u30af\u30e9\u30b9\u3067\u3059\u3002 SDK\u5185\u90e8\u306e\u5229\u7528\u306e\u307f\u3067\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u901a\u5e38\u5229\u7528\u3057\u307e\u305b\u3093\u3002 SFURoom\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u3001 Peer#joinRoom() \u3067\u751f\u6210\u3055\u308c\u307e\u3059\u3002 Sample \u00b6 const sfuRoom = peer . joinRoom ( 'roomName' , { mode : 'sfu' , stream : localStream , }); sfuRoom . on ( 'open' , () => {}); Members \u00b6 Name Type Description name string \u30eb\u30fc\u30e0\u540d\u3067\u3059\u3002 remoteStreams Object MediaStream .id\u3092\u30ad\u30fc\u306b\u3001\u30eb\u30fc\u30e0\u5185\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u4fdd\u6301\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002 members string[] \u30eb\u30fc\u30e0\u5185\u306b\u53c2\u52a0\u3057\u3066\u3044\u308bPeer ID\u306e\u914d\u5217\u3067\u3059\u3002 Methods \u00b6 close() \u00b6 \u30eb\u30fc\u30e0\u3092\u9000\u51fa\u3057\u3001SFU\u3068\u30b5\u30fc\u30d0\u30fc\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u5207\u65ad\u3057\u307e\u3059\u3002 Return value \u00b6 undefined getLog() \u00b6 \u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u306b\u30eb\u30fc\u30e0\u306e\u30ed\u30b0\u53d6\u5f97\u3092\u8981\u6c42\u3057\u307e\u3059\u3002 \u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u304b\u3089\u30ed\u30b0\u3092\u53d7\u4fe1\u3059\u308b\u3068\u3001 log \u30a4\u30d9\u30f3\u30c8 \u304c\u767a\u706b\u3057\u307e\u3059\u3002 Return value \u00b6 undefined Sample \u00b6 room . once ( 'log' , log => { // ... }); room . getLog (); replaceStream(stream) \u00b6 \u9001\u4fe1\u3057\u3066\u3044\u308bMediaStream\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002 \u53d7\u4fe1\u306e\u307f\u30e2\u30fc\u30c9\u3067\u30e1\u30c7\u30a3\u30a2\u30c1\u30e3\u30cd\u30eb\u63a5\u7d9a\u3092\u884c\u306a\u3063\u3066\u3044\u308b\u72b6\u614b\u3067\u3001 \u65b0\u3057\u3044MediaStream\u304c\u30e1\u30c7\u30a3\u30a2\u30c8\u30e9\u30c3\u30af\u3092\u6301\u3064\u5834\u5408\u3001\u81ea\u52d5\u7684\u306b\u9001\u53d7\u4fe1\u30e2\u30fc\u30c9\u306b\u5207\u308a\u66ff\u308f\u308a\u307e\u3059\u3002 Parameters \u00b6 Name Type Required Default Description stream MediaStream \u2714 \u66f4\u65b0\u5bfe\u8c61\u3068\u306a\u308b\u65b0\u3057\u3044MediaStream\u3067\u3059\u3002 Return value \u00b6 undefined send(data) \u00b6 WebSocket\u3092\u4f7f\u7528\u3057\u3066\u30eb\u30fc\u30e0\u5185\u306e\u5168\u3066\u306e\u30e6\u30fc\u30b6\u30fc\u306b\u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3057\u307e\u3059\u3002 Parameters \u00b6 Name Type Required Default Description data * \u2714 \u9001\u4fe1\u3059\u308b\u30c7\u30fc\u30bf\u3067\u3059\u3002 Return value \u00b6 undefined Events \u00b6 Event: 'open' \u00b6 \u65b0\u898f\u306bPeer\u304c\u30eb\u30fc\u30e0\u3078\u5165\u5ba4\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 room . on ( 'open' , () => { // ... }); Event: 'peerJoin' \u00b6 \u30eb\u30fc\u30e0\u306b\u65b0\u3057\u3044Peer\u304c\u53c2\u52a0\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 Name Type Description peerId string \u53c2\u52a0\u3057\u305fPeer\u306eID\u3067\u3059\u3002 room . on ( 'peerJoin' , peerId => { // ... }); Event: 'peerLeave' \u00b6 \u65b0\u898f\u306bPeer\u304c\u30eb\u30fc\u30e0\u3092\u9000\u51fa\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 Name Type Description peerId string \u9000\u51fa\u3057\u305fPeer\u306eID\u3067\u3059\u3002 room . on ( 'peerLeave' , peerId => { // ... }); Event: 'log' \u00b6 \u30eb\u30fc\u30e0\u306e\u30ed\u30b0\u3092\u53d7\u4fe1\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 Name Type Description logs string[] \u30ed\u30b0\uff08JSON\u6587\u5b57\u5217\uff09\u306e\u914d\u5217\u3067\u3059\u3002 room . once ( 'log' , logs => { for ( const logStr of logs ) { const { messageType , message , timestamp } = JSON . parse ( logStr ); // ... } }); Event: 'stream' \u00b6 \u30eb\u30fc\u30e0\u306bJoin\u3057\u3066\u3044\u308b\u4ed6\u306e\u30e6\u30fc\u30b6\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u53d7\u4fe1\u3057\u305f\u6642\u306b\u767a\u751f\u3057\u307e\u3059\u3002 \u30b9\u30c8\u30ea\u30fc\u30e0\u9001\u4fe1\u5143\u306ePeer ID\u306f stream.peerId \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 Name Type Description stream MediaStream MediaStream\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\u3002 room . on ( 'stream' , stream => { // ... }); Event: 'data' \u00b6 \u4ed6\u306e\u30e6\u30fc\u30b6\u30fc\u304b\u3089\u9001\u4fe1\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3092\u53d7\u4fe1\u3057\u305f\u6642\u306b\u767a\u751f\u3057\u307e\u3059\u3002 Name Type Description data object data object \u5f62\u5f0f\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002 data object \u00b6 Name Type Description src string \u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3057\u305fPeer\u306eID\u3067\u3059\u3002 data * \u53d7\u4fe1\u3057\u305f\u30c7\u30fc\u30bf\u3067\u3059\u3002 room . on ( 'data' , ({ src , data }) => { // ... }); Event: 'close' \u00b6 \u30eb\u30fc\u30e0\u3092close\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 room . on ( 'close' , () => { // ... });","title":"SFURoom"},{"location":"ja/sfuroom/#sample","text":"const sfuRoom = peer . joinRoom ( 'roomName' , { mode : 'sfu' , stream : localStream , }); sfuRoom . on ( 'open' , () => {});","title":"Sample"},{"location":"ja/sfuroom/#members","text":"Name Type Description name string \u30eb\u30fc\u30e0\u540d\u3067\u3059\u3002 remoteStreams Object MediaStream .id\u3092\u30ad\u30fc\u306b\u3001\u30eb\u30fc\u30e0\u5185\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u4fdd\u6301\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002 members string[] \u30eb\u30fc\u30e0\u5185\u306b\u53c2\u52a0\u3057\u3066\u3044\u308bPeer ID\u306e\u914d\u5217\u3067\u3059\u3002","title":"Members"},{"location":"ja/sfuroom/#methods","text":"","title":"Methods"},{"location":"ja/sfuroom/#close","text":"\u30eb\u30fc\u30e0\u3092\u9000\u51fa\u3057\u3001SFU\u3068\u30b5\u30fc\u30d0\u30fc\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u5207\u65ad\u3057\u307e\u3059\u3002","title":"close()"},{"location":"ja/sfuroom/#return-value","text":"undefined","title":"Return value"},{"location":"ja/sfuroom/#getlog","text":"\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u306b\u30eb\u30fc\u30e0\u306e\u30ed\u30b0\u53d6\u5f97\u3092\u8981\u6c42\u3057\u307e\u3059\u3002 \u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u304b\u3089\u30ed\u30b0\u3092\u53d7\u4fe1\u3059\u308b\u3068\u3001 log \u30a4\u30d9\u30f3\u30c8 \u304c\u767a\u706b\u3057\u307e\u3059\u3002","title":"getLog()"},{"location":"ja/sfuroom/#return-value_1","text":"undefined","title":"Return value"},{"location":"ja/sfuroom/#sample_1","text":"room . once ( 'log' , log => { // ... }); room . getLog ();","title":"Sample"},{"location":"ja/sfuroom/#replacestreamstream","text":"\u9001\u4fe1\u3057\u3066\u3044\u308bMediaStream\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002 \u53d7\u4fe1\u306e\u307f\u30e2\u30fc\u30c9\u3067\u30e1\u30c7\u30a3\u30a2\u30c1\u30e3\u30cd\u30eb\u63a5\u7d9a\u3092\u884c\u306a\u3063\u3066\u3044\u308b\u72b6\u614b\u3067\u3001 \u65b0\u3057\u3044MediaStream\u304c\u30e1\u30c7\u30a3\u30a2\u30c8\u30e9\u30c3\u30af\u3092\u6301\u3064\u5834\u5408\u3001\u81ea\u52d5\u7684\u306b\u9001\u53d7\u4fe1\u30e2\u30fc\u30c9\u306b\u5207\u308a\u66ff\u308f\u308a\u307e\u3059\u3002","title":"replaceStream(stream)"},{"location":"ja/sfuroom/#parameters","text":"Name Type Required Default Description stream MediaStream \u2714 \u66f4\u65b0\u5bfe\u8c61\u3068\u306a\u308b\u65b0\u3057\u3044MediaStream\u3067\u3059\u3002","title":"Parameters"},{"location":"ja/sfuroom/#return-value_2","text":"undefined","title":"Return value"},{"location":"ja/sfuroom/#senddata","text":"WebSocket\u3092\u4f7f\u7528\u3057\u3066\u30eb\u30fc\u30e0\u5185\u306e\u5168\u3066\u306e\u30e6\u30fc\u30b6\u30fc\u306b\u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3057\u307e\u3059\u3002","title":"send(data)"},{"location":"ja/sfuroom/#parameters_1","text":"Name Type Required Default Description data * \u2714 \u9001\u4fe1\u3059\u308b\u30c7\u30fc\u30bf\u3067\u3059\u3002","title":"Parameters"},{"location":"ja/sfuroom/#return-value_3","text":"undefined","title":"Return value"},{"location":"ja/sfuroom/#events","text":"","title":"Events"},{"location":"ja/sfuroom/#event-open","text":"\u65b0\u898f\u306bPeer\u304c\u30eb\u30fc\u30e0\u3078\u5165\u5ba4\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 room . on ( 'open' , () => { // ... });","title":"Event: 'open'"},{"location":"ja/sfuroom/#event-peerjoin","text":"\u30eb\u30fc\u30e0\u306b\u65b0\u3057\u3044Peer\u304c\u53c2\u52a0\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 Name Type Description peerId string \u53c2\u52a0\u3057\u305fPeer\u306eID\u3067\u3059\u3002 room . on ( 'peerJoin' , peerId => { // ... });","title":"Event: 'peerJoin'"},{"location":"ja/sfuroom/#event-peerleave","text":"\u65b0\u898f\u306bPeer\u304c\u30eb\u30fc\u30e0\u3092\u9000\u51fa\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 Name Type Description peerId string \u9000\u51fa\u3057\u305fPeer\u306eID\u3067\u3059\u3002 room . on ( 'peerLeave' , peerId => { // ... });","title":"Event: 'peerLeave'"},{"location":"ja/sfuroom/#event-log","text":"\u30eb\u30fc\u30e0\u306e\u30ed\u30b0\u3092\u53d7\u4fe1\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 Name Type Description logs string[] \u30ed\u30b0\uff08JSON\u6587\u5b57\u5217\uff09\u306e\u914d\u5217\u3067\u3059\u3002 room . once ( 'log' , logs => { for ( const logStr of logs ) { const { messageType , message , timestamp } = JSON . parse ( logStr ); // ... } });","title":"Event: 'log'"},{"location":"ja/sfuroom/#event-stream","text":"\u30eb\u30fc\u30e0\u306bJoin\u3057\u3066\u3044\u308b\u4ed6\u306e\u30e6\u30fc\u30b6\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u53d7\u4fe1\u3057\u305f\u6642\u306b\u767a\u751f\u3057\u307e\u3059\u3002 \u30b9\u30c8\u30ea\u30fc\u30e0\u9001\u4fe1\u5143\u306ePeer ID\u306f stream.peerId \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 Name Type Description stream MediaStream MediaStream\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\u3002 room . on ( 'stream' , stream => { // ... });","title":"Event: 'stream'"},{"location":"ja/sfuroom/#event-data","text":"\u4ed6\u306e\u30e6\u30fc\u30b6\u30fc\u304b\u3089\u9001\u4fe1\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3092\u53d7\u4fe1\u3057\u305f\u6642\u306b\u767a\u751f\u3057\u307e\u3059\u3002 Name Type Description data object data object \u5f62\u5f0f\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002","title":"Event: 'data'"},{"location":"ja/sfuroom/#data-object","text":"Name Type Description src string \u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3057\u305fPeer\u306eID\u3067\u3059\u3002 data * \u53d7\u4fe1\u3057\u305f\u30c7\u30fc\u30bf\u3067\u3059\u3002 room . on ( 'data' , ({ src , data }) => { // ... });","title":"data object"},{"location":"ja/sfuroom/#event-close","text":"\u30eb\u30fc\u30e0\u3092close\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 room . on ( 'close' , () => { // ... });","title":"Event: 'close'"},{"location":"ja/tips/","text":"\u3053\u3053\u3067\u306f\u3001SkyWay\u3092\u5229\u7528\u3057\u305fWebRTC\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u958b\u767a\u306b\u95a2\u3059\u308bTips\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002 \u3053\u306e\u30da\u30fc\u30b8\u306e\u5185\u5bb9\u306f\u305d\u306e\u52d5\u4f5c\u3092\u4fdd\u8a3c\u3059\u308b\u3082\u306e\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u30d6\u30e9\u30a6\u30b6\u306e\u5b9f\u88c5\u306b\u3088\u3063\u3066\u306f\u52d5\u4f5c\u3057\u306a\u3044\u30fb\u6319\u52d5\u304c\u9055\u3046\u306a\u3069\u306e\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002 MediaStream\u306e\u53d6\u5f97 \u00b6 Peer#call() \u3084 Peer#joinRoom() \u306b\u306f\u3001\u5f15\u6570\u3068\u3057\u3066 MediaStream \u3092\u6e21\u305b\u307e\u3059\u304c\u3001SkyWay\u3067\u306f\u305d\u306e MediaStream \u306e\u53d6\u5f97\u65b9\u6cd5\u3092\u898f\u5b9a\u3057\u3066\u3044\u307e\u305b\u3093\u3002 \u4e00\u822c\u7684\u306aJavaScript\u306eAPI\u3067\u306f\u3001\u6b21\u306e\u65b9\u6cd5\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 navigator.mediaDevices.getUserMedia(options) navigator.mediaDevices.getDisplayMedia(options) ( async function () { // .. const stream = await navigator . mediaDevices . getUserMedia ({ video : true }); const call = peer . call ( 'remote-peerId' , stream ); // ... }()); \u6307\u5b9a\u3067\u304d\u308b options \u306e\u8a73\u7d30\u30fb\u6319\u52d5\u306b\u3064\u3044\u3066\u306f\u3001\u5404\u30d6\u30e9\u30a6\u30b6\u306e\u5b9f\u88c5\u72b6\u6cc1\u306b\u4f9d\u5b58\u3057\u307e\u3059\u3002 \u305d\u306e\u307b\u304b\u3001 HTMLVideoElement \u3084 HTMLAudioElement \u3001\u304a\u3088\u3073 HTMLCanvasElement \u306e captureStream() \u304b\u3089\u3082\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 \u753b\u9762\u5171\u6709 \u00b6 \u30ab\u30e1\u30e9\u3067\u306f\u306a\u304f\u3001\u7aef\u672b\u306e\u753b\u9762\u81ea\u4f53\u3092 MediaStream \u3068\u3057\u3066\u53d6\u5f97\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 \u53d6\u5f97\u3057\u305f MediaStream \u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u753b\u9762\u5171\u6709\u6a5f\u80fd\u304c\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002 ( async function () { // .. const stream = await navigator . mediaDevices . getDisplayMedia ({ video : true }); const call = peer . call ( 'remote-peerId' , stream ); // ... }()); \u3053\u306eAPI\u304c\u30d6\u30e9\u30a6\u30b6\u306b\u5b9f\u88c5\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001 skyway/skyway-screenshare \u306e\u3088\u3046\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u5fc5\u8981\u3067\u3059\u3002 \u4f7f\u7528\u3059\u308b\u30c7\u30d0\u30a4\u30b9\u306e\u9078\u629e \u00b6 \u7aef\u672b\u306b\u8907\u6570\u306eUSB\u30ab\u30e1\u30e9\u30fb\u30de\u30a4\u30af\u304c\u63a5\u7d9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u305d\u308c\u3089\u3092\u9078\u629e\u3057\u3066\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002 ( async function () { // .. const defaultVideoStream = await navigator . mediaDevices . getUserMedia ({ video : true , }); // \u30c7\u30d0\u30a4\u30b9\u306e\u4e00\u89a7\u3092\u53d6\u5f97 const devices = await navigator . mediaDevices . enumerateDevices (); // \u4efb\u610f\u306e\u30c7\u30d0\u30a4\u30b9\u3092\u6307\u5b9a const newVideoInputDevice = devices . find ( device => device . kind === 'videoinput' ); const newVideoStream = await navigator . mediaDevices . getUserMedia ({ video : { deviceId : newVideoInputDevice . deviceId , }, }); // ... }()); navigator.mediaDevices.enumerateDevices() \u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u5229\u7528\u53ef\u80fd\u306a\u30c7\u30d0\u30a4\u30b9\u306e\u4e00\u89a7\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 \u305d\u306e\u4e2d\u304b\u3089\u4efb\u610f\u306e\u30c7\u30d0\u30a4\u30b9\u3092\u53c2\u7167\u3057\u3001\u305d\u306e deviceId \u3092 getUserMedia() \u306b\u6e21\u3059\u3053\u3068\u3067\u3001\u5165\u529b\u30bd\u30fc\u30b9\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002 MediaStream \u3092\u30df\u30e5\u30fc\u30c8\u3059\u308b \u00b6 \u4e00\u6642\u7684\u306b\u52d5\u753b\u3084\u97f3\u58f0\u3092\u30df\u30e5\u30fc\u30c8\u3057\u305f\u3044\u5834\u5408\u306f\u3001 MediaStreamTrack \u306e enabled \u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002 ( async function () { // .. const stream = await navigator . mediaDevices . getUserMedia ({ video : true , audio : true , }); const call = peer . call ( 'remote-peerId' , stream ); // \u97f3\u58f0\u306e\u307f\u30df\u30e5\u30fc\u30c8 stream . getAudioTracks (). forEach ( track => track . enabled = false ); // ... }()); \u30de\u30eb\u30c1\u30b9\u30c8\u30ea\u30fc\u30e0 \u00b6 \u8907\u6570\u306e MediaStream \u3092\u9001\u308a\u305f\u3044\u5834\u5408\u306b\u3064\u3044\u3066\u3067\u3059\u3002 \u73fe\u72b6\u3001SkyWay\u3067\u306fSDK\u3068\u3057\u3066\u30de\u30eb\u30c1\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u305b\u3093\u3002 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5074\u3067\u3001 MediaConnection \u3092\u8907\u6570\u7528\u610f\u3059\u308b\u306a\u3069\u3001\u5b9f\u73fe\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u3059\u3002 sdpSemantics \u00b6 Peer \u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u3068\u3057\u3066\u3001 RTCPeerConnection \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u6e21\u3055\u308c\u308b RTCConfiguration \u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002 Chrome\u3067\u306f sdpSemantics \u3068\u3044\u3046\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u304c\u3001SkyWay\u3067\u306f\u5e38\u306b unified-plan \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002","title":"Tips"},{"location":"ja/tips/#mediastream","text":"Peer#call() \u3084 Peer#joinRoom() \u306b\u306f\u3001\u5f15\u6570\u3068\u3057\u3066 MediaStream \u3092\u6e21\u305b\u307e\u3059\u304c\u3001SkyWay\u3067\u306f\u305d\u306e MediaStream \u306e\u53d6\u5f97\u65b9\u6cd5\u3092\u898f\u5b9a\u3057\u3066\u3044\u307e\u305b\u3093\u3002 \u4e00\u822c\u7684\u306aJavaScript\u306eAPI\u3067\u306f\u3001\u6b21\u306e\u65b9\u6cd5\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 navigator.mediaDevices.getUserMedia(options) navigator.mediaDevices.getDisplayMedia(options) ( async function () { // .. const stream = await navigator . mediaDevices . getUserMedia ({ video : true }); const call = peer . call ( 'remote-peerId' , stream ); // ... }()); \u6307\u5b9a\u3067\u304d\u308b options \u306e\u8a73\u7d30\u30fb\u6319\u52d5\u306b\u3064\u3044\u3066\u306f\u3001\u5404\u30d6\u30e9\u30a6\u30b6\u306e\u5b9f\u88c5\u72b6\u6cc1\u306b\u4f9d\u5b58\u3057\u307e\u3059\u3002 \u305d\u306e\u307b\u304b\u3001 HTMLVideoElement \u3084 HTMLAudioElement \u3001\u304a\u3088\u3073 HTMLCanvasElement \u306e captureStream() \u304b\u3089\u3082\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002","title":"MediaStream\u306e\u53d6\u5f97"},{"location":"ja/tips/#_1","text":"\u30ab\u30e1\u30e9\u3067\u306f\u306a\u304f\u3001\u7aef\u672b\u306e\u753b\u9762\u81ea\u4f53\u3092 MediaStream \u3068\u3057\u3066\u53d6\u5f97\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 \u53d6\u5f97\u3057\u305f MediaStream \u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u753b\u9762\u5171\u6709\u6a5f\u80fd\u304c\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002 ( async function () { // .. const stream = await navigator . mediaDevices . getDisplayMedia ({ video : true }); const call = peer . call ( 'remote-peerId' , stream ); // ... }()); \u3053\u306eAPI\u304c\u30d6\u30e9\u30a6\u30b6\u306b\u5b9f\u88c5\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001 skyway/skyway-screenshare \u306e\u3088\u3046\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u5fc5\u8981\u3067\u3059\u3002","title":"\u753b\u9762\u5171\u6709"},{"location":"ja/tips/#_2","text":"\u7aef\u672b\u306b\u8907\u6570\u306eUSB\u30ab\u30e1\u30e9\u30fb\u30de\u30a4\u30af\u304c\u63a5\u7d9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u305d\u308c\u3089\u3092\u9078\u629e\u3057\u3066\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002 ( async function () { // .. const defaultVideoStream = await navigator . mediaDevices . getUserMedia ({ video : true , }); // \u30c7\u30d0\u30a4\u30b9\u306e\u4e00\u89a7\u3092\u53d6\u5f97 const devices = await navigator . mediaDevices . enumerateDevices (); // \u4efb\u610f\u306e\u30c7\u30d0\u30a4\u30b9\u3092\u6307\u5b9a const newVideoInputDevice = devices . find ( device => device . kind === 'videoinput' ); const newVideoStream = await navigator . mediaDevices . getUserMedia ({ video : { deviceId : newVideoInputDevice . deviceId , }, }); // ... }()); navigator.mediaDevices.enumerateDevices() \u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u5229\u7528\u53ef\u80fd\u306a\u30c7\u30d0\u30a4\u30b9\u306e\u4e00\u89a7\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 \u305d\u306e\u4e2d\u304b\u3089\u4efb\u610f\u306e\u30c7\u30d0\u30a4\u30b9\u3092\u53c2\u7167\u3057\u3001\u305d\u306e deviceId \u3092 getUserMedia() \u306b\u6e21\u3059\u3053\u3068\u3067\u3001\u5165\u529b\u30bd\u30fc\u30b9\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002","title":"\u4f7f\u7528\u3059\u308b\u30c7\u30d0\u30a4\u30b9\u306e\u9078\u629e"},{"location":"ja/tips/#mediastream_1","text":"\u4e00\u6642\u7684\u306b\u52d5\u753b\u3084\u97f3\u58f0\u3092\u30df\u30e5\u30fc\u30c8\u3057\u305f\u3044\u5834\u5408\u306f\u3001 MediaStreamTrack \u306e enabled \u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002 ( async function () { // .. const stream = await navigator . mediaDevices . getUserMedia ({ video : true , audio : true , }); const call = peer . call ( 'remote-peerId' , stream ); // \u97f3\u58f0\u306e\u307f\u30df\u30e5\u30fc\u30c8 stream . getAudioTracks (). forEach ( track => track . enabled = false ); // ... }());","title":"MediaStream\u3092\u30df\u30e5\u30fc\u30c8\u3059\u308b"},{"location":"ja/tips/#_3","text":"\u8907\u6570\u306e MediaStream \u3092\u9001\u308a\u305f\u3044\u5834\u5408\u306b\u3064\u3044\u3066\u3067\u3059\u3002 \u73fe\u72b6\u3001SkyWay\u3067\u306fSDK\u3068\u3057\u3066\u30de\u30eb\u30c1\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u305b\u3093\u3002 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5074\u3067\u3001 MediaConnection \u3092\u8907\u6570\u7528\u610f\u3059\u308b\u306a\u3069\u3001\u5b9f\u73fe\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u3059\u3002","title":"\u30de\u30eb\u30c1\u30b9\u30c8\u30ea\u30fc\u30e0"},{"location":"ja/tips/#sdpsemantics","text":"Peer \u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u3068\u3057\u3066\u3001 RTCPeerConnection \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u6e21\u3055\u308c\u308b RTCConfiguration \u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002 Chrome\u3067\u306f sdpSemantics \u3068\u3044\u3046\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u304c\u3001SkyWay\u3067\u306f\u5e38\u306b unified-plan \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002","title":"sdpSemantics"}]}