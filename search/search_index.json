{
    "docs": [
        {
            "location": "/", 
            "text": "\u65e5\u672c\u8a9e\u30b5\u30a4\u30c8\u306f\n\u3053\u3061\u3089\n\n\nEnglish site is \nhere", 
            "title": "Home"
        }, 
        {
            "location": "/ja/", 
            "text": "\u672c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f\u3001SkyWay JavaScript SDK\u306eAPI\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3067\u3059\u3002\u65e5\u672c\u8a9e\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f\n\u3053\u3061\u3089\n\u304b\u3089\u3002\nSkyWay\u3092\u4f7f\u3063\u305f\u958b\u767a\u304c\u521d\u3081\u3066\u306e\u5834\u5408\u306f\u3001SkyWay\u306e\n\u901a\u4fe1\u30e2\u30c7\u30eb\n\u3092\u5148\u306b\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002", 
            "title": "Introduction"
        }, 
        {
            "location": "/ja/peer/", 
            "text": "P2P\u63a5\u7d9a\u304a\u3088\u3073\u30eb\u30fc\u30e0\u63a5\u7d9a\u6a5f\u80fd\u3092\u64cd\u4f5c\u3059\u308b\u305f\u3081\u306e\u30af\u30e9\u30b9\u3067\u3059\u3002SkyWay\u3092\u5229\u7528\u3059\u308b\u305f\u3081\u306b\u3001\u6700\u521d\u306bPeer\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\u304c\u5fc5\u8981\u3067\u3059\u3002\n\n\nConstructor\n\n\n\u65b0\u898f\u306bPeer\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\nnew Peer()\n \u306b\u3088\u308a\u3001SkyWay\u306e\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u3068\u63a5\u7d9a\u3057\u307e\u3059\u3002\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nid\n\n\nstring\n\n\n\n\n\n\n\u30e6\u30fc\u30b6\u306ePeer ID\u3067\u3059\u3002\n\n\n\n\n\n\noptions\n\n\noptions object\n\n\n\u2714\n\n\n\n\n\u63a5\u7d9a\u306b\u95a2\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6307\u5b9a\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3059\u3002\n\n\n\n\n\n\n\n\noptions object\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nstring\n\n\n\u2714\n\n\n\n\nSkyWay\u306eAPI\u30ad\u30fc\u3067\u3059\u3002\n\n\n\n\n\n\ndebug\n\n\nnumber\n\n\n\n\n\n\n\u30ed\u30b0\u30ec\u30d9\u30eb\uff1a NONE:0\u3001 ERROR:1\u3001 WARN:2\u3001 FULL:3 \u304b\u3089\u9078\u629e\u3067\u304d\u307e\u3059\u3002\n\n\n\n\n\n\nturn\n\n\nboolean\n\n\n\n\n\n\nSkyWay\u3067\u63d0\u4f9b\u3059\u308bTURN\u3092\u4f7f\u3046\u304b\u3069\u3046\u304b\u306e\u30d5\u30e9\u30b0\u3067\u3059\u3002\n\n\n\n\n\n\ncredential\n\n\ncredential object\n\n\n\n\n\n\nPeer\u3092\u8a8d\u8a3c\u3059\u308b\u305f\u3081\u306e\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u3067\u3059\u3002\u8a8d\u8a3c\u6a5f\u80fd\u304c\u6709\u52b9\u306e\u5834\u5408\u306e\u307f\u4f7f\u3048\u307e\u3059\u3002\u8a73\u7d30\u306f\n\u8a8d\u8a3c\u30ea\u30dd\u30b8\u30c8\u30ea\n\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002\n\n\n\n\n\n\nconfig\n\n\nRTCConfiguration object\n\n\n\n\nDefault RTCConfiguration object\n\n\nRTCPeerConnection\u306b\u6e21\u3055\u308c\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n\u3067\u3059\u3002\u767a\u5c55\u7684\u306a\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u305f\u3081\u3001\u5185\u5bb9\u3092\u7406\u89e3\u3057\u3066\u3044\u308b\u5834\u5408\u306e\u307f\u3054\u5229\u7528\u304f\u3060\u3055\u3044\u3002\n\n\n\n\n\n\n\n\ncredential object\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntimestamp\n\n\nnumber\n\n\n\n\n\n\n\u73fe\u5728\u306eUNIX\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u3067\u3059\u3002\n\n\n\n\n\n\nttl\n\n\nnumber\n\n\n\n\n\n\nTime to live(ttl)\u3002\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7 + ttl \u306e\u6642\u9593\u3067\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u304c\u5931\u52b9\u3057\u307e\u3059\u3002\n\n\n\n\n\n\nauthToken\n\n\nstring\n\n\n\n\nDefault\n\n\nHMAC\u3092\u5229\u7528\u3057\u3066\u751f\u6210\u3059\u308b\u8a8d\u8a3c\u7528\u30c8\u30fc\u30af\u30f3\u3067\u3059\u3002\n\n\n\n\n\n\n\n\nDefault RTCConfiguration object\n\n\nconst\n \ndefaultConfig\n \n=\n \n{\n\n  \niceServers\n:\n \n[{\n\n    \nurls\n:\n \nstun:stun.webrtc.ecl.ntt.com:3478\n,\n\n    \nurl\n:\n  \nstun:stun.webrtc.ecl.ntt.com:3478\n,\n\n  \n}],\n\n  \niceTransportPolicy\n:\n \nall\n,\n\n\n};\n\n\n\n\n\n\nSample\n\n\n// \u30c7\u30d0\u30c3\u30b0\u60c5\u5831\u3092\u6700\u5927(3)\u306b\u3057\u3066\u63a5\u7d9a\u3059\u308b\u5834\u5408\n\n\nconst\n \npeer\n \n=\n \nnew\n \nPeer\n({\n\n  \nkey\n:\n   \nYOUR-API-KEY\n\n  \ndebug\n:\n \n3\n,\n\n\n});\n\n\n\n\n\n\n// TURN\u30b5\u30fc\u30d0\u3092\u5f37\u5236\u5229\u7528\u3059\u308b\u5834\u5408\n\n\nconst\n \npeer\n \n=\n \nnew\n \nPeer\n({\n\n  \nkey\n:\n   \nYOUR-API-KEY\n\n  \ndebug\n:\n \n3\n,\n\n  \nconfig\n:\n \n{\n\n    \niceTransportPolicy\n:\n \nrelay\n,\n\n  \n},\n\n\n});\n\n\n\n\n\n\nMembers\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nconnections\n\n\nObject\n\n\n\u5168\u3066\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u4fdd\u6301\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002\n\n\n\n\n\n\nid\n\n\nstring\n\n\n\u30e6\u30fc\u30b6\u30fc\u304c\u6307\u5b9a\u3057\u305fPeer ID\u3001\u3082\u3057\u304f\u306f\u30b5\u30fc\u30d0\u304c\u751f\u6210\u3057\u305fPeer ID\u3067\u3059\u3002\n\n\n\n\n\n\nopen\n\n\nboolean\n\n\n\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u3078\u306e\u63a5\u7d9a\u72b6\u6cc1\u3092\u4fdd\u6301\u3057\u307e\u3059\u3002\n\n\n\n\n\n\nrooms\n\n\nobject\n\n\n\u5168\u3066\u306e\u30eb\u30fc\u30e0\u3092\u4fdd\u6301\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002\n\n\n\n\n\n\n\n\nMethods\n\n\ncall\n\n\n\u6307\u5b9a\u3057\u305fPeer\u306b\u30e1\u30c7\u30a3\u30a2\u30c1\u30e3\u30cd\u30eb(\u97f3\u58f0\u30fb\u6620\u50cf)\u3067\u63a5\u7d9a\u3057\u3066\u3001MediaConnection\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u5e2f\u57df\u5e45\u30fb\u30b3\u30fc\u30c7\u30c3\u30af\u306a\u3069\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npeerId\n\n\nstring\n\n\n\u2714\n\n\n\n\n\u63a5\u7d9a\u5148\u306ePeer ID\u3067\u3059\u3002\n\n\n\n\n\n\nstream\n\n\nMediaStream\n\n\n\n\n\n\n\u63a5\u7d9a\u5148\u306ePeer\u3078\u9001\u308b\u30e1\u30c7\u30a3\u30a2\u30b9\u30c8\u30ea\u30fc\u30e0\u3067\u3059\u3002 \u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001\u53d7\u4fe1\u306e\u307f\u30e2\u30fc\u30c9\u3067\u767a\u4fe1\u3057\u307e\u3059\u3002\n\n\n\n\n\n\noptions\n\n\ncall options object\n\n\n\n\n\n\n\u767a\u4fe1\u6642\u306b\u4ed8\u4e0e\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3059\u3002\u5e2f\u57df\u5e45\u30fb\u30b3\u30fc\u30c7\u30c3\u30af\u306a\u3069\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n\n\n\n\n\n\n\ncall options object\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmetadata\n\n\nobject\n\n\n\n\n\n\n\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u306b\u95a2\u9023\u4ed8\u3051\u3055\u308c\u308b\u4efb\u610f\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\u3067\u3001\u63a5\u7d9a\u5148\u306ePeer\u306b\u6e21\u3055\u308c\u307e\u3059\u3002\n\n\n\n\n\n\nvideoBandwidth\n\n\nnumber\n\n\n\n\n\n\n\u63a5\u7d9a\u5148\u304b\u3089\u53d7\u4fe1\u3059\u308b\u6620\u50cf\u306e\u6700\u5927\u5e2f\u57df\u5e45(kbps)\u3067\u3059\u3002\n\n\n\n\n\n\naudioBandwidth\n\n\nnumber\n\n\n\n\n\n\n\u63a5\u7d9a\u5148\u304b\u3089\u53d7\u4fe1\u3059\u308b\u97f3\u58f0\u306e\u6700\u5927\u5e2f\u57df\u5e45(kbps)\u3067\u3059\u3002\n\n\n\n\n\n\nvideoCodec\n\n\nstring\n\n\n\n\n\n\n'H264'\u306a\u3069\u306e\u6620\u50cf\u30b3\u30fc\u30c7\u30c3\u30af\u3067\u3059\u3002\n\n\n\n\n\n\naudioCodec\n\n\nstring\n\n\n\n\n\n\n'PCMU'\u306a\u3069\u306e\u97f3\u58f0\u30b3\u30fc\u30c7\u30c3\u30af\u3067\u3059\u3002\n\n\n\n\n\n\nvideoReceiveEnabled\n\n\nboolean\n\n\n\n\n\n\n\u6620\u50cf\u3092\u53d7\u4fe1\u306e\u307f\u3067\u4f7f\u3046\u5834\u5408\u306e\u30d5\u30e9\u30b0\u3067\u3059\u3002\n\n\n\n\n\n\naudioReceiveEnabled\n\n\nboolean\n\n\n\n\n\n\n\u97f3\u58f0\u3092\u53d7\u4fe1\u306e\u307f\u3067\u4f7f\u3046\u5834\u5408\u306e\u30d5\u30e9\u30b0\u3067\u3059\u3002\n\n\n\n\n\n\nlabel\n\n\nstring\n\n\n\n\n\n\nDeprecated!\n \u63a5\u7d9a\u5148\u306ePeer ID\u3092\u8b58\u5225\u3059\u308b\u306e\u306b\u5229\u7528\u3059\u308b\u30e9\u30d9\u30eb\u3067\u3059\u3002\n\n\n\n\n\n\n\n\nReturn value\n\n\nMediaConnection\n\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\n\n\nSample\n\n\n// \u81ea\u8eab\u306elocalStream\u3092\u8a2d\u5b9a\u3057\u3066\u3001\u76f8\u624b\u306b\u767a\u4fe1\u3059\u308b\u5834\u5408\n\n\nconst\n \ncall\n \n=\n \npeer\n.\ncall\n(\npeerID\n,\n \nlocalStream\n);\n\n\n\n\n\n\n// \u81ea\u8eab\u306elocalStream\u304a\u3088\u3073metadata\u3092\u8a2d\u5b9a\u3057\u3066\u3001\u76f8\u624b\u306b\u767a\u4fe1\u3059\u308b\u5834\u5408\n\n\nconst\n \ncall\n \n=\n \npeer\n.\ncall\n(\npeerID\n,\n \nlocalStream\n,\n \n{\n\n  \nmetadata\n:\n \n{\n\n    \nfoo\n:\n \nbar\n,\n\n  \n}\n\n\n});\n\n\n\n\n\n\n// \u6620\u50cf\u30b3\u30fc\u30c7\u30c3\u30af\u3068\u3057\u3066H264\u3092\u5229\u7528\u3059\u308b\u5834\u5408\n\n\nconst\n \ncall\n \n=\n \npeer\n.\ncall\n(\npeerID\n,\n \nlocalStream\n,\n \n{\n\n  \nvideoCodec\n:\n \nH264\n,\n\n\n});\n\n\n\n\n\n\n// \u97f3\u58f0\u306e\u307f\u63a5\u7d9a\u5148\u304b\u3089\u53d7\u4fe1\u3059\u308b\u8a2d\u5b9a\u3067\u3001\u76f8\u624b\u306b\u767a\u4fe1\u3059\u308b\u5834\u5408\n\n\nconst\n \ncall\n \n=\n \npeer\n.\ncall\n(\npeerID\n,\n \n{\n\n  \naudioReceiveEnabled\n:\n \ntrue\n,\n\n\n});\n\n\n\n\n\n\nconnect\n\n\n\u6307\u5b9a\u3057\u305fPeer\u306b\u30c7\u30fc\u30bf\u30c1\u30e3\u30cd\u30eb\u3067\u63a5\u7d9a\u3057\u3066\u3001DataConnection\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npeerId\n\n\nstring\n\n\n\u2714\n\n\n\n\n\u63a5\u7d9a\u5148\u306ePeer ID\u3067\u3059\u3002\n\n\n\n\n\n\noptions\n\n\nconnect options object\n\n\n\n\n\n\n\u63a5\u7d9a\u6642\u306b\u4ed8\u4e0e\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3059\u3002\n\n\n\n\n\n\n\n\nconnect options object\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmetadata\n\n\nobject\n\n\n\n\n\n\n\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u306b\u95a2\u9023\u4ed8\u3051\u3055\u308c\u308b\u4efb\u610f\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\u3067\u3001\u63a5\u7d9a\u5148\u306ePeer\u306b\u6e21\u3055\u308c\u307e\u3059\u3002\n\n\n\n\n\n\nserialization\n\n\nstring\n\n\n\n\n\n\n\u9001\u4fe1\u6642\u306e\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u65b9\u6cd5\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002'binary'\u3001'json'\u3001'none'\u306e\u3044\u305a\u308c\u304b\u3001\u3068\u306a\u308a\u307e\u3059\u3002\n\n\n\n\n\n\ndcInit\n\n\nRTCDataChannelInit Object\n\n\n\n\n\n\nDataChannel\u5229\u7528\u6642\u306b\u4fe1\u983c\u6027\u306e\u6709\u7121\u3092\u6307\u5b9a\u3059\u308b\u305f\u3081\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u4fe1\u983c\u6027\u6709\u3067\u52d5\u4f5c\u3057\u307e\u3059\u3002\u306a\u304a\u3001chrome\u306f\u3001\nmaxPacketLifetime\n \u306e\u4ee3\u308f\u308a\u306b\u3001\nmaxRetransmitTime\n \u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\n\n\n\n\n\nlabel\n\n\nstring\n\n\n\n\n\n\nDeprecated!\n \u63a5\u7d9a\u5148\u306ePeer ID\u3092\u8b58\u5225\u3059\u308b\u306e\u306b\u5229\u7528\u3059\u308b\u30e9\u30d9\u30eb\u3067\u3059\u3002\n\n\n\n\n\n\n\n\nReturn value\n\n\nDataConnection\n\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\n\n\nSample\n\n\n// \u5358\u306bDataChannel\u3092\u63a5\u7d9a\u3059\u308b\u5834\u5408(\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u4fe1\u983c\u6027\u6709\u308a)\n\n\npeer\n.\nconnect\n(\npeerId\n);\n\n\n\n\n\n\n// metadata\u4ed8\u304d\u3067connect\u3059\u308b\u5834\u5408\n\n\npeer\n.\nconnect\n(\npeerId\n,\n \n{\n\n  \nmetadata\n:\n \n{\n\n    \nhoge\n:\n \nfoobar\n,\n\n  \n}\n\n\n});\n\n\n\n\n\n\n// \u4fe1\u983c\u6027\u7121\u3057\u30e2\u30fc\u30c9\u3067DataChannel\u3092\u63a5\u7d9a\u3059\u308b\u5834\u5408\n\n\npeer\n.\nconnect\n(\npeerId\n,\n \n{\n\n  \ndcInit\n:\n \n{\n\n    \n// \u6700\u59272\u56de\u3001\u518d\u9001\u3059\u308b\n\n    \nmaxRetransmits\n:\n \n2\n,\n\n  \n},\n\n\n});\n\n\n\n\n\n\ndestroy\n\n\n\u5168\u3066\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u9589\u3058\u3001\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u3078\u306e\u63a5\u7d9a\u3092\u5207\u65ad\u3057\u307e\u3059\u3002\n\n\nParameters\n\n\nNone\n\n\nReturn value\n\n\nundefined\n\n\nSample\n\n\npeer\n.\ndestroy\n();\n\n\n\n\n\n\ndisconnect\n\n\n\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u3078\u306e\u63a5\u7d9a\u3092\u9589\u3058\u3001disconnected\u30a4\u30d9\u30f3\u30c8\u3092\u9001\u51fa\u3057\u307e\u3059\u3002\n\n\nParameters\n\n\nNone\n\n\nReturn value\n\n\nundefined\n\n\nSample\n\n\npeer\n.\ndisconnect\n();\n\n\n\n\n\n\njoinRoom\n\n\n\u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u306e\u30eb\u30fc\u30e0\u3001\u307e\u305f\u306fSFU\u63a5\u7d9a\u306e\u30eb\u30fc\u30e0\u306b\u53c2\u52a0\u3057\u307e\u3059\u3002\u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u304a\u3088\u3073SFU\u63a5\u7d9a\u306b\u3064\u3044\u3066\u306f\n\u30b3\u30c1\u30e9\n\u3092\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRquired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nroomName\n\n\nstring\n\n\n\u2714\n\n\n\n\n\u53c2\u52a0\u5148\u306e\u30eb\u30fc\u30e0\u306e\u540d\u524d\u3067\u3059\u3002\n\n\n\n\n\n\nroomOptions\n\n\nroom options object\n\n\n\n\n\u63a5\u7d9a\u6642\u306b\u9078\u629e\u30fb\u4ed8\u4e0e\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3059\u3002\n\n\n\n\n\n\n\n\n\n\nroom options object\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmode\n\n\nstring\n\n\n\n\n'mesh'\n\n\n'sfu'\u307e\u305f\u306f'mesh'\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n\n\n\n\n\nstream\n\n\nMediaStream\n\n\n\n\n\n\n\u30e6\u30fc\u30b6\u30fc\u304c\u9001\u4fe1\u3059\u308b\u30e1\u30c7\u30a3\u30a2\u30b9\u30c8\u30ea\u30fc\u30e0\u3067\u3059\u3002\n\n\n\n\n\n\nvideoBandwidth\n\n\nnumber\n\n\n\n\n\n\n\u6620\u50cf\u306e\u6700\u5927\u5e2f\u57df\u5e45(kbps)\u3067\u3059\u3002\u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u306e\u307f\u4f7f\u7528\u53ef\u80fd\u3067\u3059\u3002\n\n\n\n\n\n\naudioBandwidth\n\n\nnumber\n\n\n\n\n\n\n\u97f3\u58f0\u306e\u6700\u5927\u5e2f\u57df\u5e45(kbps)\u3067\u3059\u3002 \u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u306e\u307f\u4f7f\u7528\u53ef\u80fd\u3067\u3059\u3002\n\n\n\n\n\n\nvideoCodec\n\n\nstring\n\n\n\n\n\n\n'H264'\u306a\u3069\u306e\u6620\u50cf\u30b3\u30fc\u30c7\u30c3\u30af\u3067\u3059\u3002 \u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u306e\u307f\u4f7f\u7528\u53ef\u80fd\u3067\u3059\u3002\n\n\n\n\n\n\naudioCodec\n\n\nstring\n\n\n\n\n\n\n'PCMU'\u306a\u3069\u306e\u97f3\u58f0\u30b3\u30fc\u30c7\u30c3\u30af\u3067\u3059\u3002\u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u306e\u307f\u4f7f\u7528\u53ef\u80fd\u3067\u3059\u3002\n\n\n\n\n\n\nvideoReceiveEnabled\n\n\nboolean\n\n\n\n\n\n\n\u6620\u50cf\u3092\u53d7\u4fe1\u306e\u307f\u3067\u4f7f\u3046\u5834\u5408\u306e\u30d5\u30e9\u30b0\u3067\u3059\u3002\u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u306e\u307f\u4f7f\u7528\u53ef\u80fd\u3067\u3059\u3002\n\n\n\n\n\n\naudioReceiveEnabled\n\n\nboolean\n\n\n\n\n\n\n\u97f3\u58f0\u3092\u53d7\u4fe1\u306e\u307f\u3067\u4f7f\u3046\u5834\u5408\u306e\u30d5\u30e9\u30b0\u3067\u3059\u3002\u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u306e\u307f\u4f7f\u7528\u53ef\u80fd\u3067\u3059\u3002\n\n\n\n\n\n\n\n\nReturn value\n\n\nSFURoom\n \u307e\u305f\u306f \nMeshRoom\n \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\n\n\nSample\n\n\n// Mesh\u63a5\u7d9a\u3092\u5229\u7528\u3059\u308b\u5834\u5408\n\n\nconst\n \nroom\n \n=\n \npeer\n.\njoinRoom\n(\nroomName\n,\n \n{\n\n  \nmode\n:\n \nmesh\n,\n \n  \nstream\n:\n \nlocalStream\n,\n\n\n});\n\n\n\n\n\n\n// SFU\u63a5\u7d9a\u3092\u5229\u7528\u3059\u308b\u5834\u5408\n\n\nconst\n \nroom\n \n=\n \npeer\n.\njoinRoom\n(\nroomName\n,\n \n{\n\n  \nmode\n:\n \nsfu\n,\n \n  \nstream\n:\n \nlocalStream\n,\n\n\n});\n\n\n\n\n\n\nlistAllPeers\n\n\nREST API\u3092\u5229\u7528\u3057\u3066\u3001API\u30ad\u30fc\u306b\u7d10\u3065\u304fPeerID\u4e00\u89a7\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\n\nParameters\n\n\nNone\n\n\nReturn value\n\n\nundefined\n\n\nSample\n\n\npeer\n.\nlistAllPeers\n(\npeers\n \n=\n \n{\n\n  \nconsole\n.\nlog\n(\npeers\n)\n\n  \n// =\n [\nyNtQkNyjAojJNGrt\n, \nEzAmgFhCKBQMzKw9\n]\n\n\n});\n\n\n\n\n\n\nupdateCredential\n\n\nPeer\u8a8d\u8a3c\u306e\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u306eTTL\u3092\u5ef6\u9577\u3059\u308b\u305f\u3081\u306e\u66f4\u65b0\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u9001\u4ed8\u3057\u307e\u3059\u3002\nPeer\u8a8d\u8a3c\u306b\u3064\u3044\u3066\u306f\u3001\n\u30b3\u30c1\u30e9\n\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmode\n\n\ncredential object\n\n\n\u2714\n\n\n\n\n\u30e6\u30fc\u30b6\u30fc\u5074\u3067\u4f5c\u6210\u3059\u308b\u65b0\u3057\u3044\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u3067\u3059\u3002\n\n\n\n\n\n\n\n\ncredential object\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nOptional\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntimestamp\n\n\nnumber\n\n\n\u2714\n\n\n\n\n\u73fe\u5728\u306eUNIX\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u3067\u3059\u3002\n\n\n\n\n\n\nttl\n\n\nnumber\n\n\n\u2714\n\n\n\n\nTime to live(ttl)\u3002\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7 + ttl \u306e\u6642\u9593\u3067\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u304c\u5931\u52b9\u3057\u307e\u3059\u3002\n\n\n\n\n\n\nauthToken\n\n\nstring\n\n\n\u2714\n\n\nDefault\n\n\nHMAC\u3092\u5229\u7528\u3057\u3066\u751f\u6210\u3059\u308b\u8a8d\u8a3c\u7528\u30c8\u30fc\u30af\u30f3\u3067\u3059\u3002\n\n\n\n\n\n\n\n\nReturn value\n\n\nundefined\n\n\nEvents\n\n\nopen\n\n\n\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u3078\u6b63\u5e38\u306b\u63a5\u7d9a\u3067\u304d\u305f\u3068\u304d\u306e\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstring\n\n\nPeer ID\n\n\n\n\n\n\n\n\nSample\n\n\npeer\n.\non\n(\nopen\n,\n \nid\n \n=\n \n{\n\n  \nconsole\n.\nlog\n(\nid\n);\n\n\n})\n\n\n\n\n\n\ncall\n\n\n\u63a5\u7d9a\u5148\u306ePeer\u304b\u3089\u30e1\u30c7\u30a3\u30a2\u30c1\u30e3\u30cd\u30eb(\u97f3\u58f0\u30fb\u6620\u50cf)\u306e\u63a5\u7d9a\u3092\u53d7\u4fe1\u3057\u305f\u3068\u304d\u306e\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nMediaConnection\n\n\nMediaConnection\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\u3002\n\n\n\n\n\n\n\n\nSample\n\n\npeer\n.\non\n(\ncall\n,\n \ncall\n \n=\n \n{\n\n  \n// \u7740\u4fe1\u5074\u306e\u30e1\u30c7\u30a3\u30a2\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u8a2d\u5b9a\u3057\u3066\u5fdc\u7b54\n\n  \ncall\n.\nanswer\n(\nmediaStream\n);\n\n\n});\n\n\n\n\n\n\nclose\n\n\nPeer\u306b\u5bfe\u3059\u308b\u5168\u3066\u306e\u63a5\u7d9a\u3092\u7d42\u4e86\u3057\u305f\u3068\u304d\u306e\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002\n\n\nconnection\n\n\n\u63a5\u7d9a\u5148\u306ePeer\u304b\u3089DataChannel\u306e\u63a5\u7d9a\u3092\u53d7\u4fe1\u3057\u305f\u3068\u304d\u306e\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDataConnection\n\n\nDataConnection\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\u3002\n\n\n\n\n\n\n\n\nsample\n\n\npeer\n.\non\n(\nconnection\n,\n \nconnection\n \n=\n \n{\n\n  \nconsole\n.\nlog\n(\nconnection\n);\n\n\n});\n\n\n\n\n\n\ndisconnected\n\n\n\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u304b\u3089\u5207\u65ad\u3057\u305f\u3068\u304d\u306e\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstring\n\n\nPeer ID\n\n\n\n\n\n\n\n\nexpiresin\n\n\n\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u304c\u5931\u52b9\u3059\u308b\u524d\u306b\u767a\u751f\u3059\u308b\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber\n\n\n\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u304c\u5931\u52b9\u3059\u308b\u307e\u3067\u306e\u6642\u9593(\u79d2)\u3067\u3059\u3002\n\n\n\n\n\n\n\n\nerror\n\n\n\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306e\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nroom-error\n\n\n\u30eb\u30fc\u30e0\u540d\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u307e\u305b\u3093\n\n\n\n\n\n\n\n\n\u30eb\u30fc\u30e0\u30bf\u30a4\u30d7\u304c\u7570\u306a\u308a\u307e\u3059\u3002(\u30e1\u30c3\u30b7\u30e5\u30eb\u30fc\u30e0\u3068\u3057\u3066\u4f5c\u6210\u3057\u305f\u90e8\u5c4b\u306b\u3001SFU\u30eb\u30fc\u30e0\u6307\u5b9a\u3067\u53c2\u52a0\u3057\u305f\u5834\u5408)\n\n\n\n\n\n\n\n\nSFU\u6a5f\u80fd\u304c\u8a72\u5f53\u306eAPI\u30ad\u30fc\u3067Disabled\u3067\u3059\u3002\u5229\u7528\u3059\u308b\u306b\u306f\u3001Dashboard\u304b\u3089enable\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\n\n\n\n\n\n\n\u4e0d\u660e\u306a\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f\u3002\u5c11\u3057\u5f85\u3063\u3066\u3001\u30ea\u30c8\u30e9\u30a4\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\n\n\n\n\n\n\n\u30eb\u30fc\u30e0\u30ed\u30b0\u53d6\u5f97\u6642\u306b\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f\u3002\u5c11\u3057\u5f85\u3063\u3066\u3001\u30ea\u30c8\u30e9\u30a4\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\n\n\n\n\nauthentication\n\n\n\u6307\u5b9a\u3055\u308c\u305f\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u3092\u7528\u3044\u305f\u8a8d\u8a3c\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002\n\n\n\n\n\n\npermission\n\n\n\u8a72\u5f53\u306e\u30eb\u30fc\u30e0\u306e\u5229\u7528\u304c\u8a31\u53ef\u3055\u308c\u3066\u307e\u305b\u3093\u3002\n\n\n\n\n\n\nlist-error\n\n\nAPI\u30ad\u30fc\u306eREST API\u304c\u8a31\u53ef\u3055\u308c\u3066\u307e\u305b\u3093\u3002\n\n\n\n\n\n\ndisconnected\n\n\nSkyWay\u306e\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\n\n\n\n\n\n\nsocket-error\n\n\nSkyWay\u306e\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u3068\u306e\u63a5\u7d9a\u304c\u5931\u308f\u308c\u307e\u3057\u305f\u3002\n\n\n\n\n\n\ninvalid-id\n\n\nID\u304c\u4e0d\u6b63\u3067\u3059\u3002\n\n\n\n\n\n\ninvalid-key\n\n\nAPI\u30ad\u30fc\u304c\u7121\u52b9\u3067\u3059\u3002\n\n\n\n\n\n\nserver-error\n\n\nSkyWay\u306e\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u304b\u3089Peer\u4e00\u89a7\u3092\u53d6\u5f97\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\n\n\n\n\n\n\n\nSample\n\n\n// \u4eee\u306bRoom\u540d\u3092\u6307\u5b9a\u305b\u305a\u306bjoinRoom\u3092\u547c\u3093\u3060\u5834\u5408\n\n\npeer\n.\non\n(\nerror\n,\n \nerror\n \n=\n \n{\n\n  \nconsole\n.\nlog\n(\n`\n${\nerror\n.\ntype\n}\n: \n${\nerror\n.\nmessage\n}\n`\n);\n\n  \n// =\n room-error: Room name must be defined.\n\n\n});", 
            "title": "Peer"
        }, 
        {
            "location": "/ja/peer/#constructor", 
            "text": "\u65b0\u898f\u306bPeer\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u307e\u3059\u3002 new Peer()  \u306b\u3088\u308a\u3001SkyWay\u306e\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u3068\u63a5\u7d9a\u3057\u307e\u3059\u3002", 
            "title": "Constructor"
        }, 
        {
            "location": "/ja/peer/#parameter", 
            "text": "Name  Type  Required  Default  Description      id  string    \u30e6\u30fc\u30b6\u306ePeer ID\u3067\u3059\u3002    options  options object  \u2714   \u63a5\u7d9a\u306b\u95a2\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6307\u5b9a\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3059\u3002", 
            "title": "Parameter"
        }, 
        {
            "location": "/ja/peer/#options-object", 
            "text": "Name  Type  Required  Default  Description      key  string  \u2714   SkyWay\u306eAPI\u30ad\u30fc\u3067\u3059\u3002    debug  number    \u30ed\u30b0\u30ec\u30d9\u30eb\uff1a NONE:0\u3001 ERROR:1\u3001 WARN:2\u3001 FULL:3 \u304b\u3089\u9078\u629e\u3067\u304d\u307e\u3059\u3002    turn  boolean    SkyWay\u3067\u63d0\u4f9b\u3059\u308bTURN\u3092\u4f7f\u3046\u304b\u3069\u3046\u304b\u306e\u30d5\u30e9\u30b0\u3067\u3059\u3002    credential  credential object    Peer\u3092\u8a8d\u8a3c\u3059\u308b\u305f\u3081\u306e\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u3067\u3059\u3002\u8a8d\u8a3c\u6a5f\u80fd\u304c\u6709\u52b9\u306e\u5834\u5408\u306e\u307f\u4f7f\u3048\u307e\u3059\u3002\u8a73\u7d30\u306f \u8a8d\u8a3c\u30ea\u30dd\u30b8\u30c8\u30ea \u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002    config  RTCConfiguration object   Default RTCConfiguration object  RTCPeerConnection\u306b\u6e21\u3055\u308c\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 \u3067\u3059\u3002\u767a\u5c55\u7684\u306a\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u305f\u3081\u3001\u5185\u5bb9\u3092\u7406\u89e3\u3057\u3066\u3044\u308b\u5834\u5408\u306e\u307f\u3054\u5229\u7528\u304f\u3060\u3055\u3044\u3002", 
            "title": "options object"
        }, 
        {
            "location": "/ja/peer/#credential-object", 
            "text": "Name  Type  Required  Default  Description      timestamp  number    \u73fe\u5728\u306eUNIX\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u3067\u3059\u3002    ttl  number    Time to live(ttl)\u3002\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7 + ttl \u306e\u6642\u9593\u3067\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u304c\u5931\u52b9\u3057\u307e\u3059\u3002    authToken  string   Default  HMAC\u3092\u5229\u7528\u3057\u3066\u751f\u6210\u3059\u308b\u8a8d\u8a3c\u7528\u30c8\u30fc\u30af\u30f3\u3067\u3059\u3002", 
            "title": "credential object"
        }, 
        {
            "location": "/ja/peer/#default-rtcconfiguration-object", 
            "text": "const   defaultConfig   =   { \n   iceServers :   [{ \n     urls :   stun:stun.webrtc.ecl.ntt.com:3478 , \n     url :    stun:stun.webrtc.ecl.ntt.com:3478 , \n   }], \n   iceTransportPolicy :   all ,  };", 
            "title": "Default RTCConfiguration object"
        }, 
        {
            "location": "/ja/peer/#sample", 
            "text": "// \u30c7\u30d0\u30c3\u30b0\u60c5\u5831\u3092\u6700\u5927(3)\u306b\u3057\u3066\u63a5\u7d9a\u3059\u308b\u5834\u5408  const   peer   =   new   Peer ({ \n   key :     YOUR-API-KEY \n   debug :   3 ,  });   // TURN\u30b5\u30fc\u30d0\u3092\u5f37\u5236\u5229\u7528\u3059\u308b\u5834\u5408  const   peer   =   new   Peer ({ \n   key :     YOUR-API-KEY \n   debug :   3 , \n   config :   { \n     iceTransportPolicy :   relay , \n   },  });", 
            "title": "Sample"
        }, 
        {
            "location": "/ja/peer/#members", 
            "text": "Name  Type  Description      connections  Object  \u5168\u3066\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u4fdd\u6301\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002    id  string  \u30e6\u30fc\u30b6\u30fc\u304c\u6307\u5b9a\u3057\u305fPeer ID\u3001\u3082\u3057\u304f\u306f\u30b5\u30fc\u30d0\u304c\u751f\u6210\u3057\u305fPeer ID\u3067\u3059\u3002    open  boolean  \u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u3078\u306e\u63a5\u7d9a\u72b6\u6cc1\u3092\u4fdd\u6301\u3057\u307e\u3059\u3002    rooms  object  \u5168\u3066\u306e\u30eb\u30fc\u30e0\u3092\u4fdd\u6301\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002", 
            "title": "Members"
        }, 
        {
            "location": "/ja/peer/#methods", 
            "text": "", 
            "title": "Methods"
        }, 
        {
            "location": "/ja/peer/#call", 
            "text": "\u6307\u5b9a\u3057\u305fPeer\u306b\u30e1\u30c7\u30a3\u30a2\u30c1\u30e3\u30cd\u30eb(\u97f3\u58f0\u30fb\u6620\u50cf)\u3067\u63a5\u7d9a\u3057\u3066\u3001MediaConnection\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u5e2f\u57df\u5e45\u30fb\u30b3\u30fc\u30c7\u30c3\u30af\u306a\u3069\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002", 
            "title": "call"
        }, 
        {
            "location": "/ja/peer/#parameters", 
            "text": "Name  Type  Required  Default  Description      peerId  string  \u2714   \u63a5\u7d9a\u5148\u306ePeer ID\u3067\u3059\u3002    stream  MediaStream    \u63a5\u7d9a\u5148\u306ePeer\u3078\u9001\u308b\u30e1\u30c7\u30a3\u30a2\u30b9\u30c8\u30ea\u30fc\u30e0\u3067\u3059\u3002 \u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001\u53d7\u4fe1\u306e\u307f\u30e2\u30fc\u30c9\u3067\u767a\u4fe1\u3057\u307e\u3059\u3002    options  call options object    \u767a\u4fe1\u6642\u306b\u4ed8\u4e0e\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3059\u3002\u5e2f\u57df\u5e45\u30fb\u30b3\u30fc\u30c7\u30c3\u30af\u306a\u3069\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002", 
            "title": "Parameters"
        }, 
        {
            "location": "/ja/peer/#call-options-object", 
            "text": "Name  Type  Required  Default  Description      metadata  object    \u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u306b\u95a2\u9023\u4ed8\u3051\u3055\u308c\u308b\u4efb\u610f\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\u3067\u3001\u63a5\u7d9a\u5148\u306ePeer\u306b\u6e21\u3055\u308c\u307e\u3059\u3002    videoBandwidth  number    \u63a5\u7d9a\u5148\u304b\u3089\u53d7\u4fe1\u3059\u308b\u6620\u50cf\u306e\u6700\u5927\u5e2f\u57df\u5e45(kbps)\u3067\u3059\u3002    audioBandwidth  number    \u63a5\u7d9a\u5148\u304b\u3089\u53d7\u4fe1\u3059\u308b\u97f3\u58f0\u306e\u6700\u5927\u5e2f\u57df\u5e45(kbps)\u3067\u3059\u3002    videoCodec  string    'H264'\u306a\u3069\u306e\u6620\u50cf\u30b3\u30fc\u30c7\u30c3\u30af\u3067\u3059\u3002    audioCodec  string    'PCMU'\u306a\u3069\u306e\u97f3\u58f0\u30b3\u30fc\u30c7\u30c3\u30af\u3067\u3059\u3002    videoReceiveEnabled  boolean    \u6620\u50cf\u3092\u53d7\u4fe1\u306e\u307f\u3067\u4f7f\u3046\u5834\u5408\u306e\u30d5\u30e9\u30b0\u3067\u3059\u3002    audioReceiveEnabled  boolean    \u97f3\u58f0\u3092\u53d7\u4fe1\u306e\u307f\u3067\u4f7f\u3046\u5834\u5408\u306e\u30d5\u30e9\u30b0\u3067\u3059\u3002    label  string    Deprecated!  \u63a5\u7d9a\u5148\u306ePeer ID\u3092\u8b58\u5225\u3059\u308b\u306e\u306b\u5229\u7528\u3059\u308b\u30e9\u30d9\u30eb\u3067\u3059\u3002", 
            "title": "call options object"
        }, 
        {
            "location": "/ja/peer/#return-value", 
            "text": "MediaConnection \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9", 
            "title": "Return value"
        }, 
        {
            "location": "/ja/peer/#sample_1", 
            "text": "// \u81ea\u8eab\u306elocalStream\u3092\u8a2d\u5b9a\u3057\u3066\u3001\u76f8\u624b\u306b\u767a\u4fe1\u3059\u308b\u5834\u5408  const   call   =   peer . call ( peerID ,   localStream );   // \u81ea\u8eab\u306elocalStream\u304a\u3088\u3073metadata\u3092\u8a2d\u5b9a\u3057\u3066\u3001\u76f8\u624b\u306b\u767a\u4fe1\u3059\u308b\u5834\u5408  const   call   =   peer . call ( peerID ,   localStream ,   { \n   metadata :   { \n     foo :   bar , \n   }  });   // \u6620\u50cf\u30b3\u30fc\u30c7\u30c3\u30af\u3068\u3057\u3066H264\u3092\u5229\u7528\u3059\u308b\u5834\u5408  const   call   =   peer . call ( peerID ,   localStream ,   { \n   videoCodec :   H264 ,  });   // \u97f3\u58f0\u306e\u307f\u63a5\u7d9a\u5148\u304b\u3089\u53d7\u4fe1\u3059\u308b\u8a2d\u5b9a\u3067\u3001\u76f8\u624b\u306b\u767a\u4fe1\u3059\u308b\u5834\u5408  const   call   =   peer . call ( peerID ,   { \n   audioReceiveEnabled :   true ,  });", 
            "title": "Sample"
        }, 
        {
            "location": "/ja/peer/#connect", 
            "text": "\u6307\u5b9a\u3057\u305fPeer\u306b\u30c7\u30fc\u30bf\u30c1\u30e3\u30cd\u30eb\u3067\u63a5\u7d9a\u3057\u3066\u3001DataConnection\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u307e\u3059\u3002", 
            "title": "connect"
        }, 
        {
            "location": "/ja/peer/#parameters_1", 
            "text": "Name  Type  Required  Default  Description      peerId  string  \u2714   \u63a5\u7d9a\u5148\u306ePeer ID\u3067\u3059\u3002    options  connect options object    \u63a5\u7d9a\u6642\u306b\u4ed8\u4e0e\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3059\u3002", 
            "title": "Parameters"
        }, 
        {
            "location": "/ja/peer/#connect-options-object", 
            "text": "Name  Type  Required  Default  Description      metadata  object    \u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u306b\u95a2\u9023\u4ed8\u3051\u3055\u308c\u308b\u4efb\u610f\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\u3067\u3001\u63a5\u7d9a\u5148\u306ePeer\u306b\u6e21\u3055\u308c\u307e\u3059\u3002    serialization  string    \u9001\u4fe1\u6642\u306e\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u65b9\u6cd5\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002'binary'\u3001'json'\u3001'none'\u306e\u3044\u305a\u308c\u304b\u3001\u3068\u306a\u308a\u307e\u3059\u3002    dcInit  RTCDataChannelInit Object    DataChannel\u5229\u7528\u6642\u306b\u4fe1\u983c\u6027\u306e\u6709\u7121\u3092\u6307\u5b9a\u3059\u308b\u305f\u3081\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u4fe1\u983c\u6027\u6709\u3067\u52d5\u4f5c\u3057\u307e\u3059\u3002\u306a\u304a\u3001chrome\u306f\u3001 maxPacketLifetime  \u306e\u4ee3\u308f\u308a\u306b\u3001 maxRetransmitTime  \u3092\u5229\u7528\u3057\u307e\u3059\u3002    label  string    Deprecated!  \u63a5\u7d9a\u5148\u306ePeer ID\u3092\u8b58\u5225\u3059\u308b\u306e\u306b\u5229\u7528\u3059\u308b\u30e9\u30d9\u30eb\u3067\u3059\u3002", 
            "title": "connect options object"
        }, 
        {
            "location": "/ja/peer/#return-value_1", 
            "text": "DataConnection \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9", 
            "title": "Return value"
        }, 
        {
            "location": "/ja/peer/#sample_2", 
            "text": "// \u5358\u306bDataChannel\u3092\u63a5\u7d9a\u3059\u308b\u5834\u5408(\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u4fe1\u983c\u6027\u6709\u308a)  peer . connect ( peerId );   // metadata\u4ed8\u304d\u3067connect\u3059\u308b\u5834\u5408  peer . connect ( peerId ,   { \n   metadata :   { \n     hoge :   foobar , \n   }  });   // \u4fe1\u983c\u6027\u7121\u3057\u30e2\u30fc\u30c9\u3067DataChannel\u3092\u63a5\u7d9a\u3059\u308b\u5834\u5408  peer . connect ( peerId ,   { \n   dcInit :   { \n     // \u6700\u59272\u56de\u3001\u518d\u9001\u3059\u308b \n     maxRetransmits :   2 , \n   },  });", 
            "title": "Sample"
        }, 
        {
            "location": "/ja/peer/#destroy", 
            "text": "\u5168\u3066\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u9589\u3058\u3001\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u3078\u306e\u63a5\u7d9a\u3092\u5207\u65ad\u3057\u307e\u3059\u3002", 
            "title": "destroy"
        }, 
        {
            "location": "/ja/peer/#parameters_2", 
            "text": "None", 
            "title": "Parameters"
        }, 
        {
            "location": "/ja/peer/#return-value_2", 
            "text": "undefined", 
            "title": "Return value"
        }, 
        {
            "location": "/ja/peer/#sample_3", 
            "text": "peer . destroy ();", 
            "title": "Sample"
        }, 
        {
            "location": "/ja/peer/#disconnect", 
            "text": "\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u3078\u306e\u63a5\u7d9a\u3092\u9589\u3058\u3001disconnected\u30a4\u30d9\u30f3\u30c8\u3092\u9001\u51fa\u3057\u307e\u3059\u3002", 
            "title": "disconnect"
        }, 
        {
            "location": "/ja/peer/#parameters_3", 
            "text": "None", 
            "title": "Parameters"
        }, 
        {
            "location": "/ja/peer/#return-value_3", 
            "text": "undefined", 
            "title": "Return value"
        }, 
        {
            "location": "/ja/peer/#sample_4", 
            "text": "peer . disconnect ();", 
            "title": "Sample"
        }, 
        {
            "location": "/ja/peer/#joinroom", 
            "text": "\u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u306e\u30eb\u30fc\u30e0\u3001\u307e\u305f\u306fSFU\u63a5\u7d9a\u306e\u30eb\u30fc\u30e0\u306b\u53c2\u52a0\u3057\u307e\u3059\u3002\u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u304a\u3088\u3073SFU\u63a5\u7d9a\u306b\u3064\u3044\u3066\u306f \u30b3\u30c1\u30e9 \u3092\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002", 
            "title": "joinRoom"
        }, 
        {
            "location": "/ja/peer/#parameters_4", 
            "text": "Name  Type  Rquired  Default  Description      roomName  string  \u2714   \u53c2\u52a0\u5148\u306e\u30eb\u30fc\u30e0\u306e\u540d\u524d\u3067\u3059\u3002    roomOptions  room options object   \u63a5\u7d9a\u6642\u306b\u9078\u629e\u30fb\u4ed8\u4e0e\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3059\u3002", 
            "title": "Parameters"
        }, 
        {
            "location": "/ja/peer/#room-options-object", 
            "text": "Name  Type  Required  Default  Description      mode  string   'mesh'  'sfu'\u307e\u305f\u306f'mesh'\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002    stream  MediaStream    \u30e6\u30fc\u30b6\u30fc\u304c\u9001\u4fe1\u3059\u308b\u30e1\u30c7\u30a3\u30a2\u30b9\u30c8\u30ea\u30fc\u30e0\u3067\u3059\u3002    videoBandwidth  number    \u6620\u50cf\u306e\u6700\u5927\u5e2f\u57df\u5e45(kbps)\u3067\u3059\u3002\u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u306e\u307f\u4f7f\u7528\u53ef\u80fd\u3067\u3059\u3002    audioBandwidth  number    \u97f3\u58f0\u306e\u6700\u5927\u5e2f\u57df\u5e45(kbps)\u3067\u3059\u3002 \u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u306e\u307f\u4f7f\u7528\u53ef\u80fd\u3067\u3059\u3002    videoCodec  string    'H264'\u306a\u3069\u306e\u6620\u50cf\u30b3\u30fc\u30c7\u30c3\u30af\u3067\u3059\u3002 \u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u306e\u307f\u4f7f\u7528\u53ef\u80fd\u3067\u3059\u3002    audioCodec  string    'PCMU'\u306a\u3069\u306e\u97f3\u58f0\u30b3\u30fc\u30c7\u30c3\u30af\u3067\u3059\u3002\u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u306e\u307f\u4f7f\u7528\u53ef\u80fd\u3067\u3059\u3002    videoReceiveEnabled  boolean    \u6620\u50cf\u3092\u53d7\u4fe1\u306e\u307f\u3067\u4f7f\u3046\u5834\u5408\u306e\u30d5\u30e9\u30b0\u3067\u3059\u3002\u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u306e\u307f\u4f7f\u7528\u53ef\u80fd\u3067\u3059\u3002    audioReceiveEnabled  boolean    \u97f3\u58f0\u3092\u53d7\u4fe1\u306e\u307f\u3067\u4f7f\u3046\u5834\u5408\u306e\u30d5\u30e9\u30b0\u3067\u3059\u3002\u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u306e\u307f\u4f7f\u7528\u53ef\u80fd\u3067\u3059\u3002", 
            "title": "room options object"
        }, 
        {
            "location": "/ja/peer/#return-value_4", 
            "text": "SFURoom  \u307e\u305f\u306f  MeshRoom  \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9", 
            "title": "Return value"
        }, 
        {
            "location": "/ja/peer/#sample_5", 
            "text": "// Mesh\u63a5\u7d9a\u3092\u5229\u7528\u3059\u308b\u5834\u5408  const   room   =   peer . joinRoom ( roomName ,   { \n   mode :   mesh ,  \n   stream :   localStream ,  });   // SFU\u63a5\u7d9a\u3092\u5229\u7528\u3059\u308b\u5834\u5408  const   room   =   peer . joinRoom ( roomName ,   { \n   mode :   sfu ,  \n   stream :   localStream ,  });", 
            "title": "Sample"
        }, 
        {
            "location": "/ja/peer/#listallpeers", 
            "text": "REST API\u3092\u5229\u7528\u3057\u3066\u3001API\u30ad\u30fc\u306b\u7d10\u3065\u304fPeerID\u4e00\u89a7\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002", 
            "title": "listAllPeers"
        }, 
        {
            "location": "/ja/peer/#parameters_5", 
            "text": "None", 
            "title": "Parameters"
        }, 
        {
            "location": "/ja/peer/#return-value_5", 
            "text": "undefined", 
            "title": "Return value"
        }, 
        {
            "location": "/ja/peer/#sample_6", 
            "text": "peer . listAllPeers ( peers   =   { \n   console . log ( peers ) \n   // =  [ yNtQkNyjAojJNGrt ,  EzAmgFhCKBQMzKw9 ]  });", 
            "title": "Sample"
        }, 
        {
            "location": "/ja/peer/#updatecredential", 
            "text": "Peer\u8a8d\u8a3c\u306e\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u306eTTL\u3092\u5ef6\u9577\u3059\u308b\u305f\u3081\u306e\u66f4\u65b0\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u9001\u4ed8\u3057\u307e\u3059\u3002\nPeer\u8a8d\u8a3c\u306b\u3064\u3044\u3066\u306f\u3001 \u30b3\u30c1\u30e9 \u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002", 
            "title": "updateCredential"
        }, 
        {
            "location": "/ja/peer/#parameters_6", 
            "text": "Name  Type  Required  Default  Description      mode  credential object  \u2714   \u30e6\u30fc\u30b6\u30fc\u5074\u3067\u4f5c\u6210\u3059\u308b\u65b0\u3057\u3044\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u3067\u3059\u3002", 
            "title": "Parameters"
        }, 
        {
            "location": "/ja/peer/#credential-object_1", 
            "text": "Name  Type  Optional  Default  Description      timestamp  number  \u2714   \u73fe\u5728\u306eUNIX\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u3067\u3059\u3002    ttl  number  \u2714   Time to live(ttl)\u3002\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7 + ttl \u306e\u6642\u9593\u3067\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u304c\u5931\u52b9\u3057\u307e\u3059\u3002    authToken  string  \u2714  Default  HMAC\u3092\u5229\u7528\u3057\u3066\u751f\u6210\u3059\u308b\u8a8d\u8a3c\u7528\u30c8\u30fc\u30af\u30f3\u3067\u3059\u3002", 
            "title": "credential object"
        }, 
        {
            "location": "/ja/peer/#return-value_6", 
            "text": "undefined", 
            "title": "Return value"
        }, 
        {
            "location": "/ja/peer/#events", 
            "text": "", 
            "title": "Events"
        }, 
        {
            "location": "/ja/peer/#open", 
            "text": "\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u3078\u6b63\u5e38\u306b\u63a5\u7d9a\u3067\u304d\u305f\u3068\u304d\u306e\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002     Type  Description      string  Peer ID", 
            "title": "open"
        }, 
        {
            "location": "/ja/peer/#sample_7", 
            "text": "peer . on ( open ,   id   =   { \n   console . log ( id );  })", 
            "title": "Sample"
        }, 
        {
            "location": "/ja/peer/#call_1", 
            "text": "\u63a5\u7d9a\u5148\u306ePeer\u304b\u3089\u30e1\u30c7\u30a3\u30a2\u30c1\u30e3\u30cd\u30eb(\u97f3\u58f0\u30fb\u6620\u50cf)\u306e\u63a5\u7d9a\u3092\u53d7\u4fe1\u3057\u305f\u3068\u304d\u306e\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002     Type  Description      MediaConnection  MediaConnection\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\u3002", 
            "title": "call"
        }, 
        {
            "location": "/ja/peer/#sample_8", 
            "text": "peer . on ( call ,   call   =   { \n   // \u7740\u4fe1\u5074\u306e\u30e1\u30c7\u30a3\u30a2\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u8a2d\u5b9a\u3057\u3066\u5fdc\u7b54 \n   call . answer ( mediaStream );  });", 
            "title": "Sample"
        }, 
        {
            "location": "/ja/peer/#close", 
            "text": "Peer\u306b\u5bfe\u3059\u308b\u5168\u3066\u306e\u63a5\u7d9a\u3092\u7d42\u4e86\u3057\u305f\u3068\u304d\u306e\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002", 
            "title": "close"
        }, 
        {
            "location": "/ja/peer/#connection", 
            "text": "\u63a5\u7d9a\u5148\u306ePeer\u304b\u3089DataChannel\u306e\u63a5\u7d9a\u3092\u53d7\u4fe1\u3057\u305f\u3068\u304d\u306e\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002     Type  Description      DataConnection  DataConnection\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\u3002", 
            "title": "connection"
        }, 
        {
            "location": "/ja/peer/#sample_9", 
            "text": "peer . on ( connection ,   connection   =   { \n   console . log ( connection );  });", 
            "title": "sample"
        }, 
        {
            "location": "/ja/peer/#disconnected", 
            "text": "\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u304b\u3089\u5207\u65ad\u3057\u305f\u3068\u304d\u306e\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002     Type  Description      string  Peer ID", 
            "title": "disconnected"
        }, 
        {
            "location": "/ja/peer/#expiresin", 
            "text": "\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u304c\u5931\u52b9\u3059\u308b\u524d\u306b\u767a\u751f\u3059\u308b\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002     Type  Description      number  \u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u304c\u5931\u52b9\u3059\u308b\u307e\u3067\u306e\u6642\u9593(\u79d2)\u3067\u3059\u3002", 
            "title": "expiresin"
        }, 
        {
            "location": "/ja/peer/#error", 
            "text": "\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306e\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002     Type  Description      room-error  \u30eb\u30fc\u30e0\u540d\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u307e\u305b\u3093     \u30eb\u30fc\u30e0\u30bf\u30a4\u30d7\u304c\u7570\u306a\u308a\u307e\u3059\u3002(\u30e1\u30c3\u30b7\u30e5\u30eb\u30fc\u30e0\u3068\u3057\u3066\u4f5c\u6210\u3057\u305f\u90e8\u5c4b\u306b\u3001SFU\u30eb\u30fc\u30e0\u6307\u5b9a\u3067\u53c2\u52a0\u3057\u305f\u5834\u5408)     SFU\u6a5f\u80fd\u304c\u8a72\u5f53\u306eAPI\u30ad\u30fc\u3067Disabled\u3067\u3059\u3002\u5229\u7528\u3059\u308b\u306b\u306f\u3001Dashboard\u304b\u3089enable\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002     \u4e0d\u660e\u306a\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f\u3002\u5c11\u3057\u5f85\u3063\u3066\u3001\u30ea\u30c8\u30e9\u30a4\u3057\u3066\u304f\u3060\u3055\u3044\u3002     \u30eb\u30fc\u30e0\u30ed\u30b0\u53d6\u5f97\u6642\u306b\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f\u3002\u5c11\u3057\u5f85\u3063\u3066\u3001\u30ea\u30c8\u30e9\u30a4\u3057\u3066\u304f\u3060\u3055\u3044\u3002    authentication  \u6307\u5b9a\u3055\u308c\u305f\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u3092\u7528\u3044\u305f\u8a8d\u8a3c\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002    permission  \u8a72\u5f53\u306e\u30eb\u30fc\u30e0\u306e\u5229\u7528\u304c\u8a31\u53ef\u3055\u308c\u3066\u307e\u305b\u3093\u3002    list-error  API\u30ad\u30fc\u306eREST API\u304c\u8a31\u53ef\u3055\u308c\u3066\u307e\u305b\u3093\u3002    disconnected  SkyWay\u306e\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002    socket-error  SkyWay\u306e\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u3068\u306e\u63a5\u7d9a\u304c\u5931\u308f\u308c\u307e\u3057\u305f\u3002    invalid-id  ID\u304c\u4e0d\u6b63\u3067\u3059\u3002    invalid-key  API\u30ad\u30fc\u304c\u7121\u52b9\u3067\u3059\u3002    server-error  SkyWay\u306e\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u304b\u3089Peer\u4e00\u89a7\u3092\u53d6\u5f97\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002", 
            "title": "error"
        }, 
        {
            "location": "/ja/peer/#sample_10", 
            "text": "// \u4eee\u306bRoom\u540d\u3092\u6307\u5b9a\u305b\u305a\u306bjoinRoom\u3092\u547c\u3093\u3060\u5834\u5408  peer . on ( error ,   error   =   { \n   console . log ( ` ${ error . type } :  ${ error . message } ` ); \n   // =  room-error: Room name must be defined.  });", 
            "title": "Sample"
        }, 
        {
            "location": "/ja/mediaconnection/", 
            "text": "\u63a5\u7d9a\u5148Peer\u3078\u306e\u30e1\u30c7\u30a3\u30a2\u30c1\u30e3\u30cd\u30eb\u63a5\u7d9a\u3092\u7ba1\u7406\u3059\u308b\u30af\u30e9\u30b9\u3067\u3059\u3002\n\n\nConstructor\n\n\nSDK\u5185\u90e8\u306e\u5229\u7528\u306e\u307f\u3067\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u901a\u5e38\u5229\u7528\u3057\u307e\u305b\u3093\u3002 \nMediaConnection\u306f\u3001\ncall\n \u304a\u3088\u3073 \npeer.on('call')\n \u3067\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n\n\nSample\n\n\n// \u767a\u4fe1\u5074\n\n\nmediaConnection\n \n=\n \npeer1\n.\ncall\n(\npeerID\n,\n \nmediaStream\n);\n\n\n\n// \u7740\u4fe1\u5074\n\n\npeer2\n.\non\n(\ncall\n,\n \ncall\n \n=\n \n{\n\n  \n// peer2\u306e\u6301\u3064\u30e1\u30c7\u30a3\u30a2\u30b9\u30c8\u30ea\u30fc\u30e0\u3067\u5fdc\u7b54\u3059\u308b\n\n  \ncall\n.\nanswer\n(\nmediaStream2\n)\n\n\n});\n\n\n\n\n\n\nMembers\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmetadata\n\n\nobject\n\n\n\u4efb\u610f\u306e\u60c5\u5831\u3092\u683c\u7d0d\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002\n\n\n\n\n\n\nopen\n\n\nboolean\n\n\n\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u304c\u30aa\u30fc\u30d7\u30f3\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u793a\u3057\u307e\u3059\u3002\n\n\n\n\n\n\nremoteId\n\n\nstring\n\n\n\u63a5\u7d9a\u5148\u306ePeerID\u3067\u3059\u3002\n\n\n\n\n\n\npeer\n\n\nstring\n\n\nDeprecated\n \u63a5\u7d9a\u5148\u306ePeerID\u3067\u3059\u3002remoteId\u3092\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\n\n\n\n\n\n\n\nSample\n\n\n// \u63a5\u7d9a\u5143\u304c metadata: { foo: \nbar\n } \u3092\u8a2d\u5b9a\u3057\u305f\u5834\u5408\n\n\npeer\n.\non\n(\ncall\n,\n \ncall\n \n=\n \n{\n\n  \nconsole\n.\nlog\n(\ncall\n.\nmetadata\n);\n\n  \n// =\n {foo: \nbar\n}\n\n\n});\n\n\n\n\n\n\nMethods\n\n\nanswer\n\n\n\u63a5\u7d9a\u76f8\u624b\u304b\u3089\u306e\u63a5\u7d9a\u8981\u6c42\u306b\u5bfe\u3057\u3066\u5fdc\u7b54\u3057\u307e\u3059\u3002\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequire\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstream\n\n\nMediaStream\n\n\n\u2605\n\n\n\n\n\u30ea\u30e2\u30fc\u30c8\u306ePeer\u3078\u9001\u308b\u30e1\u30c7\u30a3\u30a2\u30b9\u30c8\u30ea\u30fc\u30e0\u3067\u3059\u3002\n\n\n\n\n\n\noptions\n\n\nanswer options object\n\n\n\n\n\n\n\u5fdc\u7b54\u6642\u306b\u4ed8\u4e0e\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3059\u3002\u5e2f\u57df\u5e45\u30fb\u30b3\u30fc\u30c7\u30c3\u30af\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n\n\n\n\n\n\n\nanswer options object\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvideoBandwidth\n\n\nnumber\n\n\n\n\n\n\n\u63a5\u7d9a\u5148\u304b\u3089\u53d7\u4fe1\u3059\u308b\u6620\u50cf\u306e\u6700\u5927\u5e2f\u57df\u5e45(kbps)\u3067\u3059\u3002\n\n\n\n\n\n\naudioBandwidth\n\n\nnumber\n\n\n\n\n\n\n\u63a5\u7d9a\u5148\u304b\u3089\u53d7\u4fe1\u3059\u308b\u97f3\u58f0\u306e\u6700\u5927\u5e2f\u57df\u5e45(kbps)\u3067\u3059\u3002\n\n\n\n\n\n\nvideoCodec\n\n\nstring\n\n\n\n\n\n\n'H264'\u306a\u3069\u306e\u6620\u50cf\u30b3\u30fc\u30c7\u30c3\u30af\u3067\u3059\u3002\n\n\n\n\n\n\naudioCodec\n\n\nstring\n\n\n\n\n\n\n'PCMU'\u306a\u3069\u306e\u97f3\u58f0\u30b3\u30fc\u30c7\u30c3\u30af\u3067\u3059\u3002\n\n\n\n\n\n\n\n\nReturn value\n\n\nundefined\n\n\nSample\n\n\n// \u76f8\u624b\u304b\u3089\u767a\u4fe1\u3092\u53d7\u3051\u3066\n\n\npeer\n.\non\n(\ncall\n,\n \ncall\n \n=\n \n{\n\n  \ncall\n.\nanswer\n(\nmediaStream\n);\n\n\n});\n\n\n\n\n\n\nclose\n\n\n\u63a5\u7d9a\u5148Peer\u3068\u306eMediaConnection\u3092\u63a5\u7d9a\u3092\u5207\u65ad\u3057\u307e\u3059\u3002\n\n\nParameters\n\n\nNone\n\n\nReturn value\n\n\nundefined\n\n\nSample\n\n\ncall\n.\nclose\n();\n\n\n\n\n\n\nreplaceStream\n\n\n\u9001\u4fe1\u3057\u3066\u3044\u308bMediaStream\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002\u53d7\u4fe1\u306e\u307f\u30e2\u30fc\u30c9\u304b\u3089\u53cc\u65b9\u5411\u306b\u5207\u308a\u66ff\u3048\u3067\u304d\u307e\u3059\u3002\n\u307e\u305f\u3001\u97f3\u58f0\u306e\u307f\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u304b\u3089\u3001\u97f3\u58f0\uff0b\u6620\u50cf\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3078\u306e\u5909\u66f4\u3082\u3067\u304d\u307e\u3059\u3002\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nOptional\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstream\n\n\nMediaStream\n\n\n\n\n\n\n\u4ea4\u63db\u5bfe\u8c61\u3068\u306a\u308b\u65b0\u3057\u3044MediaStream\u3067\u3059\u3002\n\n\n\n\n\n\n\n\nReturn value\n\n\nundefined\n\n\nSample\n\n\n// newStream\n\n\ncall\n.\nreplaceStream\n(\nnewStream\n);\n\n\n\n\n\n\nEvents\n\n\nstream\n\n\nMediaStream\u3092\u53d7\u4fe1\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nMediaStream\n\n\nMediaStream\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\u3002\n\n\n\n\n\n\n\n\nSample\n\n\ncall\n.\non\n(\nstream\n,\n \nstream\n \n=\n \n{\n\n  \nconsole\n.\nlog\n(\nstream\n);\n\n\n});\n\n\n\n\n\n\nclose\n\n\nMediaConnection\u304c\u5207\u65ad\u3055\u308c\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002\n\n\nremoveStream\n\n\nMediaStream\n\u304c\u524a\u9664\u3055\u308c\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nMediaStream\n\n\nMediaStream\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\u3002", 
            "title": "MediaConnection"
        }, 
        {
            "location": "/ja/mediaconnection/#constructor", 
            "text": "SDK\u5185\u90e8\u306e\u5229\u7528\u306e\u307f\u3067\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u901a\u5e38\u5229\u7528\u3057\u307e\u305b\u3093\u3002 \nMediaConnection\u306f\u3001 call  \u304a\u3088\u3073  peer.on('call')  \u3067\u751f\u6210\u3055\u308c\u307e\u3059\u3002", 
            "title": "Constructor"
        }, 
        {
            "location": "/ja/mediaconnection/#sample", 
            "text": "// \u767a\u4fe1\u5074  mediaConnection   =   peer1 . call ( peerID ,   mediaStream );  // \u7740\u4fe1\u5074  peer2 . on ( call ,   call   =   { \n   // peer2\u306e\u6301\u3064\u30e1\u30c7\u30a3\u30a2\u30b9\u30c8\u30ea\u30fc\u30e0\u3067\u5fdc\u7b54\u3059\u308b \n   call . answer ( mediaStream2 )  });", 
            "title": "Sample"
        }, 
        {
            "location": "/ja/mediaconnection/#members", 
            "text": "Name  Type  Description      metadata  object  \u4efb\u610f\u306e\u60c5\u5831\u3092\u683c\u7d0d\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002    open  boolean  \u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u304c\u30aa\u30fc\u30d7\u30f3\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u793a\u3057\u307e\u3059\u3002    remoteId  string  \u63a5\u7d9a\u5148\u306ePeerID\u3067\u3059\u3002    peer  string  Deprecated  \u63a5\u7d9a\u5148\u306ePeerID\u3067\u3059\u3002remoteId\u3092\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002", 
            "title": "Members"
        }, 
        {
            "location": "/ja/mediaconnection/#sample_1", 
            "text": "// \u63a5\u7d9a\u5143\u304c metadata: { foo:  bar  } \u3092\u8a2d\u5b9a\u3057\u305f\u5834\u5408  peer . on ( call ,   call   =   { \n   console . log ( call . metadata ); \n   // =  {foo:  bar }  });", 
            "title": "Sample"
        }, 
        {
            "location": "/ja/mediaconnection/#methods", 
            "text": "", 
            "title": "Methods"
        }, 
        {
            "location": "/ja/mediaconnection/#answer", 
            "text": "\u63a5\u7d9a\u76f8\u624b\u304b\u3089\u306e\u63a5\u7d9a\u8981\u6c42\u306b\u5bfe\u3057\u3066\u5fdc\u7b54\u3057\u307e\u3059\u3002", 
            "title": "answer"
        }, 
        {
            "location": "/ja/mediaconnection/#parameters", 
            "text": "Name  Type  Require  Default  Description      stream  MediaStream  \u2605   \u30ea\u30e2\u30fc\u30c8\u306ePeer\u3078\u9001\u308b\u30e1\u30c7\u30a3\u30a2\u30b9\u30c8\u30ea\u30fc\u30e0\u3067\u3059\u3002    options  answer options object    \u5fdc\u7b54\u6642\u306b\u4ed8\u4e0e\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3059\u3002\u5e2f\u57df\u5e45\u30fb\u30b3\u30fc\u30c7\u30c3\u30af\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002", 
            "title": "Parameters"
        }, 
        {
            "location": "/ja/mediaconnection/#answer-options-object", 
            "text": "Name  Type  Required  Default  Description      videoBandwidth  number    \u63a5\u7d9a\u5148\u304b\u3089\u53d7\u4fe1\u3059\u308b\u6620\u50cf\u306e\u6700\u5927\u5e2f\u57df\u5e45(kbps)\u3067\u3059\u3002    audioBandwidth  number    \u63a5\u7d9a\u5148\u304b\u3089\u53d7\u4fe1\u3059\u308b\u97f3\u58f0\u306e\u6700\u5927\u5e2f\u57df\u5e45(kbps)\u3067\u3059\u3002    videoCodec  string    'H264'\u306a\u3069\u306e\u6620\u50cf\u30b3\u30fc\u30c7\u30c3\u30af\u3067\u3059\u3002    audioCodec  string    'PCMU'\u306a\u3069\u306e\u97f3\u58f0\u30b3\u30fc\u30c7\u30c3\u30af\u3067\u3059\u3002", 
            "title": "answer options object"
        }, 
        {
            "location": "/ja/mediaconnection/#return-value", 
            "text": "undefined", 
            "title": "Return value"
        }, 
        {
            "location": "/ja/mediaconnection/#sample_2", 
            "text": "// \u76f8\u624b\u304b\u3089\u767a\u4fe1\u3092\u53d7\u3051\u3066  peer . on ( call ,   call   =   { \n   call . answer ( mediaStream );  });", 
            "title": "Sample"
        }, 
        {
            "location": "/ja/mediaconnection/#close", 
            "text": "\u63a5\u7d9a\u5148Peer\u3068\u306eMediaConnection\u3092\u63a5\u7d9a\u3092\u5207\u65ad\u3057\u307e\u3059\u3002", 
            "title": "close"
        }, 
        {
            "location": "/ja/mediaconnection/#parameters_1", 
            "text": "None", 
            "title": "Parameters"
        }, 
        {
            "location": "/ja/mediaconnection/#return-value_1", 
            "text": "undefined", 
            "title": "Return value"
        }, 
        {
            "location": "/ja/mediaconnection/#sample_3", 
            "text": "call . close ();", 
            "title": "Sample"
        }, 
        {
            "location": "/ja/mediaconnection/#replacestream", 
            "text": "\u9001\u4fe1\u3057\u3066\u3044\u308bMediaStream\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002\u53d7\u4fe1\u306e\u307f\u30e2\u30fc\u30c9\u304b\u3089\u53cc\u65b9\u5411\u306b\u5207\u308a\u66ff\u3048\u3067\u304d\u307e\u3059\u3002\n\u307e\u305f\u3001\u97f3\u58f0\u306e\u307f\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u304b\u3089\u3001\u97f3\u58f0\uff0b\u6620\u50cf\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3078\u306e\u5909\u66f4\u3082\u3067\u304d\u307e\u3059\u3002", 
            "title": "replaceStream"
        }, 
        {
            "location": "/ja/mediaconnection/#parameters_2", 
            "text": "Name  Type  Optional  Default  Description      stream  MediaStream    \u4ea4\u63db\u5bfe\u8c61\u3068\u306a\u308b\u65b0\u3057\u3044MediaStream\u3067\u3059\u3002", 
            "title": "Parameters"
        }, 
        {
            "location": "/ja/mediaconnection/#return-value_2", 
            "text": "undefined", 
            "title": "Return value"
        }, 
        {
            "location": "/ja/mediaconnection/#sample_4", 
            "text": "// newStream  call . replaceStream ( newStream );", 
            "title": "Sample"
        }, 
        {
            "location": "/ja/mediaconnection/#events", 
            "text": "", 
            "title": "Events"
        }, 
        {
            "location": "/ja/mediaconnection/#stream", 
            "text": "MediaStream\u3092\u53d7\u4fe1\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002     Type  Description      MediaStream  MediaStream\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\u3002", 
            "title": "stream"
        }, 
        {
            "location": "/ja/mediaconnection/#sample_5", 
            "text": "call . on ( stream ,   stream   =   { \n   console . log ( stream );  });", 
            "title": "Sample"
        }, 
        {
            "location": "/ja/mediaconnection/#close_1", 
            "text": "MediaConnection\u304c\u5207\u65ad\u3055\u308c\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002", 
            "title": "close"
        }, 
        {
            "location": "/ja/mediaconnection/#removestream", 
            "text": "MediaStream \u304c\u524a\u9664\u3055\u308c\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002     Type  Description      MediaStream  MediaStream\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\u3002", 
            "title": "removeStream"
        }, 
        {
            "location": "/ja/dataconnection/", 
            "text": "\u63a5\u7d9a\u5148Peer\u3078\u306e\u30c7\u30fc\u30bf\u30c1\u30e3\u30cd\u30eb\u63a5\u7d9a\u3092\u7ba1\u7406\u3059\u308b\u30af\u30e9\u30b9\u3067\u3059\u3002\n\n\nConstructor\n\n\nSDK\u5185\u90e8\u306e\u5229\u7528\u306e\u307f\u3067\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u901a\u5e38\u5229\u7528\u3057\u307e\u305b\u3093\u3002 \nDataConnection\u306f\u3001\nconnect()\n \u304a\u3088\u3073 \npeer.on('connection')\n \u3067\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n\n\nSample\n\n\n// \u767a\u4fe1\u5074\n\n\ndataConnection\n \n=\n \npeer\n.\nconnect\n(\npeerID\n);\n\n\n\n// \u7740\u4fe1\u5074\n\n\npeer\n.\non\n(\nconnection\n,\n \nconnection\n \n=\n \n{\n\n  \nconsole\n.\nlog\n(\nconnection\n);\n\n\n});\n\n\n\n\n\n\nMembers\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmetadata\n\n\nobject\n\n\n\u4efb\u610f\u306e\u60c5\u5831\u3092\u683c\u7d0d\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002\n\n\n\n\n\n\nopen\n\n\nboolean\n\n\n\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u304c\u30aa\u30fc\u30d7\u30f3\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u793a\u3057\u307e\u3059\u3002\n\n\n\n\n\n\nremoteId\n\n\nstring\n\n\n\u63a5\u7d9a\u5148\u306ePeerID\u3067\u3059\u3002\n\n\n\n\n\n\npeer\n\n\nstring\n\n\nDeprecated\n \u63a5\u7d9a\u5148\u306ePeerID\u3067\u3059\u3002remoteId\u3092\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\n\n\n\n\n\n\n\nSample\n\n\npeer\n.\non\n(\nconnection\n,\n \nconnection\n \n=\n \n{\n\n  \n// metadata\u304c\u4ed8\u4e0e\u3055\u308c\u3066\u3044\u305f\u5834\u5408\n\n  \nconsole\n.\nlog\n(\nconnection\n.\nmetadata\n);\n\n  \n// =\n connect\u6642\u306b\u4ed8\u4e0e\u3057\u305f\u3001metadata\u3092\u53c2\u7167\u3059\u308b\n\n\n});\n\n\n\n\n\n\nMethods\n\n\nsend\n\n\n\u63a5\u7d9a\u5148\u306ePeer\u306b\u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3057\u307e\u3059\u3002\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u65b9\u6cd5\u304c'binary'\u3067\u3042\u308b\u5834\u5408\u306f\u3001\u9001\u4fe1\u524d\u306b\u5206\u5272\u3057\u307e\u3059\u3002\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndata\n\n\n*\n\n\n\u2714\n\n\n\n\n\u63a5\u7d9a\u5148\u306ePeer\u306b\u9001\u308b\u30c7\u30fc\u30bf\u3067\u3059\u3002\n\n\n\n\n\n\n\n\nReturn value\n\n\nundefined\n\n\nSample\n\n\n// \nhello world\n\u3068\u3044\u3046\u6587\u5b57\u5217\u3092\u9001\u4ed8\u3057\u307e\u3059\u3002 \n\n\ndataConnection\n.\nsend\n(\nhello world\n);\n\n\n\n// \u53d7\u4fe1\u5074\u3067\u306f\u3001\u6b21\u306e\u3088\u3046\u306b\u767a\u706b\u3057\u307e\u3059\u3002\n\n\ndataConnection\n.\non\n(\ndata\n,\n \ndata\n \n=\n \n{\n\n  \nconsole\n.\nlog\n(\nhello world\n);\n\n  \n// =\n \nhello world\n\n\n});\n\n\n\n\n\n\nclose\n\n\n\u63a5\u7d9a\u5148Peer\u3068\u306eMediaConnection\u3092\u63a5\u7d9a\u3092\u5207\u65ad\u3057\u307e\u3059\u3002\n\n\nParameters\n\n\nNone\n\n\nReturn value\n\n\nundefined\n\n\nSample\n\n\ncall\n.\nclose\n();\n\n\n\n\n\n\nEvents\n\n\ndata\n\n\n\u30c7\u30fc\u30bf\u3092\u53d7\u4fe1\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n*\n\n\n\u53d7\u4fe1\u3057\u305f\u30c7\u30fc\u30bf\u3067\u3059\u3002\n\n\n\n\n\n\n\n\nSample\n\n\ndataConnection\n.\non\n(\ndata\n,\n \ndata\n \n=\n \n{\n\n  \nconsole\n.\nlog\n(\nhello world\n);\n\n  \n// =\n \nhello world\n\n\n});\n\n\n\n\n\n\nclose\n\n\nDataConnection\u304c\u5207\u65ad\u3055\u308c\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002", 
            "title": "DataConnection"
        }, 
        {
            "location": "/ja/dataconnection/#constructor", 
            "text": "SDK\u5185\u90e8\u306e\u5229\u7528\u306e\u307f\u3067\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u901a\u5e38\u5229\u7528\u3057\u307e\u305b\u3093\u3002 \nDataConnection\u306f\u3001 connect()  \u304a\u3088\u3073  peer.on('connection')  \u3067\u751f\u6210\u3055\u308c\u307e\u3059\u3002", 
            "title": "Constructor"
        }, 
        {
            "location": "/ja/dataconnection/#sample", 
            "text": "// \u767a\u4fe1\u5074  dataConnection   =   peer . connect ( peerID );  // \u7740\u4fe1\u5074  peer . on ( connection ,   connection   =   { \n   console . log ( connection );  });", 
            "title": "Sample"
        }, 
        {
            "location": "/ja/dataconnection/#members", 
            "text": "Name  Type  Description      metadata  object  \u4efb\u610f\u306e\u60c5\u5831\u3092\u683c\u7d0d\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002    open  boolean  \u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u304c\u30aa\u30fc\u30d7\u30f3\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u793a\u3057\u307e\u3059\u3002    remoteId  string  \u63a5\u7d9a\u5148\u306ePeerID\u3067\u3059\u3002    peer  string  Deprecated  \u63a5\u7d9a\u5148\u306ePeerID\u3067\u3059\u3002remoteId\u3092\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002", 
            "title": "Members"
        }, 
        {
            "location": "/ja/dataconnection/#sample_1", 
            "text": "peer . on ( connection ,   connection   =   { \n   // metadata\u304c\u4ed8\u4e0e\u3055\u308c\u3066\u3044\u305f\u5834\u5408 \n   console . log ( connection . metadata ); \n   // =  connect\u6642\u306b\u4ed8\u4e0e\u3057\u305f\u3001metadata\u3092\u53c2\u7167\u3059\u308b  });", 
            "title": "Sample"
        }, 
        {
            "location": "/ja/dataconnection/#methods", 
            "text": "", 
            "title": "Methods"
        }, 
        {
            "location": "/ja/dataconnection/#send", 
            "text": "\u63a5\u7d9a\u5148\u306ePeer\u306b\u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3057\u307e\u3059\u3002\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u65b9\u6cd5\u304c'binary'\u3067\u3042\u308b\u5834\u5408\u306f\u3001\u9001\u4fe1\u524d\u306b\u5206\u5272\u3057\u307e\u3059\u3002", 
            "title": "send"
        }, 
        {
            "location": "/ja/dataconnection/#parameters", 
            "text": "Name  Type  Required  Default  Description      data  *  \u2714   \u63a5\u7d9a\u5148\u306ePeer\u306b\u9001\u308b\u30c7\u30fc\u30bf\u3067\u3059\u3002", 
            "title": "Parameters"
        }, 
        {
            "location": "/ja/dataconnection/#return-value", 
            "text": "undefined", 
            "title": "Return value"
        }, 
        {
            "location": "/ja/dataconnection/#sample_2", 
            "text": "//  hello world \u3068\u3044\u3046\u6587\u5b57\u5217\u3092\u9001\u4ed8\u3057\u307e\u3059\u3002   dataConnection . send ( hello world );  // \u53d7\u4fe1\u5074\u3067\u306f\u3001\u6b21\u306e\u3088\u3046\u306b\u767a\u706b\u3057\u307e\u3059\u3002  dataConnection . on ( data ,   data   =   { \n   console . log ( hello world ); \n   // =   hello world  });", 
            "title": "Sample"
        }, 
        {
            "location": "/ja/dataconnection/#close", 
            "text": "\u63a5\u7d9a\u5148Peer\u3068\u306eMediaConnection\u3092\u63a5\u7d9a\u3092\u5207\u65ad\u3057\u307e\u3059\u3002", 
            "title": "close"
        }, 
        {
            "location": "/ja/dataconnection/#parameters_1", 
            "text": "None", 
            "title": "Parameters"
        }, 
        {
            "location": "/ja/dataconnection/#return-value_1", 
            "text": "undefined", 
            "title": "Return value"
        }, 
        {
            "location": "/ja/dataconnection/#sample_3", 
            "text": "call . close ();", 
            "title": "Sample"
        }, 
        {
            "location": "/ja/dataconnection/#events", 
            "text": "", 
            "title": "Events"
        }, 
        {
            "location": "/ja/dataconnection/#data", 
            "text": "\u30c7\u30fc\u30bf\u3092\u53d7\u4fe1\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002     Type  Description      *  \u53d7\u4fe1\u3057\u305f\u30c7\u30fc\u30bf\u3067\u3059\u3002", 
            "title": "data"
        }, 
        {
            "location": "/ja/dataconnection/#sample_4", 
            "text": "dataConnection . on ( data ,   data   =   { \n   console . log ( hello world ); \n   // =   hello world  });", 
            "title": "Sample"
        }, 
        {
            "location": "/ja/dataconnection/#close_1", 
            "text": "DataConnection\u304c\u5207\u65ad\u3055\u308c\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002", 
            "title": "close"
        }, 
        {
            "location": "/ja/meshroom/", 
            "text": "\u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u3067\u306e\u30eb\u30fc\u30e0\u3092\u7ba1\u7406\u3059\u308b\u30af\u30e9\u30b9\u3067\u3059\u3002\n\n\nConstructor\n\n\nSDK\u5185\u90e8\u306e\u5229\u7528\u306e\u307f\u3067\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u901a\u5e38\u5229\u7528\u3057\u307e\u305b\u3093\u3002 \nMeshRoom\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u3001\njoinRoom()\n \u3067\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n\n\nSample\n\n\nmeshRoom\n \n=\n \npeer\n.\njoinRoom\n(\nroomName\n);\n\n\n\n\n\n\nMethods\n\n\nclose\n\n\n\u30eb\u30fc\u30e0\u3092\u9000\u51fa\u3057\u3001\u30eb\u30fc\u30e0\u5185\u306e\u3059\u3079\u3066\u306e\u30e6\u30fc\u30b6\u30fc\u3068\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092close\u3057\u307e\u3059\n\n\nParameters\n\n\nNone\n\n\nReturn value\n\n\nundefined\n\n\nSample\n\n\nroom\n.\nclose\n();\n\n\n\n\n\n\ngetLog\n\n\n\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u306b\u30eb\u30fc\u30e0\u306e\u30ed\u30b0\u53d6\u5f97\u3092\u8981\u6c42\u3057\u307e\u3059\u3002\n\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u304b\u3089\u30ed\u30b0\u3092\u53d7\u4fe1\u3059\u308b\u3068\u3001\nlog\n\u30a4\u30d9\u30f3\u30c8\u304c\u767a\u706b\u3057\u307e\u3059\u3002\n\n\nParameters\n\n\nNone\n\n\nReturn value\n\n\nundefined\n\n\nSample\n\n\nroom\n.\ngetLog\n();\n\n\n\n\n\n\nreplaceStream\n\n\n\u9001\u4fe1\u3057\u3066\u3044\u308bMediaStream\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002\u53d7\u4fe1\u306e\u307f\u30e2\u30fc\u30c9\u304b\u3089\u53cc\u65b9\u5411\u306b\u5207\u308a\u66ff\u3048\u3067\u304d\u307e\u3059\u3002\n\u307e\u305f\u3001\u97f3\u58f0\u306e\u307f\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u304b\u3089\u3001\u97f3\u58f0\uff0b\u6620\u50cf\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3078\u306e\u5909\u66f4\u3082\u3067\u304d\u307e\u3059\u3002\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstream\n\n\nMediaStream\n\n\n\n\n\n\n\u4ea4\u63db\u5bfe\u8c61\u3068\u306a\u308b\u65b0\u3057\u3044MediaStream\u3067\u3059\u3002\n\n\n\n\n\n\n\n\nReturn value\n\n\nundefined\n\n\nSample\n\n\n// newStream\n\n\nmeshRoom\n.\nreplaceStream\n(\nnewStream\n);\n\n\n\n\n\n\nsend\n\n\nWebSocket\u3092\u4f7f\u7528\u3057\u3066\u30eb\u30fc\u30e0\u5185\u306e\u5168\u3066\u306e\u30e6\u30fc\u30b6\u30fc\u306b\u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3057\u307e\u3059\u3002\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndata\n\n\n*\n\n\n\u2714\n\n\n\n\n\u9001\u4fe1\u3059\u308b\u30c7\u30fc\u30bf\u3067\u3059\u3002\n\n\n\n\n\n\n\n\nEvents\n\n\nopen\n\n\n\u65b0\u898f\u306bPeer\u304c\u30eb\u30fc\u30e0\u3078\u5165\u5ba4\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002\n\n\npeerJoin\n\n\n\u30eb\u30fc\u30e0\u306b\u65b0\u3057\u3044Peer\u304c\u53c2\u52a0\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstring\n\n\n\u53c2\u52a0\u3057\u305fPeerID\n\n\n\n\n\n\n\n\npeerLeave\n\n\n\u65b0\u898f\u306bPeer\u304c\u30eb\u30fc\u30e0\u3092\u9000\u51fa\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstring\n\n\n\u9000\u51fa\u3057\u305fPeerID\n\n\n\n\n\n\n\n\nlog\n\n\n\u30eb\u30fc\u30e0\u306e\u30ed\u30b0\u3092\u53d7\u4fe1\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nArray\n\n\n\u30ed\u30b0\u306e\u914d\u5217\u3067\u3059\n\n\n\n\n\n\n\n\nstream\n\n\n\u30eb\u30fc\u30e0\u306bJoin\u3057\u3066\u3044\u308b\u4ed6\u306e\u30e6\u30fc\u30b6\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u53d7\u4fe1\u3057\u305f\u6642\u306b\u767a\u751f\u3057\u307e\u3059\u3002\u30b9\u30c8\u30ea\u30fc\u30e0\u9001\u4fe1\u5143\u306epeerId\u306f stream.peerId \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nMediaStream\n\n\nMediaStream\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\u3002\n\n\n\n\n\n\n\n\nSample\n\n\nroom\n.\non\n(\nstream\n,\n \nstream\n \n=\n{\n\n  \n// Stream\u3092video\u30bf\u30b0\u306b\u8a2d\u5b9a\u306a\u3069\n\n\n});\n\n\n\n\n\n\ndata\n\n\n\u4ed6\u306e\u30e6\u30fc\u30b6\u30fc\u304b\u3089\u9001\u4fe1\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3092\u53d7\u4fe1\u3057\u305f\u6642\u306b\u767a\u751f\u3057\u307e\u3059\u3002\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nobject\n\n\ndata object\n\u5f62\u5f0f\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002\n\n\n\n\n\n\n\n\ndata object\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsrc\n\n\nstring\n\n\n\u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3057\u305fPeer\u306eID\u3067\u3059\u3002\n\n\n\n\n\n\ndata\n\n\n*\n\n\n\u53d7\u4fe1\u3057\u305f\u30c7\u30fc\u30bf\u3067\u3059\u3002\n\n\n\n\n\n\n\n\nclose\n\n\n\u30eb\u30fc\u30e0\u3092close\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002\n\n\nremoveStream\n\n\n\u30eb\u30fc\u30e0\u304b\u3089\nMediaStream\n\u304c\u524a\u9664\u3055\u308c\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nMediaStream\n\n\nMediaStream\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\u3002\n\n\n\n\n\n\n\n\nSample\n\n\nmeshRoom\n.\non\n(\nremoveStream\n,\n \nstream\n \n=\n \n{\n\n  \n// \u524a\u9664\u3055\u308c\u305f\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u6301\u3064PeerID\u3092\u53d6\u5f97\n\n  \nconst\n \npeerId\n \n=\n \nstream\n.\npeerId\n;\n\n\n}", 
            "title": "MeshRoom"
        }, 
        {
            "location": "/ja/meshroom/#constructor", 
            "text": "SDK\u5185\u90e8\u306e\u5229\u7528\u306e\u307f\u3067\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u901a\u5e38\u5229\u7528\u3057\u307e\u305b\u3093\u3002 \nMeshRoom\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u3001 joinRoom()  \u3067\u751f\u6210\u3055\u308c\u307e\u3059\u3002", 
            "title": "Constructor"
        }, 
        {
            "location": "/ja/meshroom/#sample", 
            "text": "meshRoom   =   peer . joinRoom ( roomName );", 
            "title": "Sample"
        }, 
        {
            "location": "/ja/meshroom/#methods", 
            "text": "", 
            "title": "Methods"
        }, 
        {
            "location": "/ja/meshroom/#close", 
            "text": "\u30eb\u30fc\u30e0\u3092\u9000\u51fa\u3057\u3001\u30eb\u30fc\u30e0\u5185\u306e\u3059\u3079\u3066\u306e\u30e6\u30fc\u30b6\u30fc\u3068\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092close\u3057\u307e\u3059", 
            "title": "close"
        }, 
        {
            "location": "/ja/meshroom/#parameters", 
            "text": "None", 
            "title": "Parameters"
        }, 
        {
            "location": "/ja/meshroom/#return-value", 
            "text": "undefined", 
            "title": "Return value"
        }, 
        {
            "location": "/ja/meshroom/#sample_1", 
            "text": "room . close ();", 
            "title": "Sample"
        }, 
        {
            "location": "/ja/meshroom/#getlog", 
            "text": "\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u306b\u30eb\u30fc\u30e0\u306e\u30ed\u30b0\u53d6\u5f97\u3092\u8981\u6c42\u3057\u307e\u3059\u3002\n\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u304b\u3089\u30ed\u30b0\u3092\u53d7\u4fe1\u3059\u308b\u3068\u3001 log \u30a4\u30d9\u30f3\u30c8\u304c\u767a\u706b\u3057\u307e\u3059\u3002", 
            "title": "getLog"
        }, 
        {
            "location": "/ja/meshroom/#parameters_1", 
            "text": "None", 
            "title": "Parameters"
        }, 
        {
            "location": "/ja/meshroom/#return-value_1", 
            "text": "undefined", 
            "title": "Return value"
        }, 
        {
            "location": "/ja/meshroom/#sample_2", 
            "text": "room . getLog ();", 
            "title": "Sample"
        }, 
        {
            "location": "/ja/meshroom/#replacestream", 
            "text": "\u9001\u4fe1\u3057\u3066\u3044\u308bMediaStream\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002\u53d7\u4fe1\u306e\u307f\u30e2\u30fc\u30c9\u304b\u3089\u53cc\u65b9\u5411\u306b\u5207\u308a\u66ff\u3048\u3067\u304d\u307e\u3059\u3002\n\u307e\u305f\u3001\u97f3\u58f0\u306e\u307f\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u304b\u3089\u3001\u97f3\u58f0\uff0b\u6620\u50cf\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3078\u306e\u5909\u66f4\u3082\u3067\u304d\u307e\u3059\u3002", 
            "title": "replaceStream"
        }, 
        {
            "location": "/ja/meshroom/#parameters_2", 
            "text": "Name  Type  Required  Default  Description      stream  MediaStream    \u4ea4\u63db\u5bfe\u8c61\u3068\u306a\u308b\u65b0\u3057\u3044MediaStream\u3067\u3059\u3002", 
            "title": "Parameters"
        }, 
        {
            "location": "/ja/meshroom/#return-value_2", 
            "text": "undefined", 
            "title": "Return value"
        }, 
        {
            "location": "/ja/meshroom/#sample_3", 
            "text": "// newStream  meshRoom . replaceStream ( newStream );", 
            "title": "Sample"
        }, 
        {
            "location": "/ja/meshroom/#send", 
            "text": "WebSocket\u3092\u4f7f\u7528\u3057\u3066\u30eb\u30fc\u30e0\u5185\u306e\u5168\u3066\u306e\u30e6\u30fc\u30b6\u30fc\u306b\u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3057\u307e\u3059\u3002", 
            "title": "send"
        }, 
        {
            "location": "/ja/meshroom/#parameters_3", 
            "text": "Name  Type  Required  Default  Description      data  *  \u2714   \u9001\u4fe1\u3059\u308b\u30c7\u30fc\u30bf\u3067\u3059\u3002", 
            "title": "Parameters"
        }, 
        {
            "location": "/ja/meshroom/#events", 
            "text": "", 
            "title": "Events"
        }, 
        {
            "location": "/ja/meshroom/#open", 
            "text": "\u65b0\u898f\u306bPeer\u304c\u30eb\u30fc\u30e0\u3078\u5165\u5ba4\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002", 
            "title": "open"
        }, 
        {
            "location": "/ja/meshroom/#peerjoin", 
            "text": "\u30eb\u30fc\u30e0\u306b\u65b0\u3057\u3044Peer\u304c\u53c2\u52a0\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002     Type  Description      string  \u53c2\u52a0\u3057\u305fPeerID", 
            "title": "peerJoin"
        }, 
        {
            "location": "/ja/meshroom/#peerleave", 
            "text": "\u65b0\u898f\u306bPeer\u304c\u30eb\u30fc\u30e0\u3092\u9000\u51fa\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002     Type  Description      string  \u9000\u51fa\u3057\u305fPeerID", 
            "title": "peerLeave"
        }, 
        {
            "location": "/ja/meshroom/#log", 
            "text": "\u30eb\u30fc\u30e0\u306e\u30ed\u30b0\u3092\u53d7\u4fe1\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002     Type  Description      Array  \u30ed\u30b0\u306e\u914d\u5217\u3067\u3059", 
            "title": "log"
        }, 
        {
            "location": "/ja/meshroom/#stream", 
            "text": "\u30eb\u30fc\u30e0\u306bJoin\u3057\u3066\u3044\u308b\u4ed6\u306e\u30e6\u30fc\u30b6\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u53d7\u4fe1\u3057\u305f\u6642\u306b\u767a\u751f\u3057\u307e\u3059\u3002\u30b9\u30c8\u30ea\u30fc\u30e0\u9001\u4fe1\u5143\u306epeerId\u306f stream.peerId \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002     Type  Description      MediaStream  MediaStream\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\u3002", 
            "title": "stream"
        }, 
        {
            "location": "/ja/meshroom/#sample_4", 
            "text": "room . on ( stream ,   stream   = { \n   // Stream\u3092video\u30bf\u30b0\u306b\u8a2d\u5b9a\u306a\u3069  });", 
            "title": "Sample"
        }, 
        {
            "location": "/ja/meshroom/#data", 
            "text": "\u4ed6\u306e\u30e6\u30fc\u30b6\u30fc\u304b\u3089\u9001\u4fe1\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3092\u53d7\u4fe1\u3057\u305f\u6642\u306b\u767a\u751f\u3057\u307e\u3059\u3002     Type  Description      object  data object \u5f62\u5f0f\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002", 
            "title": "data"
        }, 
        {
            "location": "/ja/meshroom/#data-object", 
            "text": "Name  Type  Description      src  string  \u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3057\u305fPeer\u306eID\u3067\u3059\u3002    data  *  \u53d7\u4fe1\u3057\u305f\u30c7\u30fc\u30bf\u3067\u3059\u3002", 
            "title": "data object"
        }, 
        {
            "location": "/ja/meshroom/#close_1", 
            "text": "\u30eb\u30fc\u30e0\u3092close\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002", 
            "title": "close"
        }, 
        {
            "location": "/ja/meshroom/#removestream", 
            "text": "\u30eb\u30fc\u30e0\u304b\u3089 MediaStream \u304c\u524a\u9664\u3055\u308c\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002     Type  Description      MediaStream  MediaStream\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\u3002", 
            "title": "removeStream"
        }, 
        {
            "location": "/ja/meshroom/#sample_5", 
            "text": "meshRoom . on ( removeStream ,   stream   =   { \n   // \u524a\u9664\u3055\u308c\u305f\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u6301\u3064PeerID\u3092\u53d6\u5f97 \n   const   peerId   =   stream . peerId ;  }", 
            "title": "Sample"
        }, 
        {
            "location": "/ja/sfuroom/", 
            "text": "SFU\u63a5\u7d9a\u3067\u306e\u30eb\u30fc\u30e0\u3092\u7ba1\u7406\u3059\u308b\u30af\u30e9\u30b9\u3067\u3059\u3002\n\n\nConstructor\n\n\nSDK\u5185\u90e8\u306e\u5229\u7528\u306e\u307f\u3067\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u901a\u5e38\u5229\u7528\u3057\u307e\u305b\u3093\u3002\nSFURoom\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u3001\njoinRoom()\n \u3067\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n\n\nSample\n\n\nsfuRoom\n \n=\n \npeer\n.\njoinRoom\n(\nroomName\n,\n \n{\nmode\n:\n \nsfu\n,\n \nstream\n:\n \nlocalStream\n});\n\n\n\n\n\n\nMethods\n\n\nclose\n\n\n\u30eb\u30fc\u30e0\u3092\u9000\u51fa\u3057\u3001\u30eb\u30fc\u30e0\u5185\u306e\u3059\u3079\u3066\u306e\u30e6\u30fc\u30b6\u30fc\u3068\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092close\u3057\u307e\u3059\n\n\nParameters\n\n\nNone\n\n\nReturn value\n\n\nundefined\n\n\nSample\n\n\nroom\n.\nclose\n();\n\n\n\n\n\n\ngetLog\n\n\n\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u306b\u30eb\u30fc\u30e0\u306e\u30ed\u30b0\u53d6\u5f97\u3092\u8981\u6c42\u3057\u307e\u3059\u3002\n\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u304b\u3089\u30ed\u30b0\u3092\u53d7\u4fe1\u3059\u308b\u3068\u3001\nlog\n\u30a4\u30d9\u30f3\u30c8\u304c\u767a\u706b\u3057\u307e\u3059\u3002\n\n\nParameters\n\n\nNone\n\n\nReturn value\n\n\nundefined\n\n\nSample\n\n\nroom\n.\ngetLog\n();\n\n\n\n\n\n\nreplaceStream\n\n\n\u9001\u4fe1\u3057\u3066\u3044\u308bMediaStream\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002\u53d7\u4fe1\u306e\u307f\u30e2\u30fc\u30c9\u304b\u3089\u53cc\u65b9\u5411\u306b\u5207\u308a\u66ff\u3048\u3067\u304d\u307e\u3059\u3002\n\u307e\u305f\u3001\u97f3\u58f0\u306e\u307f\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u304b\u3089\u3001\u97f3\u58f0\uff0b\u6620\u50cf\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3078\u306e\u5909\u66f4\u3082\u3067\u304d\u307e\u3059\u3002\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstream\n\n\nMediaStream\n\n\n\n\n\n\n\u4ea4\u63db\u5bfe\u8c61\u3068\u306a\u308b\u65b0\u3057\u3044MediaStream\u3067\u3059\u3002\n\n\n\n\n\n\n\n\nReturn value\n\n\nundefined\n\n\nSample\n\n\n// newStream\n\n\nsfuRoom\n.\nreplaceStream\n(\nnewStream\n);\n\n\n\n\n\n\nsend\n\n\nWebSocket\u3092\u4f7f\u7528\u3057\u3066\u30eb\u30fc\u30e0\u5185\u306e\u5168\u3066\u306e\u30e6\u30fc\u30b6\u30fc\u306b\u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3057\u307e\u3059\u3002\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndata\n\n\n*\n\n\n\u2714\n\n\n\n\n\u9001\u4fe1\u3059\u308b\u30c7\u30fc\u30bf\u3067\u3059\u3002\n\n\n\n\n\n\n\n\nEvents\n\n\nopen\n\n\n\u65b0\u898f\u306bPeer\u304c\u30eb\u30fc\u30e0\u3078\u5165\u5ba4\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002\n\n\npeerJoin\n\n\n\u30eb\u30fc\u30e0\u306b\u65b0\u3057\u3044Peer\u304c\u53c2\u52a0\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstring\n\n\n\u53c2\u52a0\u3057\u305fPeerID\n\n\n\n\n\n\n\n\npeerLeave\n\n\n\u65b0\u898f\u306bPeer\u304c\u30eb\u30fc\u30e0\u3092\u9000\u51fa\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstring\n\n\n\u9000\u51fa\u3057\u305fPeerID\n\n\n\n\n\n\n\n\nlog\n\n\n\u30eb\u30fc\u30e0\u306e\u30ed\u30b0\u3092\u53d7\u4fe1\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nArray\n\n\n\u30ed\u30b0\u306e\u914d\u5217\u3067\u3059\n\n\n\n\n\n\n\n\nstream\n\n\n\u30eb\u30fc\u30e0\u306bJoin\u3057\u3066\u3044\u308b\u4ed6\u306e\u30e6\u30fc\u30b6\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u53d7\u4fe1\u3057\u305f\u6642\u306b\u767a\u751f\u3057\u307e\u3059\u3002\u30b9\u30c8\u30ea\u30fc\u30e0\u9001\u4fe1\u5143\u306epeerId\u306f stream.peerId \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nMediaStream\n\n\nMediaStream\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\u3002\n\n\n\n\n\n\n\n\nSample\n\n\nroom\n.\non\n(\nstream\n,\n \nstream\n \n=\n{\n\n  \n// Stream\u3092video\u30bf\u30b0\u306b\u8a2d\u5b9a\u306a\u3069\n\n\n});\n\n\n\n\n\n\ndata\n\n\n\u4ed6\u306e\u30e6\u30fc\u30b6\u30fc\u304b\u3089\u9001\u4fe1\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3092\u53d7\u4fe1\u3057\u305f\u6642\u306b\u767a\u751f\u3057\u307e\u3059\u3002\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nobject\n\n\ndata object\n\u5f62\u5f0f\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002\n\n\n\n\n\n\n\n\ndata object\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsrc\n\n\nstring\n\n\n\u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3057\u305fPeer\u306eID\u3067\u3059\u3002\n\n\n\n\n\n\ndata\n\n\n*\n\n\n\u53d7\u4fe1\u3057\u305f\u30c7\u30fc\u30bf\u3067\u3059\u3002\n\n\n\n\n\n\n\n\nclose\n\n\n\u30eb\u30fc\u30e0\u3092close\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002\n\n\nremoveStream\n\n\n\u30eb\u30fc\u30e0\u304b\u3089\nMediaStream\n\u304c\u524a\u9664\u3055\u308c\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nMediaStream\n\n\nMediaStream\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\u3002\n\n\n\n\n\n\n\n\nSample\n\n\nsfuRoom\n.\non\n(\nremoveStream\n,\n \nstream\n \n=\n \n{\n\n  \n// \u524a\u9664\u3055\u308c\u305f\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u6301\u3064PeerID\u3092\u53d6\u5f97\n\n  \nconst\n \npeerId\n \n=\n \nstream\n.\npeerId\n;\n\n\n}", 
            "title": "SFURoom"
        }, 
        {
            "location": "/ja/sfuroom/#constructor", 
            "text": "SDK\u5185\u90e8\u306e\u5229\u7528\u306e\u307f\u3067\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u901a\u5e38\u5229\u7528\u3057\u307e\u305b\u3093\u3002\nSFURoom\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u3001 joinRoom()  \u3067\u751f\u6210\u3055\u308c\u307e\u3059\u3002", 
            "title": "Constructor"
        }, 
        {
            "location": "/ja/sfuroom/#sample", 
            "text": "sfuRoom   =   peer . joinRoom ( roomName ,   { mode :   sfu ,   stream :   localStream });", 
            "title": "Sample"
        }, 
        {
            "location": "/ja/sfuroom/#methods", 
            "text": "", 
            "title": "Methods"
        }, 
        {
            "location": "/ja/sfuroom/#close", 
            "text": "\u30eb\u30fc\u30e0\u3092\u9000\u51fa\u3057\u3001\u30eb\u30fc\u30e0\u5185\u306e\u3059\u3079\u3066\u306e\u30e6\u30fc\u30b6\u30fc\u3068\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092close\u3057\u307e\u3059", 
            "title": "close"
        }, 
        {
            "location": "/ja/sfuroom/#parameters", 
            "text": "None", 
            "title": "Parameters"
        }, 
        {
            "location": "/ja/sfuroom/#return-value", 
            "text": "undefined", 
            "title": "Return value"
        }, 
        {
            "location": "/ja/sfuroom/#sample_1", 
            "text": "room . close ();", 
            "title": "Sample"
        }, 
        {
            "location": "/ja/sfuroom/#getlog", 
            "text": "\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u306b\u30eb\u30fc\u30e0\u306e\u30ed\u30b0\u53d6\u5f97\u3092\u8981\u6c42\u3057\u307e\u3059\u3002\n\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u304b\u3089\u30ed\u30b0\u3092\u53d7\u4fe1\u3059\u308b\u3068\u3001 log \u30a4\u30d9\u30f3\u30c8\u304c\u767a\u706b\u3057\u307e\u3059\u3002", 
            "title": "getLog"
        }, 
        {
            "location": "/ja/sfuroom/#parameters_1", 
            "text": "None", 
            "title": "Parameters"
        }, 
        {
            "location": "/ja/sfuroom/#return-value_1", 
            "text": "undefined", 
            "title": "Return value"
        }, 
        {
            "location": "/ja/sfuroom/#sample_2", 
            "text": "room . getLog ();", 
            "title": "Sample"
        }, 
        {
            "location": "/ja/sfuroom/#replacestream", 
            "text": "\u9001\u4fe1\u3057\u3066\u3044\u308bMediaStream\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002\u53d7\u4fe1\u306e\u307f\u30e2\u30fc\u30c9\u304b\u3089\u53cc\u65b9\u5411\u306b\u5207\u308a\u66ff\u3048\u3067\u304d\u307e\u3059\u3002\n\u307e\u305f\u3001\u97f3\u58f0\u306e\u307f\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u304b\u3089\u3001\u97f3\u58f0\uff0b\u6620\u50cf\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3078\u306e\u5909\u66f4\u3082\u3067\u304d\u307e\u3059\u3002", 
            "title": "replaceStream"
        }, 
        {
            "location": "/ja/sfuroom/#parameters_2", 
            "text": "Name  Type  Required  Default  Description      stream  MediaStream    \u4ea4\u63db\u5bfe\u8c61\u3068\u306a\u308b\u65b0\u3057\u3044MediaStream\u3067\u3059\u3002", 
            "title": "Parameters"
        }, 
        {
            "location": "/ja/sfuroom/#return-value_2", 
            "text": "undefined", 
            "title": "Return value"
        }, 
        {
            "location": "/ja/sfuroom/#sample_3", 
            "text": "// newStream  sfuRoom . replaceStream ( newStream );", 
            "title": "Sample"
        }, 
        {
            "location": "/ja/sfuroom/#send", 
            "text": "WebSocket\u3092\u4f7f\u7528\u3057\u3066\u30eb\u30fc\u30e0\u5185\u306e\u5168\u3066\u306e\u30e6\u30fc\u30b6\u30fc\u306b\u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3057\u307e\u3059\u3002", 
            "title": "send"
        }, 
        {
            "location": "/ja/sfuroom/#parameters_3", 
            "text": "Name  Type  Required  Default  Description      data  *  \u2714   \u9001\u4fe1\u3059\u308b\u30c7\u30fc\u30bf\u3067\u3059\u3002", 
            "title": "Parameters"
        }, 
        {
            "location": "/ja/sfuroom/#events", 
            "text": "", 
            "title": "Events"
        }, 
        {
            "location": "/ja/sfuroom/#open", 
            "text": "\u65b0\u898f\u306bPeer\u304c\u30eb\u30fc\u30e0\u3078\u5165\u5ba4\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002", 
            "title": "open"
        }, 
        {
            "location": "/ja/sfuroom/#peerjoin", 
            "text": "\u30eb\u30fc\u30e0\u306b\u65b0\u3057\u3044Peer\u304c\u53c2\u52a0\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002     Type  Description      string  \u53c2\u52a0\u3057\u305fPeerID", 
            "title": "peerJoin"
        }, 
        {
            "location": "/ja/sfuroom/#peerleave", 
            "text": "\u65b0\u898f\u306bPeer\u304c\u30eb\u30fc\u30e0\u3092\u9000\u51fa\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002     Type  Description      string  \u9000\u51fa\u3057\u305fPeerID", 
            "title": "peerLeave"
        }, 
        {
            "location": "/ja/sfuroom/#log", 
            "text": "\u30eb\u30fc\u30e0\u306e\u30ed\u30b0\u3092\u53d7\u4fe1\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002     Type  Description      Array  \u30ed\u30b0\u306e\u914d\u5217\u3067\u3059", 
            "title": "log"
        }, 
        {
            "location": "/ja/sfuroom/#stream", 
            "text": "\u30eb\u30fc\u30e0\u306bJoin\u3057\u3066\u3044\u308b\u4ed6\u306e\u30e6\u30fc\u30b6\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u53d7\u4fe1\u3057\u305f\u6642\u306b\u767a\u751f\u3057\u307e\u3059\u3002\u30b9\u30c8\u30ea\u30fc\u30e0\u9001\u4fe1\u5143\u306epeerId\u306f stream.peerId \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002     Type  Description      MediaStream  MediaStream\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\u3002", 
            "title": "stream"
        }, 
        {
            "location": "/ja/sfuroom/#sample_4", 
            "text": "room . on ( stream ,   stream   = { \n   // Stream\u3092video\u30bf\u30b0\u306b\u8a2d\u5b9a\u306a\u3069  });", 
            "title": "Sample"
        }, 
        {
            "location": "/ja/sfuroom/#data", 
            "text": "\u4ed6\u306e\u30e6\u30fc\u30b6\u30fc\u304b\u3089\u9001\u4fe1\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3092\u53d7\u4fe1\u3057\u305f\u6642\u306b\u767a\u751f\u3057\u307e\u3059\u3002     Type  Description      object  data object \u5f62\u5f0f\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002", 
            "title": "data"
        }, 
        {
            "location": "/ja/sfuroom/#data-object", 
            "text": "Name  Type  Description      src  string  \u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3057\u305fPeer\u306eID\u3067\u3059\u3002    data  *  \u53d7\u4fe1\u3057\u305f\u30c7\u30fc\u30bf\u3067\u3059\u3002", 
            "title": "data object"
        }, 
        {
            "location": "/ja/sfuroom/#close_1", 
            "text": "\u30eb\u30fc\u30e0\u3092close\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002", 
            "title": "close"
        }, 
        {
            "location": "/ja/sfuroom/#removestream", 
            "text": "\u30eb\u30fc\u30e0\u304b\u3089 MediaStream \u304c\u524a\u9664\u3055\u308c\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002     Type  Description      MediaStream  MediaStream\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\u3002", 
            "title": "removeStream"
        }, 
        {
            "location": "/ja/sfuroom/#sample_5", 
            "text": "sfuRoom . on ( removeStream ,   stream   =   { \n   // \u524a\u9664\u3055\u308c\u305f\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u6301\u3064PeerID\u3092\u53d6\u5f97 \n   const   peerId   =   stream . peerId ;  }", 
            "title": "Sample"
        }, 
        {
            "location": "/en/", 
            "text": "This document is ECLWebRTC JavaScript SDK API Reference. See English version from \nhere\n.\nSee \nCommunication model of ECLWebRTC\n if this is the first time for you to develop applciation with ECLWebRTC.", 
            "title": "Introduction"
        }, 
        {
            "location": "/en/peer/", 
            "text": "Class that manages all p2p connections and rooms. Peer instance must be generated when using ECLWebRTC.\n\n\nConstructor\n\n\nnew Peer\n creates new Peer instance and connects to the signaling server.\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nid\n\n\nstring\n\n\n\n\n\n\nUser's peerId.\n\n\n\n\n\n\noptions\n\n\noptions object\n\n\n\u2714\n\n\n\n\nOptional arguments for the connection.\n\n\n\n\n\n\n\n\noptions object\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nstring\n\n\n\u2714\n\n\n\n\nECLWebRTC API key.\n\n\n\n\n\n\ndebug\n\n\nnumber\n\n\n\n\n\n\nLog level. NONE:0, ERROR:1, WARN:2, FULL:3.\n\n\n\n\n\n\nturn\n\n\nboolean\n\n\n\n\n\n\nWhether using ECLWebRTC's TURN or not.\n\n\n\n\n\n\ncredential\n\n\ncredential object\n\n\n\n\n\n\nThe credential used to authenticate peer and can be used when authentication is enabled. Check \nauthentication repository\n to see datails.\n\n\n\n\n\n\nconfig\n\n\nRTCConfiguration object\n\n\n\n\nDefault RTCConfiguration object\n\n\nThe object passed to RTCPeerConnection\n. This is advanced option.\n\n\n\n\n\n\n\n\ncredential object\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntimestamp\n\n\nnumber\n\n\n\n\n\n\nCurrent UNIX timestamp.\n\n\n\n\n\n\nttl\n\n\nnumber\n\n\n\n\n\n\nTime to live; The credential expires at timestamp + ttl.\n\n\n\n\n\n\nauthToken\n\n\nstring\n\n\n\n\nDefault\n\n\nCredential token calculated with HMAC.\n\n\n\n\n\n\n\n\nDefault RTCConfiguration object\n\n\nconst\n \ndefaultConfig\n \n=\n \n{\n\n  \niceServers\n:\n \n[{\n\n    \nurls\n:\n \nstun:stun.webrtc.ecl.ntt.com:3478\n,\n\n    \nurl\n:\n  \nstun:stun.webrtc.ecl.ntt.com:3478\n,\n\n  \n}],\n\n  \niceTransportPolicy\n:\n \nall\n,\n\n\n};\n\n\n\n\n\n\nSample\n\n\n// Connect ECLWebRTC signaling server with full debug option.\n\n\nconst\n \npeer\n \n=\n \nnew\n \nPeer\n({\n\n  \nkey\n:\n   \nYOUR-API-KEY\n\n  \ndebug\n:\n \n3\n,\n\n\n});\n\n\n\n\n\n\n// Force turn server\n\n\nconst\n \npeer\n \n=\n \nnew\n \nPeer\n({\n\n  \nkey\n:\n   \nYOUR-API-KEY\n\n  \ndebug\n:\n \n3\n,\n\n  \nconfig\n:\n \n{\n\n    \niceTransportPolicy\n:\n \nrelay\n,\n\n  \n},\n\n\n});\n\n\n\n\n\n\nMembers\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nconnections\n\n\nObject\n\n\nObject contains all connections.\n\n\n\n\n\n\nid\n\n\nstring\n\n\nThe Peer ID specified by a user or randomly assigned Peer ID by the signaling server.\n\n\n\n\n\n\nopen\n\n\nboolean\n\n\nWhether the socket is connecting to the signalling server or not.\n\n\n\n\n\n\nrooms\n\n\nobject\n\n\nObject contains all rooms.\n\n\n\n\n\n\n\n\nMethods\n\n\ncall\n\n\nCalls the designated Peer and creates new MediaConnection.\nWith option, bandwidth or/and codec can be specified.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npeerId\n\n\nstring\n\n\n\u2714\n\n\n\n\nThe peerId of the peer you are calling.\n\n\n\n\n\n\nstream\n\n\nMediaStream\n\n\n\n\n\n\nThe MediaStream to send to the remote peer. If not set, the caller creates offer SDP with \nrecvonly\n attribute.\n\n\n\n\n\n\noptions\n\n\ncall options object\n\n\n\n\n\n\nOptional arguments for the connection.\n\n\n\n\n\n\n\n\ncall options object\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmetadata\n\n\nobject\n\n\n\n\n\n\nAny additional information to send to the peer.\n\n\n\n\n\n\nvideoBandwidth\n\n\nnumber\n\n\n\n\n\n\nA max video bandwidth(kbps)\n\n\n\n\n\n\naudioBandwidth\n\n\nnumber\n\n\n\n\n\n\nA max audio bandwidth(kbps)\n\n\n\n\n\n\nvideoCodec\n\n\nstring\n\n\n\n\n\n\nA video codec like 'H264'\n\n\n\n\n\n\naudioCodec\n\n\nstring\n\n\n\n\n\n\nA video codec like 'PCMU'\n\n\n\n\n\n\nvideoReceiveEnabled\n\n\nboolean\n\n\n\n\n\n\nSet to \ntrue\n when the user wants to receive video\n\n\n\n\n\n\naudioReceiveEnabled\n\n\nboolean\n\n\n\n\n\n\nSet to \ntrue\n when the user wants to receive audio\n\n\n\n\n\n\nlabel\n\n\nstring\n\n\n\n\n\n\nDeprecated!\n Label to easily identify the connection on either peer.\n\n\n\n\n\n\n\n\nReturn value\n\n\nMediaConnection\n instance\n\n\nSample\n\n\n// Call a peer, providing our mediaStream\n\n\nconst\n \ncall\n \n=\n \npeer\n.\ncall\n(\npeerID\n,\n \nlocalStream\n);\n\n\n\n\n\n\n// Call a peer, providing our mediaStream and metadata\n\n\nconst\n \ncall\n \n=\n \npeer\n.\ncall\n(\npeerID\n,\n \nlocalStream\n,\n \n{\n\n  \nmetadata\n:\n \n{\n\n    \nfoo\n:\n \nbar\n,\n\n  \n}\n\n\n});\n\n\n\n\n\n\n// Call a peer, providing our mediaStream with H264(video codec)\n\n\nconst\n \ncall\n \n=\n \npeer\n.\ncall\n(\npeerID\n,\n \nlocalStream\n,\n \n{\n\n  \nvideoCodec\n:\n \nH264\n,\n\n\n});\n\n\n\n\n\n\n// Call a peer, and just want to receive audio\n\n\nconst\n \ncall\n \n=\n \npeer\n.\ncall\n(\npeerID\n,\n \n{\n\n  \naudioReceiveEnabled\n:\n \ntrue\n,\n\n\n});\n\n\n\n\n\n\nconnect\n\n\nConnects to the designated Peer and creates new DataConnection.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npeerId\n\n\nstring\n\n\n\u2714\n\n\n\n\nUser's peerId.\n\n\n\n\n\n\noptions\n\n\nconnect options object\n\n\n\n\n\n\nOptional arguments for DataConnection.\n\n\n\n\n\n\n\n\nconnect options object\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmetadata\n\n\nobject\n\n\n\n\n\n\nAny additional information to send to the peer.\n\n\n\n\n\n\nserialization\n\n\nstring\n\n\n\n\n\n\nHow to serialize data when sending. One of 'binary', 'json' or 'none'.\n\n\n\n\n\n\ndcInit\n\n\nRTCDataChannelInit Object\n\n\n\n\n\n\nOptions passed to createDataChannel() as a RTCDataChannelInit.\n\n\n\n\n\n\nlabel\n\n\nstring\n\n\n\n\n\n\nDeprecated!\n Label to easily identify the connection on either peer.\n\n\n\n\n\n\n\n\nReturn value\n\n\nDataConnection\n instance\n\n\nSample\n\n\n// connect with data channel and with reliable mode(default)\n\n\npeer\n.\nconnect\n(\npeerId\n);\n\n\n\n\n\n\n// with metadata\n\n\npeer\n.\nconnect\n(\npeerId\n,\n \n{\n\n  \nmetadata\n:\n \n{\n\n    \nhoge\n:\n \nfoobar\n,\n\n  \n}\n\n\n});\n\n\n\n\n\n\n// connect with data channel and with unreliable mode\n\n\npeer\n.\nconnect\n(\npeerId\n,\n \n{\n\n  \ndcInit\n:\n \n{\n\n    \nmaxRetransmits\n:\n \n2\n,\n\n  \n},\n\n\n});\n\n\n\n\n\n\ndestroy\n\n\nClose all connections and disconnect socket.\n\n\nParameters\n\n\nNone\n\n\nReturn value\n\n\nundefined\n\n\nSample\n\n\npeer\n.\ndestroy\n();\n\n\n\n\n\n\ndisconnect\n\n\nClose socket and clean up some properties, then emit disconnect event.\n\n\nParameters\n\n\nNone\n\n\nReturn value\n\n\nundefined\n\n\nSample\n\n\npeer\n.\ndisconnect\n();\n\n\n\n\n\n\njoinRoom\n\n\nJoin fullmesh type or SFU type room that two or more users can join. See explanation of fullmesh and SFU type from \nhere\n.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRquired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nroomName\n\n\nstring\n\n\n\u2714\n\n\n\n\nThe name of the room user is joining to.\n\n\n\n\n\n\nroomOptions\n\n\nroomOptions object\n\n\n\n\nOptions to configure connection.\n\n\n\n\n\n\n\n\n\n\nroomOptions object\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmode\n\n\nstring\n\n\n\n\n'mesh'\n\n\nOne of 'sfu' or 'mesh'.\n\n\n\n\n\n\nstream\n\n\nMediaStream\n\n\n\n\n\n\nMedia stream user wants to emit.\n\n\n\n\n\n\nvideoBandwidth\n\n\nnumber\n\n\n\n\n\n\nA max video bandwidth(kbps). Used only in mesh mode.\n\n\n\n\n\n\naudioBandwidth\n\n\nnumber\n\n\n\n\n\n\nA max audio bandwidth(kbps). Used only in mesh mode.\n\n\n\n\n\n\nvideoCodec\n\n\nstring\n\n\n\n\n\n\nA video codec like 'H264'. Used only in mesh mode.\n\n\n\n\n\n\naudioCodec\n\n\nstring\n\n\n\n\n\n\nA video codec like 'PCMU'. Used only in mesh mode.\n\n\n\n\n\n\nvideoReceiveEnabled\n\n\nboolean\n\n\n\n\n\n\nSet to \ntrue\n when the user wants to receive video.\n\n\n\n\n\n\naudioReceiveEnabled\n\n\nboolean\n\n\n\n\n\n\nSet to \ntrue\n when the user wants to receive video.\n\n\n\n\n\n\n\n\nReturn value\n\n\nInstance of \nSFURoom\n or \nMeshRoom\n\n\nSample\n\n\nconst\n \nroom\n \n=\n \npeer\n.\njoinRoom\n(\nroomName\n,\n \n{\n\n  \nmode\n:\n \nmesh\n,\n \n  \nstream\n:\n \nlocalStream\n,\n\n\n});\n\n\n\n\n\n\nconst\n \nroom\n \n=\n \npeer\n.\njoinRoom\n(\nroomName\n,\n \n{\n\n  \nmode\n:\n \nsfu\n,\n \n  \nstream\n:\n \nlocalStream\n,\n\n\n});\n\n\n\n\n\n\nlistAllPeers\n\n\nCall Rest API and get the list of peerIds assciated with API key.\n\n\nParameters\n\n\nNone\n\n\nReturn value\n\n\nundefined\n\n\nSample\n\n\npeer\n.\nlistAllPeers\n(\npeers\n \n=\n \n{\n\n  \nconsole\n.\nlog\n(\npeers\n)\n\n  \n// =\n [\nyNtQkNyjAojJNGrt\n, \nEzAmgFhCKBQMzKw9\n]\n\n\n});\n\n\n\n\n\n\nupdateCredential\n\n\nUpdate server-side credential by sending a request in order to extend TTL of authenticaion.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmode\n\n\ncredential object\n\n\n\u2714\n\n\n\n\nThe new credential generated by user.\n\n\n\n\n\n\n\n\ncredential object\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nOptional\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntimestamp\n\n\nnumber\n\n\n\u2714\n\n\n\n\nCurrent UNIX timestamp.\n\n\n\n\n\n\nttl\n\n\nnumber\n\n\n\u2714\n\n\n\n\nTime to live; The credential expires at timestamp + ttl.\n\n\n\n\n\n\nauthToken\n\n\nstring\n\n\n\u2714\n\n\nDefault\n\n\nCredential token calculated with HMAC.\n\n\n\n\n\n\n\n\nReturn value\n\n\nundefined\n\n\nEvents\n\n\nopen\n\n\nSuccessfully connected to signaling server.\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstring\n\n\nPeer ID\n\n\n\n\n\n\n\n\nSample\n\n\npeer\n.\non\n(\nopen\n,\n \nid\n \n=\n \n{\n\n  \nconsole\n.\nlog\n(\nid\n);\n\n\n})\n\n\n\n\n\n\ncall\n\n\nReceived a call with Media channel(audio and/or video) from peer.\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nMediaConnection\n\n\nMediaConnection instance.\n\n\n\n\n\n\n\n\nSample\n\n\npeer\n.\non\n(\ncall\n,\n \ncall\n \n=\n \n{\n\n  \n// answer with media stream\n\n  \ncall\n.\nanswer\n(\nmediaStream\n);\n\n\n});\n\n\n\n\n\n\nclose\n\n\nFinished closing all connections to peers.\n\n\nconnection\n\n\nReceived a connection from peer.\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDataConnection\n\n\nDataConnection instance.\n\n\n\n\n\n\n\n\nsample\n\n\npeer\n.\non\n(\nconnection\n,\n \nconnection\n \n=\n \n{\n\n  \nconsole\n.\nlog\n(\nconnection\n);\n\n\n});\n\n\n\n\n\n\ndisconnected\n\n\nDisconnected from the signalling server.\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstring\n\n\nPeer ID\n\n\n\n\n\n\n\n\nexpiresin\n\n\nThe event occurs before credential expired.\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber\n\n\nThe second before credential expires\n\n\n\n\n\n\n\n\nerror\n\n\nEvents when error occur.\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nroom-error\n\n\nRoom name must be defined.\n\n\n\n\n\n\n\n\nRoom type is different (e.g. On the condition that the mesh room was created, that another user tries to create SFU room with same room name of Mesh cause this error)\n\n\n\n\n\n\n\n\nSFU usage is disabled. Please enable SFU usage on dashboard.\n\n\n\n\n\n\n\n\nUnknown-error. Please wait for a while and connect again.\n\n\n\n\n\n\n\n\nFailed to fetch the room log. Please wait for a while and connect again\n\n\n\n\n\n\nauthentication\n\n\nFailed to authenticate\n\n\n\n\n\n\npermission\n\n\nThe room usage is not permitted\n\n\n\n\n\n\nlist-error\n\n\nLook like you have permission to list peers IDs. Please enable the ECLWebRTC REST API on dashboard.\n\n\n\n\n\n\ndisconnected\n\n\nCannot connect to new Peer before connecting to ECLWebRTC server or after disconnecting from the server.\n\n\n\n\n\n\nsocket-error\n\n\nLost connection to server\n\n\n\n\n\n\ninvalid-id\n\n\nID is invalid.\n\n\n\n\n\n\ninvalid-key\n\n\nAPI is invalid\n\n\n\n\n\n\nserver-error\n\n\nCould not get peers from the server.\n\n\n\n\n\n\n\n\nSample\n\n\n// When calling joinRoom() without room name\n\n\npeer\n.\non\n(\nerror\n,\n \nerror\n \n=\n \n{\n\n  \nconsole\n.\nlog\n(\n`\n${\nerror\n.\ntype\n}\n: \n${\nerror\n.\nmessage\n}\n`\n);\n\n  \n// =\n room-error: Room name must be defined.\n\n\n});", 
            "title": "Peer"
        }, 
        {
            "location": "/en/peer/#constructor", 
            "text": "new Peer  creates new Peer instance and connects to the signaling server.", 
            "title": "Constructor"
        }, 
        {
            "location": "/en/peer/#parameter", 
            "text": "Name  Type  Required  Default  Description      id  string    User's peerId.    options  options object  \u2714   Optional arguments for the connection.", 
            "title": "Parameter"
        }, 
        {
            "location": "/en/peer/#options-object", 
            "text": "Name  Type  Required  Default  Description      key  string  \u2714   ECLWebRTC API key.    debug  number    Log level. NONE:0, ERROR:1, WARN:2, FULL:3.    turn  boolean    Whether using ECLWebRTC's TURN or not.    credential  credential object    The credential used to authenticate peer and can be used when authentication is enabled. Check  authentication repository  to see datails.    config  RTCConfiguration object   Default RTCConfiguration object  The object passed to RTCPeerConnection . This is advanced option.", 
            "title": "options object"
        }, 
        {
            "location": "/en/peer/#credential-object", 
            "text": "Name  Type  Required  Default  Description      timestamp  number    Current UNIX timestamp.    ttl  number    Time to live; The credential expires at timestamp + ttl.    authToken  string   Default  Credential token calculated with HMAC.", 
            "title": "credential object"
        }, 
        {
            "location": "/en/peer/#default-rtcconfiguration-object", 
            "text": "const   defaultConfig   =   { \n   iceServers :   [{ \n     urls :   stun:stun.webrtc.ecl.ntt.com:3478 , \n     url :    stun:stun.webrtc.ecl.ntt.com:3478 , \n   }], \n   iceTransportPolicy :   all ,  };", 
            "title": "Default RTCConfiguration object"
        }, 
        {
            "location": "/en/peer/#sample", 
            "text": "// Connect ECLWebRTC signaling server with full debug option.  const   peer   =   new   Peer ({ \n   key :     YOUR-API-KEY \n   debug :   3 ,  });   // Force turn server  const   peer   =   new   Peer ({ \n   key :     YOUR-API-KEY \n   debug :   3 , \n   config :   { \n     iceTransportPolicy :   relay , \n   },  });", 
            "title": "Sample"
        }, 
        {
            "location": "/en/peer/#members", 
            "text": "Name  Type  Description      connections  Object  Object contains all connections.    id  string  The Peer ID specified by a user or randomly assigned Peer ID by the signaling server.    open  boolean  Whether the socket is connecting to the signalling server or not.    rooms  object  Object contains all rooms.", 
            "title": "Members"
        }, 
        {
            "location": "/en/peer/#methods", 
            "text": "", 
            "title": "Methods"
        }, 
        {
            "location": "/en/peer/#call", 
            "text": "Calls the designated Peer and creates new MediaConnection.\nWith option, bandwidth or/and codec can be specified.", 
            "title": "call"
        }, 
        {
            "location": "/en/peer/#parameters", 
            "text": "Name  Type  Required  Default  Description      peerId  string  \u2714   The peerId of the peer you are calling.    stream  MediaStream    The MediaStream to send to the remote peer. If not set, the caller creates offer SDP with  recvonly  attribute.    options  call options object    Optional arguments for the connection.", 
            "title": "Parameters"
        }, 
        {
            "location": "/en/peer/#call-options-object", 
            "text": "Name  Type  Required  Default  Description      metadata  object    Any additional information to send to the peer.    videoBandwidth  number    A max video bandwidth(kbps)    audioBandwidth  number    A max audio bandwidth(kbps)    videoCodec  string    A video codec like 'H264'    audioCodec  string    A video codec like 'PCMU'    videoReceiveEnabled  boolean    Set to  true  when the user wants to receive video    audioReceiveEnabled  boolean    Set to  true  when the user wants to receive audio    label  string    Deprecated!  Label to easily identify the connection on either peer.", 
            "title": "call options object"
        }, 
        {
            "location": "/en/peer/#return-value", 
            "text": "MediaConnection  instance", 
            "title": "Return value"
        }, 
        {
            "location": "/en/peer/#sample_1", 
            "text": "// Call a peer, providing our mediaStream  const   call   =   peer . call ( peerID ,   localStream );   // Call a peer, providing our mediaStream and metadata  const   call   =   peer . call ( peerID ,   localStream ,   { \n   metadata :   { \n     foo :   bar , \n   }  });   // Call a peer, providing our mediaStream with H264(video codec)  const   call   =   peer . call ( peerID ,   localStream ,   { \n   videoCodec :   H264 ,  });   // Call a peer, and just want to receive audio  const   call   =   peer . call ( peerID ,   { \n   audioReceiveEnabled :   true ,  });", 
            "title": "Sample"
        }, 
        {
            "location": "/en/peer/#connect", 
            "text": "Connects to the designated Peer and creates new DataConnection.", 
            "title": "connect"
        }, 
        {
            "location": "/en/peer/#parameters_1", 
            "text": "Name  Type  Required  Default  Description      peerId  string  \u2714   User's peerId.    options  connect options object    Optional arguments for DataConnection.", 
            "title": "Parameters"
        }, 
        {
            "location": "/en/peer/#connect-options-object", 
            "text": "Name  Type  Required  Default  Description      metadata  object    Any additional information to send to the peer.    serialization  string    How to serialize data when sending. One of 'binary', 'json' or 'none'.    dcInit  RTCDataChannelInit Object    Options passed to createDataChannel() as a RTCDataChannelInit.    label  string    Deprecated!  Label to easily identify the connection on either peer.", 
            "title": "connect options object"
        }, 
        {
            "location": "/en/peer/#return-value_1", 
            "text": "DataConnection  instance", 
            "title": "Return value"
        }, 
        {
            "location": "/en/peer/#sample_2", 
            "text": "// connect with data channel and with reliable mode(default)  peer . connect ( peerId );   // with metadata  peer . connect ( peerId ,   { \n   metadata :   { \n     hoge :   foobar , \n   }  });   // connect with data channel and with unreliable mode  peer . connect ( peerId ,   { \n   dcInit :   { \n     maxRetransmits :   2 , \n   },  });", 
            "title": "Sample"
        }, 
        {
            "location": "/en/peer/#destroy", 
            "text": "Close all connections and disconnect socket.", 
            "title": "destroy"
        }, 
        {
            "location": "/en/peer/#parameters_2", 
            "text": "None", 
            "title": "Parameters"
        }, 
        {
            "location": "/en/peer/#return-value_2", 
            "text": "undefined", 
            "title": "Return value"
        }, 
        {
            "location": "/en/peer/#sample_3", 
            "text": "peer . destroy ();", 
            "title": "Sample"
        }, 
        {
            "location": "/en/peer/#disconnect", 
            "text": "Close socket and clean up some properties, then emit disconnect event.", 
            "title": "disconnect"
        }, 
        {
            "location": "/en/peer/#parameters_3", 
            "text": "None", 
            "title": "Parameters"
        }, 
        {
            "location": "/en/peer/#return-value_3", 
            "text": "undefined", 
            "title": "Return value"
        }, 
        {
            "location": "/en/peer/#sample_4", 
            "text": "peer . disconnect ();", 
            "title": "Sample"
        }, 
        {
            "location": "/en/peer/#joinroom", 
            "text": "Join fullmesh type or SFU type room that two or more users can join. See explanation of fullmesh and SFU type from  here .", 
            "title": "joinRoom"
        }, 
        {
            "location": "/en/peer/#parameters_4", 
            "text": "Name  Type  Rquired  Default  Description      roomName  string  \u2714   The name of the room user is joining to.    roomOptions  roomOptions object   Options to configure connection.", 
            "title": "Parameters"
        }, 
        {
            "location": "/en/peer/#roomoptions-object", 
            "text": "Name  Type  Required  Default  Description      mode  string   'mesh'  One of 'sfu' or 'mesh'.    stream  MediaStream    Media stream user wants to emit.    videoBandwidth  number    A max video bandwidth(kbps). Used only in mesh mode.    audioBandwidth  number    A max audio bandwidth(kbps). Used only in mesh mode.    videoCodec  string    A video codec like 'H264'. Used only in mesh mode.    audioCodec  string    A video codec like 'PCMU'. Used only in mesh mode.    videoReceiveEnabled  boolean    Set to  true  when the user wants to receive video.    audioReceiveEnabled  boolean    Set to  true  when the user wants to receive video.", 
            "title": "roomOptions object"
        }, 
        {
            "location": "/en/peer/#return-value_4", 
            "text": "Instance of  SFURoom  or  MeshRoom", 
            "title": "Return value"
        }, 
        {
            "location": "/en/peer/#sample_5", 
            "text": "const   room   =   peer . joinRoom ( roomName ,   { \n   mode :   mesh ,  \n   stream :   localStream ,  });   const   room   =   peer . joinRoom ( roomName ,   { \n   mode :   sfu ,  \n   stream :   localStream ,  });", 
            "title": "Sample"
        }, 
        {
            "location": "/en/peer/#listallpeers", 
            "text": "Call Rest API and get the list of peerIds assciated with API key.", 
            "title": "listAllPeers"
        }, 
        {
            "location": "/en/peer/#parameters_5", 
            "text": "None", 
            "title": "Parameters"
        }, 
        {
            "location": "/en/peer/#return-value_5", 
            "text": "undefined", 
            "title": "Return value"
        }, 
        {
            "location": "/en/peer/#sample_6", 
            "text": "peer . listAllPeers ( peers   =   { \n   console . log ( peers ) \n   // =  [ yNtQkNyjAojJNGrt ,  EzAmgFhCKBQMzKw9 ]  });", 
            "title": "Sample"
        }, 
        {
            "location": "/en/peer/#updatecredential", 
            "text": "Update server-side credential by sending a request in order to extend TTL of authenticaion.", 
            "title": "updateCredential"
        }, 
        {
            "location": "/en/peer/#parameters_6", 
            "text": "Name  Type  Required  Default  Description      mode  credential object  \u2714   The new credential generated by user.", 
            "title": "Parameters"
        }, 
        {
            "location": "/en/peer/#credential-object_1", 
            "text": "Name  Type  Optional  Default  Description      timestamp  number  \u2714   Current UNIX timestamp.    ttl  number  \u2714   Time to live; The credential expires at timestamp + ttl.    authToken  string  \u2714  Default  Credential token calculated with HMAC.", 
            "title": "credential object"
        }, 
        {
            "location": "/en/peer/#return-value_6", 
            "text": "undefined", 
            "title": "Return value"
        }, 
        {
            "location": "/en/peer/#events", 
            "text": "", 
            "title": "Events"
        }, 
        {
            "location": "/en/peer/#open", 
            "text": "Successfully connected to signaling server.     Type  Description      string  Peer ID", 
            "title": "open"
        }, 
        {
            "location": "/en/peer/#sample_7", 
            "text": "peer . on ( open ,   id   =   { \n   console . log ( id );  })", 
            "title": "Sample"
        }, 
        {
            "location": "/en/peer/#call_1", 
            "text": "Received a call with Media channel(audio and/or video) from peer.     Type  Description      MediaConnection  MediaConnection instance.", 
            "title": "call"
        }, 
        {
            "location": "/en/peer/#sample_8", 
            "text": "peer . on ( call ,   call   =   { \n   // answer with media stream \n   call . answer ( mediaStream );  });", 
            "title": "Sample"
        }, 
        {
            "location": "/en/peer/#close", 
            "text": "Finished closing all connections to peers.", 
            "title": "close"
        }, 
        {
            "location": "/en/peer/#connection", 
            "text": "Received a connection from peer.     Type  Description      DataConnection  DataConnection instance.", 
            "title": "connection"
        }, 
        {
            "location": "/en/peer/#sample_9", 
            "text": "peer . on ( connection ,   connection   =   { \n   console . log ( connection );  });", 
            "title": "sample"
        }, 
        {
            "location": "/en/peer/#disconnected", 
            "text": "Disconnected from the signalling server.     Type  Description      string  Peer ID", 
            "title": "disconnected"
        }, 
        {
            "location": "/en/peer/#expiresin", 
            "text": "The event occurs before credential expired.     Type  Description      number  The second before credential expires", 
            "title": "expiresin"
        }, 
        {
            "location": "/en/peer/#error", 
            "text": "Events when error occur.     Type  Description      room-error  Room name must be defined.     Room type is different (e.g. On the condition that the mesh room was created, that another user tries to create SFU room with same room name of Mesh cause this error)     SFU usage is disabled. Please enable SFU usage on dashboard.     Unknown-error. Please wait for a while and connect again.     Failed to fetch the room log. Please wait for a while and connect again    authentication  Failed to authenticate    permission  The room usage is not permitted    list-error  Look like you have permission to list peers IDs. Please enable the ECLWebRTC REST API on dashboard.    disconnected  Cannot connect to new Peer before connecting to ECLWebRTC server or after disconnecting from the server.    socket-error  Lost connection to server    invalid-id  ID is invalid.    invalid-key  API is invalid    server-error  Could not get peers from the server.", 
            "title": "error"
        }, 
        {
            "location": "/en/peer/#sample_10", 
            "text": "// When calling joinRoom() without room name  peer . on ( error ,   error   =   { \n   console . log ( ` ${ error . type } :  ${ error . message } ` ); \n   // =  room-error: Room name must be defined.  });", 
            "title": "Sample"
        }, 
        {
            "location": "/en/mediaconnection/", 
            "text": "Class that manages media connections to other peers.\n\n\nConstructor\n\n\nConstructor should not be used. Instead, it is used used in only SDK.\nMediaConnection instance can be created \ncall\n and \npeer.on('call')\n.\n\n\nSample\n\n\n// Calling party\n\n\nmediaConnection\n \n=\n \npeer1\n.\ncall\n(\npeerID\n,\n \nmediaStream\n);\n\n\n\n// Called party\n\n\npeer2\n.\non\n(\ncall\n,\n \ncall\n \n=\n \n{\n\n  \n// answer with called party\ns media stream.\n\n  \ncall\n.\nanswer\n(\nmediaStream2\n)\n\n\n});\n\n\n\n\n\n\nMembers\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmetadata\n\n\nobject\n\n\nAny additional information to send to the peer.\n\n\n\n\n\n\nopen\n\n\nboolean\n\n\nWhether the Connection has been opened or not.\n\n\n\n\n\n\nremoteId\n\n\nstring\n\n\nPeerId of the peer this connection is connected to.\n\n\n\n\n\n\npeer\n\n\nstring\n\n\nDeprecated\n The remote peerId. Use \nremoteId\n instead.\n\n\n\n\n\n\n\n\nSample\n\n\n// When calling party set `metadata: { foo: \nbar\n }`\n\n\npeer\n.\non\n(\ncall\n,\n \ncall\n \n=\n \n{\n\n  \nconsole\n.\nlog\n(\ncall\n.\nmetadata\n);\n\n  \n// =\n {foo: \nbar\n}\n\n\n});\n\n\n\n\n\n\nMethods\n\n\nanswer\n\n\nCreate and send an answer message.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequire\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstream\n\n\nMediaStream\n\n\n\u2605\n\n\n\n\nThe stream to send to the peer.\n\n\n\n\n\n\noptions\n\n\nanswer options object\n\n\n\n\n\n\nOptional arguments for the connection.\n\n\n\n\n\n\n\n\nanswer options object\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvideoBandwidth\n\n\nnumber\n\n\n\n\n\n\nA max video bandwidth(kbps)\n\n\n\n\n\n\naudioBandwidth\n\n\nnumber\n\n\n\n\n\n\nA max audio bandwidth(kbps)\n\n\n\n\n\n\nvideoCodec\n\n\nstring\n\n\n\n\n\n\nA video codec like 'H264'\n\n\n\n\n\n\naudioCodec\n\n\nstring\n\n\n\n\n\n\nA video codec like 'PCMU'\n\n\n\n\n\n\n\n\nReturn value\n\n\nundefined\n\n\nSample\n\n\npeer\n.\non\n(\ncall\n,\n \ncall\n \n=\n \n{\n\n  \ncall\n.\nanswer\n(\nmediaStream\n);\n\n\n});\n\n\n\n\n\n\nclose\n\n\nDisconnect from remote peer.\n\n\nParameters\n\n\nNone\n\n\nReturn value\n\n\nundefined\n\n\nSample\n\n\ncall\n.\nclose\n();\n\n\n\n\n\n\nreplaceStream\n\n\nReplace the stream being sent with a new one.\nThe new one can be audio only stream, or both audio and video stream.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nOptional\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstream\n\n\nMediaStream\n\n\n\n\n\n\nThe stream to replace the old stream with.\n\n\n\n\n\n\n\n\nReturn value\n\n\nundefined\n\n\nSample\n\n\n// newStream\n\n\ncall\n.\nreplaceStream\n(\nnewStream\n);\n\n\n\n\n\n\nEvents\n\n\nstream\n\n\nMediaStream received from peer.\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nMediaStream\n\n\nMediaStream instance\n\n\n\n\n\n\n\n\nSample\n\n\ncall\n.\non\n(\nstream\n,\n \nstream\n \n=\n \n{\n\n  \nconsole\n.\nlog\n(\nstream\n);\n\n\n});\n\n\n\n\n\n\nclose\n\n\nConnection closed event.\n\n\nremoveStream\n\n\nMediaStream\n from peer was removed.\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nMediaStream\n\n\nMediaStream instance", 
            "title": "MediaConnection"
        }, 
        {
            "location": "/en/mediaconnection/#constructor", 
            "text": "Constructor should not be used. Instead, it is used used in only SDK.\nMediaConnection instance can be created  call  and  peer.on('call') .", 
            "title": "Constructor"
        }, 
        {
            "location": "/en/mediaconnection/#sample", 
            "text": "// Calling party  mediaConnection   =   peer1 . call ( peerID ,   mediaStream );  // Called party  peer2 . on ( call ,   call   =   { \n   // answer with called party s media stream. \n   call . answer ( mediaStream2 )  });", 
            "title": "Sample"
        }, 
        {
            "location": "/en/mediaconnection/#members", 
            "text": "Name  Type  Description      metadata  object  Any additional information to send to the peer.    open  boolean  Whether the Connection has been opened or not.    remoteId  string  PeerId of the peer this connection is connected to.    peer  string  Deprecated  The remote peerId. Use  remoteId  instead.", 
            "title": "Members"
        }, 
        {
            "location": "/en/mediaconnection/#sample_1", 
            "text": "// When calling party set `metadata: { foo:  bar  }`  peer . on ( call ,   call   =   { \n   console . log ( call . metadata ); \n   // =  {foo:  bar }  });", 
            "title": "Sample"
        }, 
        {
            "location": "/en/mediaconnection/#methods", 
            "text": "", 
            "title": "Methods"
        }, 
        {
            "location": "/en/mediaconnection/#answer", 
            "text": "Create and send an answer message.", 
            "title": "answer"
        }, 
        {
            "location": "/en/mediaconnection/#parameters", 
            "text": "Name  Type  Require  Default  Description      stream  MediaStream  \u2605   The stream to send to the peer.    options  answer options object    Optional arguments for the connection.", 
            "title": "Parameters"
        }, 
        {
            "location": "/en/mediaconnection/#answer-options-object", 
            "text": "Name  Type  Required  Default  Description      videoBandwidth  number    A max video bandwidth(kbps)    audioBandwidth  number    A max audio bandwidth(kbps)    videoCodec  string    A video codec like 'H264'    audioCodec  string    A video codec like 'PCMU'", 
            "title": "answer options object"
        }, 
        {
            "location": "/en/mediaconnection/#return-value", 
            "text": "undefined", 
            "title": "Return value"
        }, 
        {
            "location": "/en/mediaconnection/#sample_2", 
            "text": "peer . on ( call ,   call   =   { \n   call . answer ( mediaStream );  });", 
            "title": "Sample"
        }, 
        {
            "location": "/en/mediaconnection/#close", 
            "text": "Disconnect from remote peer.", 
            "title": "close"
        }, 
        {
            "location": "/en/mediaconnection/#parameters_1", 
            "text": "None", 
            "title": "Parameters"
        }, 
        {
            "location": "/en/mediaconnection/#return-value_1", 
            "text": "undefined", 
            "title": "Return value"
        }, 
        {
            "location": "/en/mediaconnection/#sample_3", 
            "text": "call . close ();", 
            "title": "Sample"
        }, 
        {
            "location": "/en/mediaconnection/#replacestream", 
            "text": "Replace the stream being sent with a new one.\nThe new one can be audio only stream, or both audio and video stream.", 
            "title": "replaceStream"
        }, 
        {
            "location": "/en/mediaconnection/#parameters_2", 
            "text": "Name  Type  Optional  Default  Description      stream  MediaStream    The stream to replace the old stream with.", 
            "title": "Parameters"
        }, 
        {
            "location": "/en/mediaconnection/#return-value_2", 
            "text": "undefined", 
            "title": "Return value"
        }, 
        {
            "location": "/en/mediaconnection/#sample_4", 
            "text": "// newStream  call . replaceStream ( newStream );", 
            "title": "Sample"
        }, 
        {
            "location": "/en/mediaconnection/#events", 
            "text": "", 
            "title": "Events"
        }, 
        {
            "location": "/en/mediaconnection/#stream", 
            "text": "MediaStream received from peer.     Type  Description      MediaStream  MediaStream instance", 
            "title": "stream"
        }, 
        {
            "location": "/en/mediaconnection/#sample_5", 
            "text": "call . on ( stream ,   stream   =   { \n   console . log ( stream );  });", 
            "title": "Sample"
        }, 
        {
            "location": "/en/mediaconnection/#close_1", 
            "text": "Connection closed event.", 
            "title": "close"
        }, 
        {
            "location": "/en/mediaconnection/#removestream", 
            "text": "MediaStream  from peer was removed.     Type  Description      MediaStream  MediaStream instance", 
            "title": "removeStream"
        }, 
        {
            "location": "/en/dataconnection/", 
            "text": "Class that manages data connections to other peers.\n\n\nConstructor\n\n\nConstructor should not be used. Instead, it is used used in only SDK.\nMediaConnection instance can be created \nconnect\n and \npeer.on('connection')\n.\n\n\nSample\n\n\n// Calling party\n\n\ndataConnection\n \n=\n \npeer\n.\nconnect\n(\npeerID\n);\n\n\n\n// Called party\n\n\npeer\n.\non\n(\nconnection\n,\n \nconnection\n \n=\n \n{\n\n  \nconsole\n.\nlog\n(\nconnection\n);\n\n\n});\n\n\n\n\n\n\nMembers\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmetadata\n\n\nobject\n\n\nAny additional information to send to the peer.\n\n\n\n\n\n\nopen\n\n\nboolean\n\n\nWhether the Connection has been opened or not.\n\n\n\n\n\n\nremoteId\n\n\nstring\n\n\nPeerId of the peer this connection is connected to.\n\n\n\n\n\n\npeer\n\n\nstring\n\n\nDeprecated\n The remote peerId. use \nremoteId\n instead.\n\n\n\n\n\n\n\n\nSample\n\n\npeer\n.\non\n(\nconnection\n,\n \nconnection\n \n=\n \n{\n\n  \nconsole\n.\nlog\n(\nconnection\n.\nmetadata\n);\n\n  \n// =\n Show metadata which calling party added\n\n\n});\n\n\n\n\n\n\nMethods\n\n\nsend\n\n\nSend data to peer. If serialization is 'binary', it will chunk it before sending.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndata\n\n\n*\n\n\n\u2714\n\n\n\n\nThe data to send to the peer.\n\n\n\n\n\n\n\n\nReturn value\n\n\nundefined\n\n\nSample\n\n\n// Send \nhello world\n string.\n\n\ndataConnection\n.\nsend\n(\nhello world\n);\n\n\n\n// \ndata\n events fires on received side\n\n\ndataConnection\n.\non\n(\ndata\n,\n \ndata\n \n=\n \n{\n\n  \nconsole\n.\nlog\n(\nhello world\n);\n\n  \n// =\n \nhello world\n\n\n});\n\n\n\n\n\n\nclose\n\n\nDisconnect from remote peer.\n\n\nParameters\n\n\nNone\n\n\nReturn value\n\n\nundefined\n\n\nSample\n\n\ncall\n.\nclose\n();\n\n\n\n\n\n\nEvents\n\n\ndata\n\n\nReceived data event.\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n*\n\n\nReceived data\n\n\n\n\n\n\n\n\nSample\n\n\ndataConnection\n.\non\n(\ndata\n,\n \ndata\n \n=\n \n{\n\n  \nconsole\n.\nlog\n(\nhello world\n);\n\n  \n// =\n \nhello world\n\n\n});\n\n\n\n\n\n\nclose\n\n\nConnection closed event.", 
            "title": "DataConnection"
        }, 
        {
            "location": "/en/dataconnection/#constructor", 
            "text": "Constructor should not be used. Instead, it is used used in only SDK.\nMediaConnection instance can be created  connect  and  peer.on('connection') .", 
            "title": "Constructor"
        }, 
        {
            "location": "/en/dataconnection/#sample", 
            "text": "// Calling party  dataConnection   =   peer . connect ( peerID );  // Called party  peer . on ( connection ,   connection   =   { \n   console . log ( connection );  });", 
            "title": "Sample"
        }, 
        {
            "location": "/en/dataconnection/#members", 
            "text": "Name  Type  Description      metadata  object  Any additional information to send to the peer.    open  boolean  Whether the Connection has been opened or not.    remoteId  string  PeerId of the peer this connection is connected to.    peer  string  Deprecated  The remote peerId. use  remoteId  instead.", 
            "title": "Members"
        }, 
        {
            "location": "/en/dataconnection/#sample_1", 
            "text": "peer . on ( connection ,   connection   =   { \n   console . log ( connection . metadata ); \n   // =  Show metadata which calling party added  });", 
            "title": "Sample"
        }, 
        {
            "location": "/en/dataconnection/#methods", 
            "text": "", 
            "title": "Methods"
        }, 
        {
            "location": "/en/dataconnection/#send", 
            "text": "Send data to peer. If serialization is 'binary', it will chunk it before sending.", 
            "title": "send"
        }, 
        {
            "location": "/en/dataconnection/#parameters", 
            "text": "Name  Type  Required  Default  Description      data  *  \u2714   The data to send to the peer.", 
            "title": "Parameters"
        }, 
        {
            "location": "/en/dataconnection/#return-value", 
            "text": "undefined", 
            "title": "Return value"
        }, 
        {
            "location": "/en/dataconnection/#sample_2", 
            "text": "// Send  hello world  string.  dataConnection . send ( hello world );  //  data  events fires on received side  dataConnection . on ( data ,   data   =   { \n   console . log ( hello world ); \n   // =   hello world  });", 
            "title": "Sample"
        }, 
        {
            "location": "/en/dataconnection/#close", 
            "text": "Disconnect from remote peer.", 
            "title": "close"
        }, 
        {
            "location": "/en/dataconnection/#parameters_1", 
            "text": "None", 
            "title": "Parameters"
        }, 
        {
            "location": "/en/dataconnection/#return-value_1", 
            "text": "undefined", 
            "title": "Return value"
        }, 
        {
            "location": "/en/dataconnection/#sample_3", 
            "text": "call . close ();", 
            "title": "Sample"
        }, 
        {
            "location": "/en/dataconnection/#events", 
            "text": "", 
            "title": "Events"
        }, 
        {
            "location": "/en/dataconnection/#data", 
            "text": "Received data event.     Type  Description      *  Received data", 
            "title": "data"
        }, 
        {
            "location": "/en/dataconnection/#sample_4", 
            "text": "dataConnection . on ( data ,   data   =   { \n   console . log ( hello world ); \n   // =   hello world  });", 
            "title": "Sample"
        }, 
        {
            "location": "/en/dataconnection/#close_1", 
            "text": "Connection closed event.", 
            "title": "close"
        }, 
        {
            "location": "/en/meshroom/", 
            "text": "Class that manages fullmesh type room.\n\n\nConstructor\n\n\nConstructor should not be used. Instead, it is used used in only SDK.\nMeshroom instance is created by \njoinRoom()\n.\n\n\nSample\n\n\nmeshRoom\n \n=\n \npeer\n.\njoinRoom\n(\nroomName\n);\n\n\n\n\n\n\nMethods\n\n\nclose\n\n\nClose all connections in the room.\n\n\nParameters\n\n\nNone\n\n\nReturn value\n\n\nundefined\n\n\nSample\n\n\nroom\n.\nclose\n();\n\n\n\n\n\n\ngetLog\n\n\nStart getting room's logs from signaling server.\nWhen fetching logs succeeds, \nlog\n event fires.\n\n\nParameters\n\n\nNone\n\n\nReturn value\n\n\nundefined\n\n\nSample\n\n\nroom\n.\ngetLog\n();\n\n\n\n\n\n\nreplaceStream\n\n\nReplace the stream being sent on all MediaConnections with a new one.\nYou may change receive only mode to both send and receive mode.\nAlso, changing audio only stream to both audio and video stream is supported.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstream\n\n\nMediaStream\n\n\n\n\n\n\nThe stream to replace the old stream with.\n\n\n\n\n\n\n\n\nReturn value\n\n\nundefined\n\n\nSample\n\n\n// newStream\n\n\nmeshRoom\n.\nreplaceStream\n(\nnewStream\n);\n\n\n\n\n\n\nsend\n\n\nSend data to all participants in the room with WebSocket. It emits broadcast event.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndata\n\n\n*\n\n\n\u2714\n\n\n\n\nThe data to send.\n\n\n\n\n\n\n\n\nEvents\n\n\nopen\n\n\nRoom is ready.\n\n\npeerJoin\n\n\nNew peer has joined.\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstring\n\n\nNewly joined Peer ID\n\n\n\n\n\n\n\n\npeerLeave\n\n\nA peer has left.\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstring\n\n\nThe left Peer ID\n\n\n\n\n\n\n\n\nlog\n\n\nRoom's log received.\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nArray\n\n\nlogs\n\n\n\n\n\n\n\n\nstream\n\n\nMediaStream received from peer in the room.\nThe Peer ID of stream origin can be obtained via \nstream.peerId\n.\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nMediaStream\n\n\nMediaStream instance\n\n\n\n\n\n\n\n\nSample\n\n\nroom\n.\non\n(\nstream\n,\n \nstream\n \n=\n{\n\n    \n// e.g. setting stream to \nvideo\n\n\n});\n\n\n\n\n\n\ndata\n\n\nData received from peer.\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nobject\n\n\ndata object\n\n\n\n\n\n\n\n\ndata object\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsrc\n\n\nstring\n\n\nThe peerId of the peer who sent the data.\n\n\n\n\n\n\ndata\n\n\n*\n\n\nThe data that a peer sent in the room.\n\n\n\n\n\n\n\n\nclose\n\n\nAll connections in the room has closed.\n\n\nremoveStream\n\n\nMediaStream\n is removed from the room.\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nMediaStream\n\n\nMediaStream instance\n\n\n\n\n\n\n\n\nSample\n\n\nmeshRoom\n.\non\n(\nremoveStream\n,\n \nstream\n \n=\n \n{\n\n    \n// e.g. getting the peer ID who removed stream\n\n  \nconst\n \npeerId\n \n=\n \nstream\n.\npeerId\n;\n\n\n}", 
            "title": "MeshRoom"
        }, 
        {
            "location": "/en/meshroom/#constructor", 
            "text": "Constructor should not be used. Instead, it is used used in only SDK.\nMeshroom instance is created by  joinRoom() .", 
            "title": "Constructor"
        }, 
        {
            "location": "/en/meshroom/#sample", 
            "text": "meshRoom   =   peer . joinRoom ( roomName );", 
            "title": "Sample"
        }, 
        {
            "location": "/en/meshroom/#methods", 
            "text": "", 
            "title": "Methods"
        }, 
        {
            "location": "/en/meshroom/#close", 
            "text": "Close all connections in the room.", 
            "title": "close"
        }, 
        {
            "location": "/en/meshroom/#parameters", 
            "text": "None", 
            "title": "Parameters"
        }, 
        {
            "location": "/en/meshroom/#return-value", 
            "text": "undefined", 
            "title": "Return value"
        }, 
        {
            "location": "/en/meshroom/#sample_1", 
            "text": "room . close ();", 
            "title": "Sample"
        }, 
        {
            "location": "/en/meshroom/#getlog", 
            "text": "Start getting room's logs from signaling server.\nWhen fetching logs succeeds,  log  event fires.", 
            "title": "getLog"
        }, 
        {
            "location": "/en/meshroom/#parameters_1", 
            "text": "None", 
            "title": "Parameters"
        }, 
        {
            "location": "/en/meshroom/#return-value_1", 
            "text": "undefined", 
            "title": "Return value"
        }, 
        {
            "location": "/en/meshroom/#sample_2", 
            "text": "room . getLog ();", 
            "title": "Sample"
        }, 
        {
            "location": "/en/meshroom/#replacestream", 
            "text": "Replace the stream being sent on all MediaConnections with a new one.\nYou may change receive only mode to both send and receive mode.\nAlso, changing audio only stream to both audio and video stream is supported.", 
            "title": "replaceStream"
        }, 
        {
            "location": "/en/meshroom/#parameters_2", 
            "text": "Name  Type  Required  Default  Description      stream  MediaStream    The stream to replace the old stream with.", 
            "title": "Parameters"
        }, 
        {
            "location": "/en/meshroom/#return-value_2", 
            "text": "undefined", 
            "title": "Return value"
        }, 
        {
            "location": "/en/meshroom/#sample_3", 
            "text": "// newStream  meshRoom . replaceStream ( newStream );", 
            "title": "Sample"
        }, 
        {
            "location": "/en/meshroom/#send", 
            "text": "Send data to all participants in the room with WebSocket. It emits broadcast event.", 
            "title": "send"
        }, 
        {
            "location": "/en/meshroom/#parameters_3", 
            "text": "Name  Type  Required  Default  Description      data  *  \u2714   The data to send.", 
            "title": "Parameters"
        }, 
        {
            "location": "/en/meshroom/#events", 
            "text": "", 
            "title": "Events"
        }, 
        {
            "location": "/en/meshroom/#open", 
            "text": "Room is ready.", 
            "title": "open"
        }, 
        {
            "location": "/en/meshroom/#peerjoin", 
            "text": "New peer has joined.     Type  Description      string  Newly joined Peer ID", 
            "title": "peerJoin"
        }, 
        {
            "location": "/en/meshroom/#peerleave", 
            "text": "A peer has left.     Type  Description      string  The left Peer ID", 
            "title": "peerLeave"
        }, 
        {
            "location": "/en/meshroom/#log", 
            "text": "Room's log received.     Type  Description      Array  logs", 
            "title": "log"
        }, 
        {
            "location": "/en/meshroom/#stream", 
            "text": "MediaStream received from peer in the room.\nThe Peer ID of stream origin can be obtained via  stream.peerId .     Type  Description      MediaStream  MediaStream instance", 
            "title": "stream"
        }, 
        {
            "location": "/en/meshroom/#sample_4", 
            "text": "room . on ( stream ,   stream   = { \n     // e.g. setting stream to  video  });", 
            "title": "Sample"
        }, 
        {
            "location": "/en/meshroom/#data", 
            "text": "Data received from peer.     Type  Description      object  data object", 
            "title": "data"
        }, 
        {
            "location": "/en/meshroom/#data-object", 
            "text": "Name  Type  Description      src  string  The peerId of the peer who sent the data.    data  *  The data that a peer sent in the room.", 
            "title": "data object"
        }, 
        {
            "location": "/en/meshroom/#close_1", 
            "text": "All connections in the room has closed.", 
            "title": "close"
        }, 
        {
            "location": "/en/meshroom/#removestream", 
            "text": "MediaStream  is removed from the room.     Type  Description      MediaStream  MediaStream instance", 
            "title": "removeStream"
        }, 
        {
            "location": "/en/meshroom/#sample_5", 
            "text": "meshRoom . on ( removeStream ,   stream   =   { \n     // e.g. getting the peer ID who removed stream \n   const   peerId   =   stream . peerId ;  }", 
            "title": "Sample"
        }, 
        {
            "location": "/en/sfuroom/", 
            "text": "Class that manages SFU type room.\n\n\nConstructor\n\n\nConstructor should not be used. Instead, it is used used in only SDK.\nSfuRoom instance is created by \njoinRoom()\n.\n\n\nSample\n\n\nsfuRoom\n \n=\n \npeer\n.\njoinRoom\n(\nroomName\n,\n \n{\nmode\n:\n \nsfu\n,\n \nstream\n:\n \nlocalStream\n});\n\n\n\n\n\n\nMethods\n\n\nclose\n\n\nClose all connections in the room and disconnect connections to other users.\n\n\nParameters\n\n\nNone\n\n\nReturn value\n\n\nundefined\n\n\nSample\n\n\nroom\n.\nclose\n();\n\n\n\n\n\n\ngetLog\n\n\nStart getting room's logs from signaling server.\nWhen fetching logs succeeds, \nlog\n event fires.\n\n\nParameters\n\n\nNone\n\n\nReturn value\n\n\nundefined\n\n\nSample\n\n\nroom\n.\ngetLog\n();\n\n\n\n\n\n\nreplaceStream\n\n\nReplace the stream being sent on all MediaConnections with a new one.\nYou may change receive only mode to both send and receive mode.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstream\n\n\nMediaStream\n\n\n\n\n\n\nThe stream to replace the old stream with.\n\n\n\n\n\n\n\n\nReturn value\n\n\nundefined\n\n\nSample\n\n\n// newStream\n\n\nsfuRoom\n.\nreplaceStream\n(\nnewStream\n);\n\n\n\n\n\n\nsend\n\n\nSend data to all participants in the room with WebSocket. It emits broadcast event.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndata\n\n\n*\n\n\n\u2714\n\n\n\n\nThe data to send.\n\n\n\n\n\n\n\n\nEvents\n\n\nopen\n\n\nRoom is ready.\n\n\npeerJoin\n\n\nA peer has left.\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstring\n\n\nNewly joined Peer ID\n\n\n\n\n\n\n\n\npeerLeave\n\n\nA peer has left.\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstring\n\n\nThe left Peer ID\n\n\n\n\n\n\n\n\nlog\n\n\nRoom's log received.\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nArray\n\n\nlogs\n\n\n\n\n\n\n\n\nstream\n\n\nMediaStream received from peer in the room.\nThe Peer ID of stream origin can be obtained via \nstream.peerId\n.\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nMediaStream\n\n\nMediaStream instance\n\n\n\n\n\n\n\n\nSample\n\n\nroom\n.\non\n(\nstream\n,\n \nstream\n \n=\n{\n\n  \n// e.g. setting stream to \nvideo\n\n\n});\n\n\n\n\n\n\ndata\n\n\nData received from peer.\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nobject\n\n\ndata object\n\n\n\n\n\n\n\n\ndata object\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsrc\n\n\nstring\n\n\nThe peerId of the peer who sent the data.\n\n\n\n\n\n\ndata\n\n\n*\n\n\nThe data that a peer sent in the room.\n\n\n\n\n\n\n\n\nclose\n\n\nAll connections in the room has closed.\n\n\nremoveStream\n\n\nMediaStream\n is removed from the room.\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nMediaStream\n\n\nMediaStream instance\n\n\n\n\n\n\n\n\nSample\n\n\nsfuRoom\n.\non\n(\nremoveStream\n,\n \nstream\n \n=\n \n{\n\n  \n// e.g. getting the peer ID who removed stream\n\n  \nconst\n \npeerId\n \n=\n \nstream\n.\npeerId\n;\n\n\n}", 
            "title": "SFURoom"
        }, 
        {
            "location": "/en/sfuroom/#constructor", 
            "text": "Constructor should not be used. Instead, it is used used in only SDK.\nSfuRoom instance is created by  joinRoom() .", 
            "title": "Constructor"
        }, 
        {
            "location": "/en/sfuroom/#sample", 
            "text": "sfuRoom   =   peer . joinRoom ( roomName ,   { mode :   sfu ,   stream :   localStream });", 
            "title": "Sample"
        }, 
        {
            "location": "/en/sfuroom/#methods", 
            "text": "", 
            "title": "Methods"
        }, 
        {
            "location": "/en/sfuroom/#close", 
            "text": "Close all connections in the room and disconnect connections to other users.", 
            "title": "close"
        }, 
        {
            "location": "/en/sfuroom/#parameters", 
            "text": "None", 
            "title": "Parameters"
        }, 
        {
            "location": "/en/sfuroom/#return-value", 
            "text": "undefined", 
            "title": "Return value"
        }, 
        {
            "location": "/en/sfuroom/#sample_1", 
            "text": "room . close ();", 
            "title": "Sample"
        }, 
        {
            "location": "/en/sfuroom/#getlog", 
            "text": "Start getting room's logs from signaling server.\nWhen fetching logs succeeds,  log  event fires.", 
            "title": "getLog"
        }, 
        {
            "location": "/en/sfuroom/#parameters_1", 
            "text": "None", 
            "title": "Parameters"
        }, 
        {
            "location": "/en/sfuroom/#return-value_1", 
            "text": "undefined", 
            "title": "Return value"
        }, 
        {
            "location": "/en/sfuroom/#sample_2", 
            "text": "room . getLog ();", 
            "title": "Sample"
        }, 
        {
            "location": "/en/sfuroom/#replacestream", 
            "text": "Replace the stream being sent on all MediaConnections with a new one.\nYou may change receive only mode to both send and receive mode.", 
            "title": "replaceStream"
        }, 
        {
            "location": "/en/sfuroom/#parameters_2", 
            "text": "Name  Type  Required  Default  Description      stream  MediaStream    The stream to replace the old stream with.", 
            "title": "Parameters"
        }, 
        {
            "location": "/en/sfuroom/#return-value_2", 
            "text": "undefined", 
            "title": "Return value"
        }, 
        {
            "location": "/en/sfuroom/#sample_3", 
            "text": "// newStream  sfuRoom . replaceStream ( newStream );", 
            "title": "Sample"
        }, 
        {
            "location": "/en/sfuroom/#send", 
            "text": "Send data to all participants in the room with WebSocket. It emits broadcast event.", 
            "title": "send"
        }, 
        {
            "location": "/en/sfuroom/#parameters_3", 
            "text": "Name  Type  Required  Default  Description      data  *  \u2714   The data to send.", 
            "title": "Parameters"
        }, 
        {
            "location": "/en/sfuroom/#events", 
            "text": "", 
            "title": "Events"
        }, 
        {
            "location": "/en/sfuroom/#open", 
            "text": "Room is ready.", 
            "title": "open"
        }, 
        {
            "location": "/en/sfuroom/#peerjoin", 
            "text": "A peer has left.     Type  Description      string  Newly joined Peer ID", 
            "title": "peerJoin"
        }, 
        {
            "location": "/en/sfuroom/#peerleave", 
            "text": "A peer has left.     Type  Description      string  The left Peer ID", 
            "title": "peerLeave"
        }, 
        {
            "location": "/en/sfuroom/#log", 
            "text": "Room's log received.     Type  Description      Array  logs", 
            "title": "log"
        }, 
        {
            "location": "/en/sfuroom/#stream", 
            "text": "MediaStream received from peer in the room.\nThe Peer ID of stream origin can be obtained via  stream.peerId .     Type  Description      MediaStream  MediaStream instance", 
            "title": "stream"
        }, 
        {
            "location": "/en/sfuroom/#sample_4", 
            "text": "room . on ( stream ,   stream   = { \n   // e.g. setting stream to  video  });", 
            "title": "Sample"
        }, 
        {
            "location": "/en/sfuroom/#data", 
            "text": "Data received from peer.     Type  Description      object  data object", 
            "title": "data"
        }, 
        {
            "location": "/en/sfuroom/#data-object", 
            "text": "Name  Type  Description      src  string  The peerId of the peer who sent the data.    data  *  The data that a peer sent in the room.", 
            "title": "data object"
        }, 
        {
            "location": "/en/sfuroom/#close_1", 
            "text": "All connections in the room has closed.", 
            "title": "close"
        }, 
        {
            "location": "/en/sfuroom/#removestream", 
            "text": "MediaStream  is removed from the room.     Type  Description      MediaStream  MediaStream instance", 
            "title": "removeStream"
        }, 
        {
            "location": "/en/sfuroom/#sample_5", 
            "text": "sfuRoom . on ( removeStream ,   stream   =   { \n   // e.g. getting the peer ID who removed stream \n   const   peerId   =   stream . peerId ;  }", 
            "title": "Sample"
        }
    ]
}