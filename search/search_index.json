{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u65e5\u672c\u8a9e\u30b5\u30a4\u30c8\u306f \u3053\u3061\u3089 English site is here","title":"Home"},{"location":"en/","text":"This document is ECLWebRTC JavaScript SDK API Reference. See English version from here . See Communication model of ECLWebRTC if this is the first time for you to develop applciation with ECLWebRTC.","title":"Introduction"},{"location":"en/dataconnection/","text":"Class that manages data connections to other peers. Constructor \u00b6 Constructor should not be used. Instead, it is used used in only SDK. MediaConnection instance can be created connect and peer.on('connection') . Sample \u00b6 // Calling party dataConnection = peer . connect ( 'peerID' ); // Called party peer . on ( 'connection' , connection => { console . log ( connection ); }); Members \u00b6 Name Type Description metadata object Any additional information to send to the peer. open boolean Whether the Connection has been opened or not. remoteId string PeerId of the peer this connection is connected to. peer string Deprecated The remote peerId. use remoteId instead. Sample \u00b6 peer . on ( 'connection' , connection => { console . log ( connection . metadata ); // => Show metadata which calling party added }); Methods \u00b6 send \u00b6 Send data to peer. If serialization is 'binary', it will chunk it before sending. Parameters \u00b6 Name Type Required Default Description data * \u2714 The data to send to the peer. Return value \u00b6 undefined Sample \u00b6 // Send 'hello world' string. dataConnection . send ( 'hello world' ); // 'data' events fires on received side dataConnection . on ( 'data' , data => { console . log ( 'hello world' ); // => 'hello world' }); close \u00b6 Disconnect from remote peer. Parameters \u00b6 None Return value \u00b6 undefined Sample \u00b6 call . close (); Events \u00b6 data \u00b6 Received data event. Type Description * Received data Sample \u00b6 dataConnection . on ( 'data' , data => { console . log ( 'hello world' ); // => 'hello world' }); close \u00b6 Connection closed event.","title":"DataConnection"},{"location":"en/dataconnection/#constructor","text":"Constructor should not be used. Instead, it is used used in only SDK. MediaConnection instance can be created connect and peer.on('connection') .","title":"Constructor"},{"location":"en/dataconnection/#sample","text":"// Calling party dataConnection = peer . connect ( 'peerID' ); // Called party peer . on ( 'connection' , connection => { console . log ( connection ); });","title":"Sample"},{"location":"en/dataconnection/#members","text":"Name Type Description metadata object Any additional information to send to the peer. open boolean Whether the Connection has been opened or not. remoteId string PeerId of the peer this connection is connected to. peer string Deprecated The remote peerId. use remoteId instead.","title":"Members"},{"location":"en/dataconnection/#sample_1","text":"peer . on ( 'connection' , connection => { console . log ( connection . metadata ); // => Show metadata which calling party added });","title":"Sample"},{"location":"en/dataconnection/#methods","text":"","title":"Methods"},{"location":"en/dataconnection/#send","text":"Send data to peer. If serialization is 'binary', it will chunk it before sending.","title":"send"},{"location":"en/dataconnection/#parameters","text":"Name Type Required Default Description data * \u2714 The data to send to the peer.","title":"Parameters"},{"location":"en/dataconnection/#return-value","text":"undefined","title":"Return value"},{"location":"en/dataconnection/#sample_2","text":"// Send 'hello world' string. dataConnection . send ( 'hello world' ); // 'data' events fires on received side dataConnection . on ( 'data' , data => { console . log ( 'hello world' ); // => 'hello world' });","title":"Sample"},{"location":"en/dataconnection/#close","text":"Disconnect from remote peer.","title":"close"},{"location":"en/dataconnection/#parameters_1","text":"None","title":"Parameters"},{"location":"en/dataconnection/#return-value_1","text":"undefined","title":"Return value"},{"location":"en/dataconnection/#sample_3","text":"call . close ();","title":"Sample"},{"location":"en/dataconnection/#events","text":"","title":"Events"},{"location":"en/dataconnection/#data","text":"Received data event. Type Description * Received data","title":"data"},{"location":"en/dataconnection/#sample_4","text":"dataConnection . on ( 'data' , data => { console . log ( 'hello world' ); // => 'hello world' });","title":"Sample"},{"location":"en/dataconnection/#close_1","text":"Connection closed event.","title":"close"},{"location":"en/mediaconnection/","text":"Class that manages media connections to other peers. Constructor \u00b6 Constructor should not be used. Instead, it is used used in only SDK. MediaConnection instance can be created call and peer.on('call') . Sample \u00b6 // Calling party mediaConnection = peer1 . call ( 'peerID' , mediaStream ); // Called party peer2 . on ( 'call' , call => { // answer with called party's media stream. call . answer ( mediaStream2 ) }); Members \u00b6 Name Type Description metadata object Any additional information to send to the peer. open boolean Whether the Connection has been opened or not. remoteId string PeerId of the peer this connection is connected to. peer string Deprecated The remote peerId. Use remoteId instead. Sample \u00b6 // When calling party set `metadata: { foo: 'bar' }` peer . on ( 'call' , call => { console . log ( call . metadata ); // => {foo: \"bar\"} }); Methods \u00b6 answer \u00b6 Create and send an answer message. Parameters \u00b6 Name Type Require Default Description stream MediaStream \u2605 The stream to send to the peer. options answer options object Optional arguments for the connection. answer options object \u00b6 Name Type Required Default Description videoBandwidth number A max video bandwidth(kbps) audioBandwidth number A max audio bandwidth(kbps) videoCodec string A video codec like 'H264' audioCodec string A video codec like 'PCMU' Return value \u00b6 undefined Sample \u00b6 peer . on ( 'call' , call => { call . answer ( mediaStream ); }); close \u00b6 Disconnect from remote peer. Parameters \u00b6 None Return value \u00b6 undefined Sample \u00b6 call . close (); replaceStream \u00b6 Replace the stream being sent with a new one. The new one can be audio only stream, or both audio and video stream. Parameters \u00b6 Name Type Optional Default Description stream MediaStream The stream to replace the old stream with. Return value \u00b6 undefined Sample \u00b6 // newStream call . replaceStream ( newStream ); Events \u00b6 stream \u00b6 MediaStream received from peer. Type Description MediaStream MediaStream instance Sample \u00b6 call . on ( 'stream' , stream => { console . log ( stream ); }); close \u00b6 Connection closed event. removeStream \u00b6 MediaStream from peer was removed. Type Description MediaStream MediaStream instance","title":"MediaConnection"},{"location":"en/mediaconnection/#constructor","text":"Constructor should not be used. Instead, it is used used in only SDK. MediaConnection instance can be created call and peer.on('call') .","title":"Constructor"},{"location":"en/mediaconnection/#sample","text":"// Calling party mediaConnection = peer1 . call ( 'peerID' , mediaStream ); // Called party peer2 . on ( 'call' , call => { // answer with called party's media stream. call . answer ( mediaStream2 ) });","title":"Sample"},{"location":"en/mediaconnection/#members","text":"Name Type Description metadata object Any additional information to send to the peer. open boolean Whether the Connection has been opened or not. remoteId string PeerId of the peer this connection is connected to. peer string Deprecated The remote peerId. Use remoteId instead.","title":"Members"},{"location":"en/mediaconnection/#sample_1","text":"// When calling party set `metadata: { foo: 'bar' }` peer . on ( 'call' , call => { console . log ( call . metadata ); // => {foo: \"bar\"} });","title":"Sample"},{"location":"en/mediaconnection/#methods","text":"","title":"Methods"},{"location":"en/mediaconnection/#answer","text":"Create and send an answer message.","title":"answer"},{"location":"en/mediaconnection/#parameters","text":"Name Type Require Default Description stream MediaStream \u2605 The stream to send to the peer. options answer options object Optional arguments for the connection.","title":"Parameters"},{"location":"en/mediaconnection/#answer-options-object","text":"Name Type Required Default Description videoBandwidth number A max video bandwidth(kbps) audioBandwidth number A max audio bandwidth(kbps) videoCodec string A video codec like 'H264' audioCodec string A video codec like 'PCMU'","title":"answer options object"},{"location":"en/mediaconnection/#return-value","text":"undefined","title":"Return value"},{"location":"en/mediaconnection/#sample_2","text":"peer . on ( 'call' , call => { call . answer ( mediaStream ); });","title":"Sample"},{"location":"en/mediaconnection/#close","text":"Disconnect from remote peer.","title":"close"},{"location":"en/mediaconnection/#parameters_1","text":"None","title":"Parameters"},{"location":"en/mediaconnection/#return-value_1","text":"undefined","title":"Return value"},{"location":"en/mediaconnection/#sample_3","text":"call . close ();","title":"Sample"},{"location":"en/mediaconnection/#replacestream","text":"Replace the stream being sent with a new one. The new one can be audio only stream, or both audio and video stream.","title":"replaceStream"},{"location":"en/mediaconnection/#parameters_2","text":"Name Type Optional Default Description stream MediaStream The stream to replace the old stream with.","title":"Parameters"},{"location":"en/mediaconnection/#return-value_2","text":"undefined","title":"Return value"},{"location":"en/mediaconnection/#sample_4","text":"// newStream call . replaceStream ( newStream );","title":"Sample"},{"location":"en/mediaconnection/#events","text":"","title":"Events"},{"location":"en/mediaconnection/#stream","text":"MediaStream received from peer. Type Description MediaStream MediaStream instance","title":"stream"},{"location":"en/mediaconnection/#sample_5","text":"call . on ( 'stream' , stream => { console . log ( stream ); });","title":"Sample"},{"location":"en/mediaconnection/#close_1","text":"Connection closed event.","title":"close"},{"location":"en/mediaconnection/#removestream","text":"MediaStream from peer was removed. Type Description MediaStream MediaStream instance","title":"removeStream"},{"location":"en/meshroom/","text":"Class that manages fullmesh type room. Constructor \u00b6 Constructor should not be used. Instead, it is used used in only SDK. Meshroom instance is created by joinRoom() . Sample \u00b6 meshRoom = peer . joinRoom ( 'roomName' ); Methods \u00b6 close \u00b6 Close all connections in the room. Parameters \u00b6 None Return value \u00b6 undefined Sample \u00b6 room . close (); getLog \u00b6 Start getting room's logs from signaling server. When fetching logs succeeds, log event fires. Parameters \u00b6 None Return value \u00b6 undefined Sample \u00b6 room . getLog (); replaceStream \u00b6 Replace the stream being sent on all MediaConnections with a new one. You may change receive only mode to both send and receive mode. Also, changing audio only stream to both audio and video stream is supported. Parameters \u00b6 Name Type Required Default Description stream MediaStream The stream to replace the old stream with. Return value \u00b6 undefined Sample \u00b6 // newStream meshRoom . replaceStream ( newStream ); send \u00b6 Send data to all participants in the room with WebSocket. It emits broadcast event. Parameters \u00b6 Name Type Required Default Description data * \u2714 The data to send. Events \u00b6 open \u00b6 Room is ready. peerJoin \u00b6 New peer has joined. Type Description string Newly joined Peer ID peerLeave \u00b6 A peer has left. Type Description string The left Peer ID log \u00b6 Room's log received. Type Description Array logs stream \u00b6 MediaStream received from peer in the room. The Peer ID of stream origin can be obtained via stream.peerId . Type Description MediaStream MediaStream instance Sample \u00b6 room . on ( 'stream' , stream =>{ // e.g. setting stream to <video> }); data \u00b6 Data received from peer. Type Description object data object data object \u00b6 Name Type Description src string The peerId of the peer who sent the data. data * The data that a peer sent in the room. close \u00b6 All connections in the room has closed. removeStream \u00b6 MediaStream is removed from the room. Type Description MediaStream MediaStream instance Sample \u00b6 meshRoom . on ( 'removeStream' , stream => { // e.g. getting the peer ID who removed stream const peerId = stream . peerId ; }","title":"MeshRoom"},{"location":"en/meshroom/#constructor","text":"Constructor should not be used. Instead, it is used used in only SDK. Meshroom instance is created by joinRoom() .","title":"Constructor"},{"location":"en/meshroom/#sample","text":"meshRoom = peer . joinRoom ( 'roomName' );","title":"Sample"},{"location":"en/meshroom/#methods","text":"","title":"Methods"},{"location":"en/meshroom/#close","text":"Close all connections in the room.","title":"close"},{"location":"en/meshroom/#parameters","text":"None","title":"Parameters"},{"location":"en/meshroom/#return-value","text":"undefined","title":"Return value"},{"location":"en/meshroom/#sample_1","text":"room . close ();","title":"Sample"},{"location":"en/meshroom/#getlog","text":"Start getting room's logs from signaling server. When fetching logs succeeds, log event fires.","title":"getLog"},{"location":"en/meshroom/#parameters_1","text":"None","title":"Parameters"},{"location":"en/meshroom/#return-value_1","text":"undefined","title":"Return value"},{"location":"en/meshroom/#sample_2","text":"room . getLog ();","title":"Sample"},{"location":"en/meshroom/#replacestream","text":"Replace the stream being sent on all MediaConnections with a new one. You may change receive only mode to both send and receive mode. Also, changing audio only stream to both audio and video stream is supported.","title":"replaceStream"},{"location":"en/meshroom/#parameters_2","text":"Name Type Required Default Description stream MediaStream The stream to replace the old stream with.","title":"Parameters"},{"location":"en/meshroom/#return-value_2","text":"undefined","title":"Return value"},{"location":"en/meshroom/#sample_3","text":"// newStream meshRoom . replaceStream ( newStream );","title":"Sample"},{"location":"en/meshroom/#send","text":"Send data to all participants in the room with WebSocket. It emits broadcast event.","title":"send"},{"location":"en/meshroom/#parameters_3","text":"Name Type Required Default Description data * \u2714 The data to send.","title":"Parameters"},{"location":"en/meshroom/#events","text":"","title":"Events"},{"location":"en/meshroom/#open","text":"Room is ready.","title":"open"},{"location":"en/meshroom/#peerjoin","text":"New peer has joined. Type Description string Newly joined Peer ID","title":"peerJoin"},{"location":"en/meshroom/#peerleave","text":"A peer has left. Type Description string The left Peer ID","title":"peerLeave"},{"location":"en/meshroom/#log","text":"Room's log received. Type Description Array logs","title":"log"},{"location":"en/meshroom/#stream","text":"MediaStream received from peer in the room. The Peer ID of stream origin can be obtained via stream.peerId . Type Description MediaStream MediaStream instance","title":"stream"},{"location":"en/meshroom/#sample_4","text":"room . on ( 'stream' , stream =>{ // e.g. setting stream to <video> });","title":"Sample"},{"location":"en/meshroom/#data","text":"Data received from peer. Type Description object data object","title":"data"},{"location":"en/meshroom/#data-object","text":"Name Type Description src string The peerId of the peer who sent the data. data * The data that a peer sent in the room.","title":"data object"},{"location":"en/meshroom/#close_1","text":"All connections in the room has closed.","title":"close"},{"location":"en/meshroom/#removestream","text":"MediaStream is removed from the room. Type Description MediaStream MediaStream instance","title":"removeStream"},{"location":"en/meshroom/#sample_5","text":"meshRoom . on ( 'removeStream' , stream => { // e.g. getting the peer ID who removed stream const peerId = stream . peerId ; }","title":"Sample"},{"location":"en/peer/","text":"Class that manages all p2p connections and rooms. Peer instance must be generated when using ECLWebRTC. Constructor \u00b6 new Peer creates new Peer instance and connects to the signaling server. Parameter \u00b6 Name Type Required Default Description id string User's peerId. options options object \u2714 Optional arguments for the connection. options object \u00b6 Name Type Required Default Description key string \u2714 ECLWebRTC API key. debug number Log level. NONE:0, ERROR:1, WARN:2, FULL:3. turn boolean Whether using ECLWebRTC's TURN or not. credential credential object The credential used to authenticate peer and can be used when authentication is enabled. Check authentication repository to see datails. config RTCConfiguration object Default RTCConfiguration object The object passed to RTCPeerConnection . This is advanced option. credential object \u00b6 Name Type Required Default Description timestamp number Current UNIX timestamp. ttl number Time to live; The credential expires at timestamp + ttl. authToken string Default Credential token calculated with HMAC. Default RTCConfiguration object \u00b6 const defaultConfig = { iceServers : [{ urls : 'stun:stun.webrtc.ecl.ntt.com:3478' , url : 'stun:stun.webrtc.ecl.ntt.com:3478' , }], iceTransportPolicy : 'all' , }; Sample \u00b6 // Connect ECLWebRTC signaling server with full debug option. const peer = new Peer ({ key : \"<YOUR-API-KEY>\" debug : 3 , }); // Force turn server const peer = new Peer ({ key : \"<YOUR-API-KEY>\" debug : 3 , config : { iceTransportPolicy : 'relay' , }, }); Members \u00b6 Name Type Description connections Object Object contains all connections. id string The Peer ID specified by a user or randomly assigned Peer ID by the signaling server. open boolean Whether the socket is connecting to the signalling server or not. rooms object Object contains all rooms. Methods \u00b6 call \u00b6 Calls the designated Peer and creates new MediaConnection. With option, bandwidth or/and codec can be specified. Parameters \u00b6 Name Type Required Default Description peerId string \u2714 The peerId of the peer you are calling. stream MediaStream The MediaStream to send to the remote peer. If not set, the caller creates offer SDP with recvonly attribute. options call options object Optional arguments for the connection. call options object \u00b6 Name Type Required Default Description metadata object Any additional information to send to the peer. videoBandwidth number A max video bandwidth(kbps) audioBandwidth number A max audio bandwidth(kbps) videoCodec string A video codec like 'H264' audioCodec string A video codec like 'PCMU' videoReceiveEnabled boolean Set to true when the user wants to receive video audioReceiveEnabled boolean Set to true when the user wants to receive audio label string Deprecated! Label to easily identify the connection on either peer. Return value \u00b6 MediaConnection instance Sample \u00b6 // Call a peer, providing our mediaStream const call = peer . call ( 'peerID' , localStream ); // Call a peer, providing our mediaStream and metadata const call = peer . call ( 'peerID' , localStream , { metadata : { foo : 'bar' , } }); // Call a peer, providing our mediaStream with H264(video codec) const call = peer . call ( 'peerID' , localStream , { videoCodec : 'H264' , }); // Call a peer, and just want to receive audio const call = peer . call ( 'peerID' , null , { audioReceiveEnabled : true , }); connect \u00b6 Connects to the designated Peer and creates new DataConnection. Parameters \u00b6 Name Type Required Default Description peerId string \u2714 User's peerId. options connect options object Optional arguments for DataConnection. connect options object \u00b6 Name Type Required Default Description metadata object Any additional information to send to the peer. serialization string How to serialize data when sending. One of 'binary', 'json' or 'none'. dcInit RTCDataChannelInit Object Options passed to createDataChannel() as a RTCDataChannelInit. label string Deprecated! Label to easily identify the connection on either peer. Return value \u00b6 DataConnection instance Sample \u00b6 // connect with data channel and with reliable mode(default) peer . connect ( 'peerId' ); // with metadata peer . connect ( 'peerId' , { metadata : { hoge : \"foobar\" , } }); // connect with data channel and with unreliable mode peer . connect ( 'peerId' , { dcInit : { maxRetransmits : 2 , }, }); destroy \u00b6 Close all connections and disconnect socket. Parameters \u00b6 None Return value \u00b6 undefined Sample \u00b6 peer . destroy (); disconnect \u00b6 Close socket and clean up some properties, then emit disconnect event. Parameters \u00b6 None Return value \u00b6 undefined Sample \u00b6 peer . disconnect (); joinRoom \u00b6 Join fullmesh type or SFU type room that two or more users can join. See explanation of fullmesh and SFU type from here . Parameters \u00b6 Name Type Rquired Default Description roomName string \u2714 The name of the room user is joining to. roomOptions roomOptions object Options to configure connection. roomOptions object \u00b6 Name Type Required Default Description mode string 'mesh' One of 'sfu' or 'mesh'. stream MediaStream Media stream user wants to emit. videoBandwidth number A max video bandwidth(kbps). Used only in mesh mode. audioBandwidth number A max audio bandwidth(kbps). Used only in mesh mode. videoCodec string A video codec like 'H264'. Used only in mesh mode. audioCodec string A video codec like 'PCMU'. Used only in mesh mode. videoReceiveEnabled boolean Set to true when the user wants to receive video. audioReceiveEnabled boolean Set to true when the user wants to receive video. Return value \u00b6 Instance of SFURoom or MeshRoom Sample \u00b6 const room = peer . joinRoom ( \"roomName\" , { mode : 'mesh' , stream : localStream , }); const room = peer . joinRoom ( \"roomName\" , { mode : 'sfu' , stream : localStream , }); listAllPeers \u00b6 Call Rest API and get the list of peerIds assciated with API key. Parameters \u00b6 None Return value \u00b6 undefined Sample \u00b6 peer . listAllPeers ( peers => { console . log ( peers ) // => [\"yNtQkNyjAojJNGrt\", \"EzAmgFhCKBQMzKw9\"] }); updateCredential \u00b6 Update server-side credential by sending a request in order to extend TTL of authenticaion. Parameters \u00b6 Name Type Required Default Description mode credential object \u2714 The new credential generated by user. credential object \u00b6 Name Type Optional Default Description timestamp number \u2714 Current UNIX timestamp. ttl number \u2714 Time to live; The credential expires at timestamp + ttl. authToken string \u2714 Default Credential token calculated with HMAC. Return value \u00b6 undefined Events \u00b6 open \u00b6 Successfully connected to signaling server. Type Description string Peer ID Sample \u00b6 peer . on ( 'open' , id => { console . log ( id ); }) call \u00b6 Received a call with Media channel(audio and/or video) from peer. Type Description MediaConnection MediaConnection instance. Sample \u00b6 peer . on ( 'call' , call => { // answer with media stream call . answer ( mediaStream ); }); close \u00b6 Finished closing all connections to peers. connection \u00b6 Received a connection from peer. Type Description DataConnection DataConnection instance. sample \u00b6 peer . on ( 'connection' , connection => { console . log ( connection ); }); disconnected \u00b6 Disconnected from the signalling server. Type Description string Peer ID expiresin \u00b6 The event occurs before credential expired. Type Description number The second before credential expires error \u00b6 Events when error occur. Type Description room-error Room name must be defined. Room type is different (e.g. On the condition that the mesh room was created, that another user tries to create SFU room with same room name of Mesh cause this error) SFU usage is disabled. Please enable SFU usage on dashboard. Unknown-error. Please wait for a while and connect again. Failed to fetch the room log. Please wait for a while and connect again authentication Failed to authenticate permission The room usage is not permitted list-error Look like you have permission to list peers IDs. Please enable the ECLWebRTC REST API on dashboard. disconnected Cannot connect to new Peer before connecting to ECLWebRTC server or after disconnecting from the server. socket-error Lost connection to server invalid-id ID is invalid. invalid-key API is invalid server-error Could not get peers from the server. Sample \u00b6 // When calling joinRoom() without room name peer . on ( 'error' , error => { console . log ( ` ${ error . type } : ${ error . message } ` ); // => room-error: Room name must be defined. });","title":"Peer"},{"location":"en/peer/#constructor","text":"new Peer creates new Peer instance and connects to the signaling server.","title":"Constructor"},{"location":"en/peer/#parameter","text":"Name Type Required Default Description id string User's peerId. options options object \u2714 Optional arguments for the connection.","title":"Parameter"},{"location":"en/peer/#options-object","text":"Name Type Required Default Description key string \u2714 ECLWebRTC API key. debug number Log level. NONE:0, ERROR:1, WARN:2, FULL:3. turn boolean Whether using ECLWebRTC's TURN or not. credential credential object The credential used to authenticate peer and can be used when authentication is enabled. Check authentication repository to see datails. config RTCConfiguration object Default RTCConfiguration object The object passed to RTCPeerConnection . This is advanced option.","title":"options object"},{"location":"en/peer/#credential-object","text":"Name Type Required Default Description timestamp number Current UNIX timestamp. ttl number Time to live; The credential expires at timestamp + ttl. authToken string Default Credential token calculated with HMAC.","title":"credential object"},{"location":"en/peer/#default-rtcconfiguration-object","text":"const defaultConfig = { iceServers : [{ urls : 'stun:stun.webrtc.ecl.ntt.com:3478' , url : 'stun:stun.webrtc.ecl.ntt.com:3478' , }], iceTransportPolicy : 'all' , };","title":"Default RTCConfiguration object"},{"location":"en/peer/#sample","text":"// Connect ECLWebRTC signaling server with full debug option. const peer = new Peer ({ key : \"<YOUR-API-KEY>\" debug : 3 , }); // Force turn server const peer = new Peer ({ key : \"<YOUR-API-KEY>\" debug : 3 , config : { iceTransportPolicy : 'relay' , }, });","title":"Sample"},{"location":"en/peer/#members","text":"Name Type Description connections Object Object contains all connections. id string The Peer ID specified by a user or randomly assigned Peer ID by the signaling server. open boolean Whether the socket is connecting to the signalling server or not. rooms object Object contains all rooms.","title":"Members"},{"location":"en/peer/#methods","text":"","title":"Methods"},{"location":"en/peer/#call","text":"Calls the designated Peer and creates new MediaConnection. With option, bandwidth or/and codec can be specified.","title":"call"},{"location":"en/peer/#parameters","text":"Name Type Required Default Description peerId string \u2714 The peerId of the peer you are calling. stream MediaStream The MediaStream to send to the remote peer. If not set, the caller creates offer SDP with recvonly attribute. options call options object Optional arguments for the connection.","title":"Parameters"},{"location":"en/peer/#call-options-object","text":"Name Type Required Default Description metadata object Any additional information to send to the peer. videoBandwidth number A max video bandwidth(kbps) audioBandwidth number A max audio bandwidth(kbps) videoCodec string A video codec like 'H264' audioCodec string A video codec like 'PCMU' videoReceiveEnabled boolean Set to true when the user wants to receive video audioReceiveEnabled boolean Set to true when the user wants to receive audio label string Deprecated! Label to easily identify the connection on either peer.","title":"call options object"},{"location":"en/peer/#return-value","text":"MediaConnection instance","title":"Return value"},{"location":"en/peer/#sample_1","text":"// Call a peer, providing our mediaStream const call = peer . call ( 'peerID' , localStream ); // Call a peer, providing our mediaStream and metadata const call = peer . call ( 'peerID' , localStream , { metadata : { foo : 'bar' , } }); // Call a peer, providing our mediaStream with H264(video codec) const call = peer . call ( 'peerID' , localStream , { videoCodec : 'H264' , }); // Call a peer, and just want to receive audio const call = peer . call ( 'peerID' , null , { audioReceiveEnabled : true , });","title":"Sample"},{"location":"en/peer/#connect","text":"Connects to the designated Peer and creates new DataConnection.","title":"connect"},{"location":"en/peer/#parameters_1","text":"Name Type Required Default Description peerId string \u2714 User's peerId. options connect options object Optional arguments for DataConnection.","title":"Parameters"},{"location":"en/peer/#connect-options-object","text":"Name Type Required Default Description metadata object Any additional information to send to the peer. serialization string How to serialize data when sending. One of 'binary', 'json' or 'none'. dcInit RTCDataChannelInit Object Options passed to createDataChannel() as a RTCDataChannelInit. label string Deprecated! Label to easily identify the connection on either peer.","title":"connect options object"},{"location":"en/peer/#return-value_1","text":"DataConnection instance","title":"Return value"},{"location":"en/peer/#sample_2","text":"// connect with data channel and with reliable mode(default) peer . connect ( 'peerId' ); // with metadata peer . connect ( 'peerId' , { metadata : { hoge : \"foobar\" , } }); // connect with data channel and with unreliable mode peer . connect ( 'peerId' , { dcInit : { maxRetransmits : 2 , }, });","title":"Sample"},{"location":"en/peer/#destroy","text":"Close all connections and disconnect socket.","title":"destroy"},{"location":"en/peer/#parameters_2","text":"None","title":"Parameters"},{"location":"en/peer/#return-value_2","text":"undefined","title":"Return value"},{"location":"en/peer/#sample_3","text":"peer . destroy ();","title":"Sample"},{"location":"en/peer/#disconnect","text":"Close socket and clean up some properties, then emit disconnect event.","title":"disconnect"},{"location":"en/peer/#parameters_3","text":"None","title":"Parameters"},{"location":"en/peer/#return-value_3","text":"undefined","title":"Return value"},{"location":"en/peer/#sample_4","text":"peer . disconnect ();","title":"Sample"},{"location":"en/peer/#joinroom","text":"Join fullmesh type or SFU type room that two or more users can join. See explanation of fullmesh and SFU type from here .","title":"joinRoom"},{"location":"en/peer/#parameters_4","text":"Name Type Rquired Default Description roomName string \u2714 The name of the room user is joining to. roomOptions roomOptions object Options to configure connection.","title":"Parameters"},{"location":"en/peer/#roomoptions-object","text":"Name Type Required Default Description mode string 'mesh' One of 'sfu' or 'mesh'. stream MediaStream Media stream user wants to emit. videoBandwidth number A max video bandwidth(kbps). Used only in mesh mode. audioBandwidth number A max audio bandwidth(kbps). Used only in mesh mode. videoCodec string A video codec like 'H264'. Used only in mesh mode. audioCodec string A video codec like 'PCMU'. Used only in mesh mode. videoReceiveEnabled boolean Set to true when the user wants to receive video. audioReceiveEnabled boolean Set to true when the user wants to receive video.","title":"roomOptions object"},{"location":"en/peer/#return-value_4","text":"Instance of SFURoom or MeshRoom","title":"Return value"},{"location":"en/peer/#sample_5","text":"const room = peer . joinRoom ( \"roomName\" , { mode : 'mesh' , stream : localStream , }); const room = peer . joinRoom ( \"roomName\" , { mode : 'sfu' , stream : localStream , });","title":"Sample"},{"location":"en/peer/#listallpeers","text":"Call Rest API and get the list of peerIds assciated with API key.","title":"listAllPeers"},{"location":"en/peer/#parameters_5","text":"None","title":"Parameters"},{"location":"en/peer/#return-value_5","text":"undefined","title":"Return value"},{"location":"en/peer/#sample_6","text":"peer . listAllPeers ( peers => { console . log ( peers ) // => [\"yNtQkNyjAojJNGrt\", \"EzAmgFhCKBQMzKw9\"] });","title":"Sample"},{"location":"en/peer/#updatecredential","text":"Update server-side credential by sending a request in order to extend TTL of authenticaion.","title":"updateCredential"},{"location":"en/peer/#parameters_6","text":"Name Type Required Default Description mode credential object \u2714 The new credential generated by user.","title":"Parameters"},{"location":"en/peer/#credential-object_1","text":"Name Type Optional Default Description timestamp number \u2714 Current UNIX timestamp. ttl number \u2714 Time to live; The credential expires at timestamp + ttl. authToken string \u2714 Default Credential token calculated with HMAC.","title":"credential object"},{"location":"en/peer/#return-value_6","text":"undefined","title":"Return value"},{"location":"en/peer/#events","text":"","title":"Events"},{"location":"en/peer/#open","text":"Successfully connected to signaling server. Type Description string Peer ID","title":"open"},{"location":"en/peer/#sample_7","text":"peer . on ( 'open' , id => { console . log ( id ); })","title":"Sample"},{"location":"en/peer/#call_1","text":"Received a call with Media channel(audio and/or video) from peer. Type Description MediaConnection MediaConnection instance.","title":"call"},{"location":"en/peer/#sample_8","text":"peer . on ( 'call' , call => { // answer with media stream call . answer ( mediaStream ); });","title":"Sample"},{"location":"en/peer/#close","text":"Finished closing all connections to peers.","title":"close"},{"location":"en/peer/#connection","text":"Received a connection from peer. Type Description DataConnection DataConnection instance.","title":"connection"},{"location":"en/peer/#sample_9","text":"peer . on ( 'connection' , connection => { console . log ( connection ); });","title":"sample"},{"location":"en/peer/#disconnected","text":"Disconnected from the signalling server. Type Description string Peer ID","title":"disconnected"},{"location":"en/peer/#expiresin","text":"The event occurs before credential expired. Type Description number The second before credential expires","title":"expiresin"},{"location":"en/peer/#error","text":"Events when error occur. Type Description room-error Room name must be defined. Room type is different (e.g. On the condition that the mesh room was created, that another user tries to create SFU room with same room name of Mesh cause this error) SFU usage is disabled. Please enable SFU usage on dashboard. Unknown-error. Please wait for a while and connect again. Failed to fetch the room log. Please wait for a while and connect again authentication Failed to authenticate permission The room usage is not permitted list-error Look like you have permission to list peers IDs. Please enable the ECLWebRTC REST API on dashboard. disconnected Cannot connect to new Peer before connecting to ECLWebRTC server or after disconnecting from the server. socket-error Lost connection to server invalid-id ID is invalid. invalid-key API is invalid server-error Could not get peers from the server.","title":"error"},{"location":"en/peer/#sample_10","text":"// When calling joinRoom() without room name peer . on ( 'error' , error => { console . log ( ` ${ error . type } : ${ error . message } ` ); // => room-error: Room name must be defined. });","title":"Sample"},{"location":"en/sfuroom/","text":"Class that manages SFU type room. Constructor \u00b6 Constructor should not be used. Instead, it is used used in only SDK. SfuRoom instance is created by joinRoom() . Sample \u00b6 sfuRoom = peer . joinRoom ( 'roomName' , { mode : 'sfu' , stream : localStream }); Methods \u00b6 close \u00b6 Close all connections in the room and disconnect connections to other users. Parameters \u00b6 None Return value \u00b6 undefined Sample \u00b6 room . close (); getLog \u00b6 Start getting room's logs from signaling server. When fetching logs succeeds, log event fires. Parameters \u00b6 None Return value \u00b6 undefined Sample \u00b6 room . getLog (); replaceStream \u00b6 Replace the stream being sent on all MediaConnections with a new one. You may change receive only mode to both send and receive mode. Parameters \u00b6 Name Type Required Default Description stream MediaStream The stream to replace the old stream with. Return value \u00b6 undefined Sample \u00b6 // newStream sfuRoom . replaceStream ( newStream ); send \u00b6 Send data to all participants in the room with WebSocket. It emits broadcast event. Parameters \u00b6 Name Type Required Default Description data * \u2714 The data to send. Events \u00b6 open \u00b6 Room is ready. peerJoin \u00b6 A peer has left. Type Description string Newly joined Peer ID peerLeave \u00b6 A peer has left. Type Description string The left Peer ID log \u00b6 Room's log received. Type Description Array logs stream \u00b6 MediaStream received from peer in the room. The Peer ID of stream origin can be obtained via stream.peerId . Type Description MediaStream MediaStream instance Sample \u00b6 room . on ( 'stream' , stream =>{ // e.g. setting stream to <video> }); data \u00b6 Data received from peer. Type Description object data object data object \u00b6 Name Type Description src string The peerId of the peer who sent the data. data * The data that a peer sent in the room. close \u00b6 All connections in the room has closed. removeStream \u00b6 MediaStream is removed from the room. Type Description MediaStream MediaStream instance Sample \u00b6 sfuRoom . on ( 'removeStream' , stream => { // e.g. getting the peer ID who removed stream const peerId = stream . peerId ; }","title":"SFURoom"},{"location":"en/sfuroom/#constructor","text":"Constructor should not be used. Instead, it is used used in only SDK. SfuRoom instance is created by joinRoom() .","title":"Constructor"},{"location":"en/sfuroom/#sample","text":"sfuRoom = peer . joinRoom ( 'roomName' , { mode : 'sfu' , stream : localStream });","title":"Sample"},{"location":"en/sfuroom/#methods","text":"","title":"Methods"},{"location":"en/sfuroom/#close","text":"Close all connections in the room and disconnect connections to other users.","title":"close"},{"location":"en/sfuroom/#parameters","text":"None","title":"Parameters"},{"location":"en/sfuroom/#return-value","text":"undefined","title":"Return value"},{"location":"en/sfuroom/#sample_1","text":"room . close ();","title":"Sample"},{"location":"en/sfuroom/#getlog","text":"Start getting room's logs from signaling server. When fetching logs succeeds, log event fires.","title":"getLog"},{"location":"en/sfuroom/#parameters_1","text":"None","title":"Parameters"},{"location":"en/sfuroom/#return-value_1","text":"undefined","title":"Return value"},{"location":"en/sfuroom/#sample_2","text":"room . getLog ();","title":"Sample"},{"location":"en/sfuroom/#replacestream","text":"Replace the stream being sent on all MediaConnections with a new one. You may change receive only mode to both send and receive mode.","title":"replaceStream"},{"location":"en/sfuroom/#parameters_2","text":"Name Type Required Default Description stream MediaStream The stream to replace the old stream with.","title":"Parameters"},{"location":"en/sfuroom/#return-value_2","text":"undefined","title":"Return value"},{"location":"en/sfuroom/#sample_3","text":"// newStream sfuRoom . replaceStream ( newStream );","title":"Sample"},{"location":"en/sfuroom/#send","text":"Send data to all participants in the room with WebSocket. It emits broadcast event.","title":"send"},{"location":"en/sfuroom/#parameters_3","text":"Name Type Required Default Description data * \u2714 The data to send.","title":"Parameters"},{"location":"en/sfuroom/#events","text":"","title":"Events"},{"location":"en/sfuroom/#open","text":"Room is ready.","title":"open"},{"location":"en/sfuroom/#peerjoin","text":"A peer has left. Type Description string Newly joined Peer ID","title":"peerJoin"},{"location":"en/sfuroom/#peerleave","text":"A peer has left. Type Description string The left Peer ID","title":"peerLeave"},{"location":"en/sfuroom/#log","text":"Room's log received. Type Description Array logs","title":"log"},{"location":"en/sfuroom/#stream","text":"MediaStream received from peer in the room. The Peer ID of stream origin can be obtained via stream.peerId . Type Description MediaStream MediaStream instance","title":"stream"},{"location":"en/sfuroom/#sample_4","text":"room . on ( 'stream' , stream =>{ // e.g. setting stream to <video> });","title":"Sample"},{"location":"en/sfuroom/#data","text":"Data received from peer. Type Description object data object","title":"data"},{"location":"en/sfuroom/#data-object","text":"Name Type Description src string The peerId of the peer who sent the data. data * The data that a peer sent in the room.","title":"data object"},{"location":"en/sfuroom/#close_1","text":"All connections in the room has closed.","title":"close"},{"location":"en/sfuroom/#removestream","text":"MediaStream is removed from the room. Type Description MediaStream MediaStream instance","title":"removeStream"},{"location":"en/sfuroom/#sample_5","text":"sfuRoom . on ( 'removeStream' , stream => { // e.g. getting the peer ID who removed stream const peerId = stream . peerId ; }","title":"Sample"},{"location":"ja/","text":"\u672c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f\u3001SkyWay JavaScript SDK\u306eAPI\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3067\u3059\u3002\u65e5\u672c\u8a9e\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f \u3053\u3061\u3089 \u304b\u3089\u3002 SkyWay\u3092\u4f7f\u3063\u305f\u958b\u767a\u304c\u521d\u3081\u3066\u306e\u5834\u5408\u306f\u3001SkyWay\u306e \u901a\u4fe1\u30e2\u30c7\u30eb \u3092\u5148\u306b\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002","title":"Introduction"},{"location":"ja/dataconnection/","text":"\u63a5\u7d9a\u5148Peer\u3078\u306e\u30c7\u30fc\u30bf\u30c1\u30e3\u30cd\u30eb\u63a5\u7d9a\u3092\u7ba1\u7406\u3059\u308b\u30af\u30e9\u30b9\u3067\u3059\u3002 Constructor \u00b6 SDK\u5185\u90e8\u306e\u5229\u7528\u306e\u307f\u3067\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u901a\u5e38\u5229\u7528\u3057\u307e\u305b\u3093\u3002 DataConnection\u306f\u3001 connect() \u304a\u3088\u3073 peer.on('connection') \u3067\u751f\u6210\u3055\u308c\u307e\u3059\u3002 Sample \u00b6 // \u767a\u4fe1\u5074 dataConnection = peer . connect ( 'peerID' ); // \u7740\u4fe1\u5074 peer . on ( 'connection' , connection => { console . log ( connection ); }); Members \u00b6 Name Type Description metadata object \u4efb\u610f\u306e\u60c5\u5831\u3092\u683c\u7d0d\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002 open boolean \u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u304c\u30aa\u30fc\u30d7\u30f3\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u793a\u3057\u307e\u3059\u3002 remoteId string \u63a5\u7d9a\u5148\u306ePeerID\u3067\u3059\u3002 peer string Deprecated \u63a5\u7d9a\u5148\u306ePeerID\u3067\u3059\u3002remoteId\u3092\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002 Sample \u00b6 peer . on ( 'connection' , connection => { // metadata\u304c\u4ed8\u4e0e\u3055\u308c\u3066\u3044\u305f\u5834\u5408 console . log ( connection . metadata ); // => connect\u6642\u306b\u4ed8\u4e0e\u3057\u305f\u3001metadata\u3092\u53c2\u7167\u3059\u308b }); Methods \u00b6 send \u00b6 \u63a5\u7d9a\u5148\u306ePeer\u306b\u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3057\u307e\u3059\u3002\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u65b9\u6cd5\u304c'binary'\u3067\u3042\u308b\u5834\u5408\u306f\u3001\u9001\u4fe1\u524d\u306b\u5206\u5272\u3057\u307e\u3059\u3002 Parameters \u00b6 Name Type Required Default Description data * \u2714 \u63a5\u7d9a\u5148\u306ePeer\u306b\u9001\u308b\u30c7\u30fc\u30bf\u3067\u3059\u3002 Return value \u00b6 undefined Sample \u00b6 // 'hello world'\u3068\u3044\u3046\u6587\u5b57\u5217\u3092\u9001\u4ed8\u3057\u307e\u3059\u3002 dataConnection . send ( 'hello world' ); // \u53d7\u4fe1\u5074\u3067\u306f\u3001\u6b21\u306e\u3088\u3046\u306b\u767a\u706b\u3057\u307e\u3059\u3002 dataConnection . on ( 'data' , data => { console . log ( 'hello world' ); // => 'hello world' }); close \u00b6 \u63a5\u7d9a\u5148Peer\u3068\u306eMediaConnection\u3092\u63a5\u7d9a\u3092\u5207\u65ad\u3057\u307e\u3059\u3002 Parameters \u00b6 None Return value \u00b6 undefined Sample \u00b6 call . close (); Events \u00b6 data \u00b6 \u30c7\u30fc\u30bf\u3092\u53d7\u4fe1\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 Type Description * \u53d7\u4fe1\u3057\u305f\u30c7\u30fc\u30bf\u3067\u3059\u3002 Sample \u00b6 dataConnection . on ( 'data' , data => { console . log ( 'hello world' ); // => 'hello world' }); close \u00b6 DataConnection\u304c\u5207\u65ad\u3055\u308c\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002","title":"DataConnection"},{"location":"ja/dataconnection/#constructor","text":"SDK\u5185\u90e8\u306e\u5229\u7528\u306e\u307f\u3067\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u901a\u5e38\u5229\u7528\u3057\u307e\u305b\u3093\u3002 DataConnection\u306f\u3001 connect() \u304a\u3088\u3073 peer.on('connection') \u3067\u751f\u6210\u3055\u308c\u307e\u3059\u3002","title":"Constructor"},{"location":"ja/dataconnection/#sample","text":"// \u767a\u4fe1\u5074 dataConnection = peer . connect ( 'peerID' ); // \u7740\u4fe1\u5074 peer . on ( 'connection' , connection => { console . log ( connection ); });","title":"Sample"},{"location":"ja/dataconnection/#members","text":"Name Type Description metadata object \u4efb\u610f\u306e\u60c5\u5831\u3092\u683c\u7d0d\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002 open boolean \u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u304c\u30aa\u30fc\u30d7\u30f3\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u793a\u3057\u307e\u3059\u3002 remoteId string \u63a5\u7d9a\u5148\u306ePeerID\u3067\u3059\u3002 peer string Deprecated \u63a5\u7d9a\u5148\u306ePeerID\u3067\u3059\u3002remoteId\u3092\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002","title":"Members"},{"location":"ja/dataconnection/#sample_1","text":"peer . on ( 'connection' , connection => { // metadata\u304c\u4ed8\u4e0e\u3055\u308c\u3066\u3044\u305f\u5834\u5408 console . log ( connection . metadata ); // => connect\u6642\u306b\u4ed8\u4e0e\u3057\u305f\u3001metadata\u3092\u53c2\u7167\u3059\u308b });","title":"Sample"},{"location":"ja/dataconnection/#methods","text":"","title":"Methods"},{"location":"ja/dataconnection/#send","text":"\u63a5\u7d9a\u5148\u306ePeer\u306b\u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3057\u307e\u3059\u3002\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u65b9\u6cd5\u304c'binary'\u3067\u3042\u308b\u5834\u5408\u306f\u3001\u9001\u4fe1\u524d\u306b\u5206\u5272\u3057\u307e\u3059\u3002","title":"send"},{"location":"ja/dataconnection/#parameters","text":"Name Type Required Default Description data * \u2714 \u63a5\u7d9a\u5148\u306ePeer\u306b\u9001\u308b\u30c7\u30fc\u30bf\u3067\u3059\u3002","title":"Parameters"},{"location":"ja/dataconnection/#return-value","text":"undefined","title":"Return value"},{"location":"ja/dataconnection/#sample_2","text":"// 'hello world'\u3068\u3044\u3046\u6587\u5b57\u5217\u3092\u9001\u4ed8\u3057\u307e\u3059\u3002 dataConnection . send ( 'hello world' ); // \u53d7\u4fe1\u5074\u3067\u306f\u3001\u6b21\u306e\u3088\u3046\u306b\u767a\u706b\u3057\u307e\u3059\u3002 dataConnection . on ( 'data' , data => { console . log ( 'hello world' ); // => 'hello world' });","title":"Sample"},{"location":"ja/dataconnection/#close","text":"\u63a5\u7d9a\u5148Peer\u3068\u306eMediaConnection\u3092\u63a5\u7d9a\u3092\u5207\u65ad\u3057\u307e\u3059\u3002","title":"close"},{"location":"ja/dataconnection/#parameters_1","text":"None","title":"Parameters"},{"location":"ja/dataconnection/#return-value_1","text":"undefined","title":"Return value"},{"location":"ja/dataconnection/#sample_3","text":"call . close ();","title":"Sample"},{"location":"ja/dataconnection/#events","text":"","title":"Events"},{"location":"ja/dataconnection/#data","text":"\u30c7\u30fc\u30bf\u3092\u53d7\u4fe1\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 Type Description * \u53d7\u4fe1\u3057\u305f\u30c7\u30fc\u30bf\u3067\u3059\u3002","title":"data"},{"location":"ja/dataconnection/#sample_4","text":"dataConnection . on ( 'data' , data => { console . log ( 'hello world' ); // => 'hello world' });","title":"Sample"},{"location":"ja/dataconnection/#close_1","text":"DataConnection\u304c\u5207\u65ad\u3055\u308c\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002","title":"close"},{"location":"ja/mediaconnection/","text":"\u63a5\u7d9a\u5148Peer\u3078\u306e\u30e1\u30c7\u30a3\u30a2\u30c1\u30e3\u30cd\u30eb\u63a5\u7d9a\u3092\u7ba1\u7406\u3059\u308b\u30af\u30e9\u30b9\u3067\u3059\u3002 Constructor \u00b6 SDK\u5185\u90e8\u306e\u5229\u7528\u306e\u307f\u3067\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u901a\u5e38\u5229\u7528\u3057\u307e\u305b\u3093\u3002 MediaConnection\u306f\u3001 call \u304a\u3088\u3073 peer.on('call') \u3067\u751f\u6210\u3055\u308c\u307e\u3059\u3002 Sample \u00b6 // \u767a\u4fe1\u5074 mediaConnection = peer1 . call ( 'peerID' , mediaStream ); // \u7740\u4fe1\u5074 peer2 . on ( 'call' , call => { // peer2\u306e\u6301\u3064\u30e1\u30c7\u30a3\u30a2\u30b9\u30c8\u30ea\u30fc\u30e0\u3067\u5fdc\u7b54\u3059\u308b call . answer ( mediaStream2 ) }); Members \u00b6 Name Type Description metadata object \u4efb\u610f\u306e\u60c5\u5831\u3092\u683c\u7d0d\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002 open boolean \u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u304c\u30aa\u30fc\u30d7\u30f3\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u793a\u3057\u307e\u3059\u3002 remoteId string \u63a5\u7d9a\u5148\u306ePeerID\u3067\u3059\u3002 peer string Deprecated \u63a5\u7d9a\u5148\u306ePeerID\u3067\u3059\u3002remoteId\u3092\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002 Sample \u00b6 // \u63a5\u7d9a\u5143\u304c metadata: { foo: 'bar' } \u3092\u8a2d\u5b9a\u3057\u305f\u5834\u5408 peer . on ( 'call' , call => { console . log ( call . metadata ); // => {foo: \"bar\"} }); Methods \u00b6 answer \u00b6 \u63a5\u7d9a\u76f8\u624b\u304b\u3089\u306e\u63a5\u7d9a\u8981\u6c42\u306b\u5bfe\u3057\u3066\u5fdc\u7b54\u3057\u307e\u3059\u3002 Parameters \u00b6 Name Type Require Default Description stream MediaStream \u2605 \u30ea\u30e2\u30fc\u30c8\u306ePeer\u3078\u9001\u308b\u30e1\u30c7\u30a3\u30a2\u30b9\u30c8\u30ea\u30fc\u30e0\u3067\u3059\u3002 options answer options object \u5fdc\u7b54\u6642\u306b\u4ed8\u4e0e\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3059\u3002\u5e2f\u57df\u5e45\u30fb\u30b3\u30fc\u30c7\u30c3\u30af\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 answer options object \u00b6 Name Type Required Default Description videoBandwidth number \u63a5\u7d9a\u5148\u304b\u3089\u53d7\u4fe1\u3059\u308b\u6620\u50cf\u306e\u6700\u5927\u5e2f\u57df\u5e45(kbps)\u3067\u3059\u3002 audioBandwidth number \u63a5\u7d9a\u5148\u304b\u3089\u53d7\u4fe1\u3059\u308b\u97f3\u58f0\u306e\u6700\u5927\u5e2f\u57df\u5e45(kbps)\u3067\u3059\u3002 videoCodec string 'H264'\u306a\u3069\u306e\u6620\u50cf\u30b3\u30fc\u30c7\u30c3\u30af\u3067\u3059\u3002 audioCodec string 'PCMU'\u306a\u3069\u306e\u97f3\u58f0\u30b3\u30fc\u30c7\u30c3\u30af\u3067\u3059\u3002 Return value \u00b6 undefined Sample \u00b6 // \u76f8\u624b\u304b\u3089\u767a\u4fe1\u3092\u53d7\u3051\u3066 peer . on ( 'call' , call => { call . answer ( mediaStream ); }); close \u00b6 \u63a5\u7d9a\u5148Peer\u3068\u306eMediaConnection\u3092\u63a5\u7d9a\u3092\u5207\u65ad\u3057\u307e\u3059\u3002 Parameters \u00b6 None Return value \u00b6 undefined Sample \u00b6 call . close (); replaceStream \u00b6 \u9001\u4fe1\u3057\u3066\u3044\u308bMediaStream\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002\u53d7\u4fe1\u306e\u307f\u30e2\u30fc\u30c9\u304b\u3089\u53cc\u65b9\u5411\u306b\u5207\u308a\u66ff\u3048\u3067\u304d\u307e\u3059\u3002 \u307e\u305f\u3001\u97f3\u58f0\u306e\u307f\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u304b\u3089\u3001\u97f3\u58f0\uff0b\u6620\u50cf\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3078\u306e\u5909\u66f4\u3082\u3067\u304d\u307e\u3059\u3002 Parameters \u00b6 Name Type Optional Default Description stream MediaStream \u4ea4\u63db\u5bfe\u8c61\u3068\u306a\u308b\u65b0\u3057\u3044MediaStream\u3067\u3059\u3002 Return value \u00b6 undefined Sample \u00b6 // newStream call . replaceStream ( newStream ); Events \u00b6 stream \u00b6 MediaStream\u3092\u53d7\u4fe1\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 Type Description MediaStream MediaStream\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\u3002 Sample \u00b6 call . on ( 'stream' , stream => { console . log ( stream ); }); close \u00b6 MediaConnection\u304c\u5207\u65ad\u3055\u308c\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 removeStream \u00b6 MediaStream \u304c\u524a\u9664\u3055\u308c\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 Type Description MediaStream MediaStream\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\u3002","title":"MediaConnection"},{"location":"ja/mediaconnection/#constructor","text":"SDK\u5185\u90e8\u306e\u5229\u7528\u306e\u307f\u3067\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u901a\u5e38\u5229\u7528\u3057\u307e\u305b\u3093\u3002 MediaConnection\u306f\u3001 call \u304a\u3088\u3073 peer.on('call') \u3067\u751f\u6210\u3055\u308c\u307e\u3059\u3002","title":"Constructor"},{"location":"ja/mediaconnection/#sample","text":"// \u767a\u4fe1\u5074 mediaConnection = peer1 . call ( 'peerID' , mediaStream ); // \u7740\u4fe1\u5074 peer2 . on ( 'call' , call => { // peer2\u306e\u6301\u3064\u30e1\u30c7\u30a3\u30a2\u30b9\u30c8\u30ea\u30fc\u30e0\u3067\u5fdc\u7b54\u3059\u308b call . answer ( mediaStream2 ) });","title":"Sample"},{"location":"ja/mediaconnection/#members","text":"Name Type Description metadata object \u4efb\u610f\u306e\u60c5\u5831\u3092\u683c\u7d0d\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002 open boolean \u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u304c\u30aa\u30fc\u30d7\u30f3\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u793a\u3057\u307e\u3059\u3002 remoteId string \u63a5\u7d9a\u5148\u306ePeerID\u3067\u3059\u3002 peer string Deprecated \u63a5\u7d9a\u5148\u306ePeerID\u3067\u3059\u3002remoteId\u3092\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002","title":"Members"},{"location":"ja/mediaconnection/#sample_1","text":"// \u63a5\u7d9a\u5143\u304c metadata: { foo: 'bar' } \u3092\u8a2d\u5b9a\u3057\u305f\u5834\u5408 peer . on ( 'call' , call => { console . log ( call . metadata ); // => {foo: \"bar\"} });","title":"Sample"},{"location":"ja/mediaconnection/#methods","text":"","title":"Methods"},{"location":"ja/mediaconnection/#answer","text":"\u63a5\u7d9a\u76f8\u624b\u304b\u3089\u306e\u63a5\u7d9a\u8981\u6c42\u306b\u5bfe\u3057\u3066\u5fdc\u7b54\u3057\u307e\u3059\u3002","title":"answer"},{"location":"ja/mediaconnection/#parameters","text":"Name Type Require Default Description stream MediaStream \u2605 \u30ea\u30e2\u30fc\u30c8\u306ePeer\u3078\u9001\u308b\u30e1\u30c7\u30a3\u30a2\u30b9\u30c8\u30ea\u30fc\u30e0\u3067\u3059\u3002 options answer options object \u5fdc\u7b54\u6642\u306b\u4ed8\u4e0e\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3059\u3002\u5e2f\u57df\u5e45\u30fb\u30b3\u30fc\u30c7\u30c3\u30af\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002","title":"Parameters"},{"location":"ja/mediaconnection/#answer-options-object","text":"Name Type Required Default Description videoBandwidth number \u63a5\u7d9a\u5148\u304b\u3089\u53d7\u4fe1\u3059\u308b\u6620\u50cf\u306e\u6700\u5927\u5e2f\u57df\u5e45(kbps)\u3067\u3059\u3002 audioBandwidth number \u63a5\u7d9a\u5148\u304b\u3089\u53d7\u4fe1\u3059\u308b\u97f3\u58f0\u306e\u6700\u5927\u5e2f\u57df\u5e45(kbps)\u3067\u3059\u3002 videoCodec string 'H264'\u306a\u3069\u306e\u6620\u50cf\u30b3\u30fc\u30c7\u30c3\u30af\u3067\u3059\u3002 audioCodec string 'PCMU'\u306a\u3069\u306e\u97f3\u58f0\u30b3\u30fc\u30c7\u30c3\u30af\u3067\u3059\u3002","title":"answer options object"},{"location":"ja/mediaconnection/#return-value","text":"undefined","title":"Return value"},{"location":"ja/mediaconnection/#sample_2","text":"// \u76f8\u624b\u304b\u3089\u767a\u4fe1\u3092\u53d7\u3051\u3066 peer . on ( 'call' , call => { call . answer ( mediaStream ); });","title":"Sample"},{"location":"ja/mediaconnection/#close","text":"\u63a5\u7d9a\u5148Peer\u3068\u306eMediaConnection\u3092\u63a5\u7d9a\u3092\u5207\u65ad\u3057\u307e\u3059\u3002","title":"close"},{"location":"ja/mediaconnection/#parameters_1","text":"None","title":"Parameters"},{"location":"ja/mediaconnection/#return-value_1","text":"undefined","title":"Return value"},{"location":"ja/mediaconnection/#sample_3","text":"call . close ();","title":"Sample"},{"location":"ja/mediaconnection/#replacestream","text":"\u9001\u4fe1\u3057\u3066\u3044\u308bMediaStream\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002\u53d7\u4fe1\u306e\u307f\u30e2\u30fc\u30c9\u304b\u3089\u53cc\u65b9\u5411\u306b\u5207\u308a\u66ff\u3048\u3067\u304d\u307e\u3059\u3002 \u307e\u305f\u3001\u97f3\u58f0\u306e\u307f\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u304b\u3089\u3001\u97f3\u58f0\uff0b\u6620\u50cf\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3078\u306e\u5909\u66f4\u3082\u3067\u304d\u307e\u3059\u3002","title":"replaceStream"},{"location":"ja/mediaconnection/#parameters_2","text":"Name Type Optional Default Description stream MediaStream \u4ea4\u63db\u5bfe\u8c61\u3068\u306a\u308b\u65b0\u3057\u3044MediaStream\u3067\u3059\u3002","title":"Parameters"},{"location":"ja/mediaconnection/#return-value_2","text":"undefined","title":"Return value"},{"location":"ja/mediaconnection/#sample_4","text":"// newStream call . replaceStream ( newStream );","title":"Sample"},{"location":"ja/mediaconnection/#events","text":"","title":"Events"},{"location":"ja/mediaconnection/#stream","text":"MediaStream\u3092\u53d7\u4fe1\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 Type Description MediaStream MediaStream\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\u3002","title":"stream"},{"location":"ja/mediaconnection/#sample_5","text":"call . on ( 'stream' , stream => { console . log ( stream ); });","title":"Sample"},{"location":"ja/mediaconnection/#close_1","text":"MediaConnection\u304c\u5207\u65ad\u3055\u308c\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002","title":"close"},{"location":"ja/mediaconnection/#removestream","text":"MediaStream \u304c\u524a\u9664\u3055\u308c\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 Type Description MediaStream MediaStream\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\u3002","title":"removeStream"},{"location":"ja/meshroom/","text":"\u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u3067\u306e\u30eb\u30fc\u30e0\u3092\u7ba1\u7406\u3059\u308b\u30af\u30e9\u30b9\u3067\u3059\u3002 Constructor \u00b6 SDK\u5185\u90e8\u306e\u5229\u7528\u306e\u307f\u3067\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u901a\u5e38\u5229\u7528\u3057\u307e\u305b\u3093\u3002 MeshRoom\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u3001 joinRoom() \u3067\u751f\u6210\u3055\u308c\u307e\u3059\u3002 Sample \u00b6 meshRoom = peer . joinRoom ( 'roomName' ); Methods \u00b6 close \u00b6 \u30eb\u30fc\u30e0\u3092\u9000\u51fa\u3057\u3001\u30eb\u30fc\u30e0\u5185\u306e\u3059\u3079\u3066\u306e\u30e6\u30fc\u30b6\u30fc\u3068\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092close\u3057\u307e\u3059 Parameters \u00b6 None Return value \u00b6 undefined Sample \u00b6 room . close (); getLog \u00b6 \u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u306b\u30eb\u30fc\u30e0\u306e\u30ed\u30b0\u53d6\u5f97\u3092\u8981\u6c42\u3057\u307e\u3059\u3002 \u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u304b\u3089\u30ed\u30b0\u3092\u53d7\u4fe1\u3059\u308b\u3068\u3001 log \u30a4\u30d9\u30f3\u30c8\u304c\u767a\u706b\u3057\u307e\u3059\u3002 Parameters \u00b6 None Return value \u00b6 undefined Sample \u00b6 room . getLog (); replaceStream \u00b6 \u9001\u4fe1\u3057\u3066\u3044\u308bMediaStream\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002\u53d7\u4fe1\u306e\u307f\u30e2\u30fc\u30c9\u304b\u3089\u53cc\u65b9\u5411\u306b\u5207\u308a\u66ff\u3048\u3067\u304d\u307e\u3059\u3002 \u307e\u305f\u3001\u97f3\u58f0\u306e\u307f\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u304b\u3089\u3001\u97f3\u58f0\uff0b\u6620\u50cf\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3078\u306e\u5909\u66f4\u3082\u3067\u304d\u307e\u3059\u3002 Parameters \u00b6 Name Type Required Default Description stream MediaStream \u4ea4\u63db\u5bfe\u8c61\u3068\u306a\u308b\u65b0\u3057\u3044MediaStream\u3067\u3059\u3002 Return value \u00b6 undefined Sample \u00b6 // newStream meshRoom . replaceStream ( newStream ); send \u00b6 WebSocket\u3092\u4f7f\u7528\u3057\u3066\u30eb\u30fc\u30e0\u5185\u306e\u5168\u3066\u306e\u30e6\u30fc\u30b6\u30fc\u306b\u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3057\u307e\u3059\u3002 Parameters \u00b6 Name Type Required Default Description data * \u2714 \u9001\u4fe1\u3059\u308b\u30c7\u30fc\u30bf\u3067\u3059\u3002 Events \u00b6 open \u00b6 \u65b0\u898f\u306bPeer\u304c\u30eb\u30fc\u30e0\u3078\u5165\u5ba4\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 peerJoin \u00b6 \u30eb\u30fc\u30e0\u306b\u65b0\u3057\u3044Peer\u304c\u53c2\u52a0\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 Type Description string \u53c2\u52a0\u3057\u305fPeerID peerLeave \u00b6 \u65b0\u898f\u306bPeer\u304c\u30eb\u30fc\u30e0\u3092\u9000\u51fa\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 Type Description string \u9000\u51fa\u3057\u305fPeerID log \u00b6 \u30eb\u30fc\u30e0\u306e\u30ed\u30b0\u3092\u53d7\u4fe1\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 Type Description Array \u30ed\u30b0\u306e\u914d\u5217\u3067\u3059 stream \u00b6 \u30eb\u30fc\u30e0\u306bJoin\u3057\u3066\u3044\u308b\u4ed6\u306e\u30e6\u30fc\u30b6\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u53d7\u4fe1\u3057\u305f\u6642\u306b\u767a\u751f\u3057\u307e\u3059\u3002\u30b9\u30c8\u30ea\u30fc\u30e0\u9001\u4fe1\u5143\u306epeerId\u306f stream.peerId \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 Type Description MediaStream MediaStream\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\u3002 Sample \u00b6 room . on ( 'stream' , stream =>{ // Stream\u3092video\u30bf\u30b0\u306b\u8a2d\u5b9a\u306a\u3069 }); data \u00b6 \u4ed6\u306e\u30e6\u30fc\u30b6\u30fc\u304b\u3089\u9001\u4fe1\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3092\u53d7\u4fe1\u3057\u305f\u6642\u306b\u767a\u751f\u3057\u307e\u3059\u3002 Type Description object data object \u5f62\u5f0f\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002 data object \u00b6 Name Type Description src string \u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3057\u305fPeer\u306eID\u3067\u3059\u3002 data * \u53d7\u4fe1\u3057\u305f\u30c7\u30fc\u30bf\u3067\u3059\u3002 close \u00b6 \u30eb\u30fc\u30e0\u3092close\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 removeStream \u00b6 \u30eb\u30fc\u30e0\u304b\u3089 MediaStream \u304c\u524a\u9664\u3055\u308c\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 Type Description MediaStream MediaStream\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\u3002 Sample \u00b6 meshRoom . on ( 'removeStream' , stream => { // \u524a\u9664\u3055\u308c\u305f\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u6301\u3064PeerID\u3092\u53d6\u5f97 const peerId = stream . peerId ; }","title":"MeshRoom"},{"location":"ja/meshroom/#constructor","text":"SDK\u5185\u90e8\u306e\u5229\u7528\u306e\u307f\u3067\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u901a\u5e38\u5229\u7528\u3057\u307e\u305b\u3093\u3002 MeshRoom\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u3001 joinRoom() \u3067\u751f\u6210\u3055\u308c\u307e\u3059\u3002","title":"Constructor"},{"location":"ja/meshroom/#sample","text":"meshRoom = peer . joinRoom ( 'roomName' );","title":"Sample"},{"location":"ja/meshroom/#methods","text":"","title":"Methods"},{"location":"ja/meshroom/#close","text":"\u30eb\u30fc\u30e0\u3092\u9000\u51fa\u3057\u3001\u30eb\u30fc\u30e0\u5185\u306e\u3059\u3079\u3066\u306e\u30e6\u30fc\u30b6\u30fc\u3068\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092close\u3057\u307e\u3059","title":"close"},{"location":"ja/meshroom/#parameters","text":"None","title":"Parameters"},{"location":"ja/meshroom/#return-value","text":"undefined","title":"Return value"},{"location":"ja/meshroom/#sample_1","text":"room . close ();","title":"Sample"},{"location":"ja/meshroom/#getlog","text":"\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u306b\u30eb\u30fc\u30e0\u306e\u30ed\u30b0\u53d6\u5f97\u3092\u8981\u6c42\u3057\u307e\u3059\u3002 \u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u304b\u3089\u30ed\u30b0\u3092\u53d7\u4fe1\u3059\u308b\u3068\u3001 log \u30a4\u30d9\u30f3\u30c8\u304c\u767a\u706b\u3057\u307e\u3059\u3002","title":"getLog"},{"location":"ja/meshroom/#parameters_1","text":"None","title":"Parameters"},{"location":"ja/meshroom/#return-value_1","text":"undefined","title":"Return value"},{"location":"ja/meshroom/#sample_2","text":"room . getLog ();","title":"Sample"},{"location":"ja/meshroom/#replacestream","text":"\u9001\u4fe1\u3057\u3066\u3044\u308bMediaStream\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002\u53d7\u4fe1\u306e\u307f\u30e2\u30fc\u30c9\u304b\u3089\u53cc\u65b9\u5411\u306b\u5207\u308a\u66ff\u3048\u3067\u304d\u307e\u3059\u3002 \u307e\u305f\u3001\u97f3\u58f0\u306e\u307f\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u304b\u3089\u3001\u97f3\u58f0\uff0b\u6620\u50cf\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3078\u306e\u5909\u66f4\u3082\u3067\u304d\u307e\u3059\u3002","title":"replaceStream"},{"location":"ja/meshroom/#parameters_2","text":"Name Type Required Default Description stream MediaStream \u4ea4\u63db\u5bfe\u8c61\u3068\u306a\u308b\u65b0\u3057\u3044MediaStream\u3067\u3059\u3002","title":"Parameters"},{"location":"ja/meshroom/#return-value_2","text":"undefined","title":"Return value"},{"location":"ja/meshroom/#sample_3","text":"// newStream meshRoom . replaceStream ( newStream );","title":"Sample"},{"location":"ja/meshroom/#send","text":"WebSocket\u3092\u4f7f\u7528\u3057\u3066\u30eb\u30fc\u30e0\u5185\u306e\u5168\u3066\u306e\u30e6\u30fc\u30b6\u30fc\u306b\u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3057\u307e\u3059\u3002","title":"send"},{"location":"ja/meshroom/#parameters_3","text":"Name Type Required Default Description data * \u2714 \u9001\u4fe1\u3059\u308b\u30c7\u30fc\u30bf\u3067\u3059\u3002","title":"Parameters"},{"location":"ja/meshroom/#events","text":"","title":"Events"},{"location":"ja/meshroom/#open","text":"\u65b0\u898f\u306bPeer\u304c\u30eb\u30fc\u30e0\u3078\u5165\u5ba4\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002","title":"open"},{"location":"ja/meshroom/#peerjoin","text":"\u30eb\u30fc\u30e0\u306b\u65b0\u3057\u3044Peer\u304c\u53c2\u52a0\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 Type Description string \u53c2\u52a0\u3057\u305fPeerID","title":"peerJoin"},{"location":"ja/meshroom/#peerleave","text":"\u65b0\u898f\u306bPeer\u304c\u30eb\u30fc\u30e0\u3092\u9000\u51fa\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 Type Description string \u9000\u51fa\u3057\u305fPeerID","title":"peerLeave"},{"location":"ja/meshroom/#log","text":"\u30eb\u30fc\u30e0\u306e\u30ed\u30b0\u3092\u53d7\u4fe1\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 Type Description Array \u30ed\u30b0\u306e\u914d\u5217\u3067\u3059","title":"log"},{"location":"ja/meshroom/#stream","text":"\u30eb\u30fc\u30e0\u306bJoin\u3057\u3066\u3044\u308b\u4ed6\u306e\u30e6\u30fc\u30b6\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u53d7\u4fe1\u3057\u305f\u6642\u306b\u767a\u751f\u3057\u307e\u3059\u3002\u30b9\u30c8\u30ea\u30fc\u30e0\u9001\u4fe1\u5143\u306epeerId\u306f stream.peerId \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 Type Description MediaStream MediaStream\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\u3002","title":"stream"},{"location":"ja/meshroom/#sample_4","text":"room . on ( 'stream' , stream =>{ // Stream\u3092video\u30bf\u30b0\u306b\u8a2d\u5b9a\u306a\u3069 });","title":"Sample"},{"location":"ja/meshroom/#data","text":"\u4ed6\u306e\u30e6\u30fc\u30b6\u30fc\u304b\u3089\u9001\u4fe1\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3092\u53d7\u4fe1\u3057\u305f\u6642\u306b\u767a\u751f\u3057\u307e\u3059\u3002 Type Description object data object \u5f62\u5f0f\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002","title":"data"},{"location":"ja/meshroom/#data-object","text":"Name Type Description src string \u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3057\u305fPeer\u306eID\u3067\u3059\u3002 data * \u53d7\u4fe1\u3057\u305f\u30c7\u30fc\u30bf\u3067\u3059\u3002","title":"data object"},{"location":"ja/meshroom/#close_1","text":"\u30eb\u30fc\u30e0\u3092close\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002","title":"close"},{"location":"ja/meshroom/#removestream","text":"\u30eb\u30fc\u30e0\u304b\u3089 MediaStream \u304c\u524a\u9664\u3055\u308c\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 Type Description MediaStream MediaStream\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\u3002","title":"removeStream"},{"location":"ja/meshroom/#sample_5","text":"meshRoom . on ( 'removeStream' , stream => { // \u524a\u9664\u3055\u308c\u305f\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u6301\u3064PeerID\u3092\u53d6\u5f97 const peerId = stream . peerId ; }","title":"Sample"},{"location":"ja/peer/","text":"P2P\u63a5\u7d9a\u304a\u3088\u3073\u30eb\u30fc\u30e0\u63a5\u7d9a\u6a5f\u80fd\u3092\u64cd\u4f5c\u3059\u308b\u305f\u3081\u306e\u30af\u30e9\u30b9\u3067\u3059\u3002SkyWay\u3092\u5229\u7528\u3059\u308b\u305f\u3081\u306b\u3001\u6700\u521d\u306bPeer\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\u304c\u5fc5\u8981\u3067\u3059\u3002 Constructor \u00b6 \u65b0\u898f\u306bPeer\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u307e\u3059\u3002 new Peer() \u306b\u3088\u308a\u3001SkyWay\u306e\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u3068\u63a5\u7d9a\u3057\u307e\u3059\u3002 Parameter \u00b6 Name Type Required Default Description id string \u30e6\u30fc\u30b6\u306ePeer ID\u3067\u3059\u3002 options options object \u2714 \u63a5\u7d9a\u306b\u95a2\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6307\u5b9a\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3059\u3002 options object \u00b6 Name Type Required Default Description key string \u2714 SkyWay\u306eAPI\u30ad\u30fc\u3067\u3059\u3002 debug number \u30ed\u30b0\u30ec\u30d9\u30eb\uff1a NONE:0\u3001 ERROR:1\u3001 WARN:2\u3001 FULL:3 \u304b\u3089\u9078\u629e\u3067\u304d\u307e\u3059\u3002 turn boolean SkyWay\u3067\u63d0\u4f9b\u3059\u308bTURN\u3092\u4f7f\u3046\u304b\u3069\u3046\u304b\u306e\u30d5\u30e9\u30b0\u3067\u3059\u3002 credential credential object Peer\u3092\u8a8d\u8a3c\u3059\u308b\u305f\u3081\u306e\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u3067\u3059\u3002\u8a8d\u8a3c\u6a5f\u80fd\u304c\u6709\u52b9\u306e\u5834\u5408\u306e\u307f\u4f7f\u3048\u307e\u3059\u3002\u8a73\u7d30\u306f \u8a8d\u8a3c\u30ea\u30dd\u30b8\u30c8\u30ea \u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002 config RTCConfiguration object Default RTCConfiguration object RTCPeerConnection\u306b\u6e21\u3055\u308c\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 \u3067\u3059\u3002\u767a\u5c55\u7684\u306a\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u305f\u3081\u3001\u5185\u5bb9\u3092\u7406\u89e3\u3057\u3066\u3044\u308b\u5834\u5408\u306e\u307f\u3054\u5229\u7528\u304f\u3060\u3055\u3044\u3002 credential object \u00b6 Name Type Required Default Description timestamp number \u73fe\u5728\u306eUNIX\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u3067\u3059\u3002 ttl number Time to live(ttl)\u3002\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7 + ttl \u306e\u6642\u9593\u3067\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u304c\u5931\u52b9\u3057\u307e\u3059\u3002 authToken string Default HMAC\u3092\u5229\u7528\u3057\u3066\u751f\u6210\u3059\u308b\u8a8d\u8a3c\u7528\u30c8\u30fc\u30af\u30f3\u3067\u3059\u3002 Default RTCConfiguration object \u00b6 const defaultConfig = { iceServers : [{ urls : 'stun:stun.webrtc.ecl.ntt.com:3478' , url : 'stun:stun.webrtc.ecl.ntt.com:3478' , }], iceTransportPolicy : 'all' , }; Sample \u00b6 // \u30c7\u30d0\u30c3\u30b0\u60c5\u5831\u3092\u6700\u5927(3)\u306b\u3057\u3066\u63a5\u7d9a\u3059\u308b\u5834\u5408 const peer = new Peer ({ key : \"<YOUR-API-KEY>\" debug : 3 , }); // TURN\u30b5\u30fc\u30d0\u3092\u5f37\u5236\u5229\u7528\u3059\u308b\u5834\u5408 const peer = new Peer ({ key : \"<YOUR-API-KEY>\" debug : 3 , config : { iceTransportPolicy : 'relay' , }, }); Members \u00b6 Name Type Description connections Object \u5168\u3066\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u4fdd\u6301\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002 id string \u30e6\u30fc\u30b6\u30fc\u304c\u6307\u5b9a\u3057\u305fPeer ID\u3001\u3082\u3057\u304f\u306f\u30b5\u30fc\u30d0\u304c\u751f\u6210\u3057\u305fPeer ID\u3067\u3059\u3002 open boolean \u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u3078\u306e\u63a5\u7d9a\u72b6\u6cc1\u3092\u4fdd\u6301\u3057\u307e\u3059\u3002 rooms object \u5168\u3066\u306e\u30eb\u30fc\u30e0\u3092\u4fdd\u6301\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002 Methods \u00b6 call \u00b6 \u6307\u5b9a\u3057\u305fPeer\u306b\u30e1\u30c7\u30a3\u30a2\u30c1\u30e3\u30cd\u30eb(\u97f3\u58f0\u30fb\u6620\u50cf)\u3067\u63a5\u7d9a\u3057\u3066\u3001MediaConnection\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u5e2f\u57df\u5e45\u30fb\u30b3\u30fc\u30c7\u30c3\u30af\u306a\u3069\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002 Parameters \u00b6 Name Type Required Default Description peerId string \u2714 \u63a5\u7d9a\u5148\u306ePeer ID\u3067\u3059\u3002 stream MediaStream \u63a5\u7d9a\u5148\u306ePeer\u3078\u9001\u308b\u30e1\u30c7\u30a3\u30a2\u30b9\u30c8\u30ea\u30fc\u30e0\u3067\u3059\u3002 \u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001\u53d7\u4fe1\u306e\u307f\u30e2\u30fc\u30c9\u3067\u767a\u4fe1\u3057\u307e\u3059\u3002 options call options object \u767a\u4fe1\u6642\u306b\u4ed8\u4e0e\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3059\u3002\u5e2f\u57df\u5e45\u30fb\u30b3\u30fc\u30c7\u30c3\u30af\u306a\u3069\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 call options object \u00b6 Name Type Required Default Description metadata object \u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u306b\u95a2\u9023\u4ed8\u3051\u3055\u308c\u308b\u4efb\u610f\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\u3067\u3001\u63a5\u7d9a\u5148\u306ePeer\u306b\u6e21\u3055\u308c\u307e\u3059\u3002 videoBandwidth number \u63a5\u7d9a\u5148\u304b\u3089\u53d7\u4fe1\u3059\u308b\u6620\u50cf\u306e\u6700\u5927\u5e2f\u57df\u5e45(kbps)\u3067\u3059\u3002 audioBandwidth number \u63a5\u7d9a\u5148\u304b\u3089\u53d7\u4fe1\u3059\u308b\u97f3\u58f0\u306e\u6700\u5927\u5e2f\u57df\u5e45(kbps)\u3067\u3059\u3002 videoCodec string 'H264'\u306a\u3069\u306e\u6620\u50cf\u30b3\u30fc\u30c7\u30c3\u30af\u3067\u3059\u3002 audioCodec string 'PCMU'\u306a\u3069\u306e\u97f3\u58f0\u30b3\u30fc\u30c7\u30c3\u30af\u3067\u3059\u3002 videoReceiveEnabled boolean \u6620\u50cf\u3092\u53d7\u4fe1\u306e\u307f\u3067\u4f7f\u3046\u5834\u5408\u306e\u30d5\u30e9\u30b0\u3067\u3059\u3002 audioReceiveEnabled boolean \u97f3\u58f0\u3092\u53d7\u4fe1\u306e\u307f\u3067\u4f7f\u3046\u5834\u5408\u306e\u30d5\u30e9\u30b0\u3067\u3059\u3002 label string Deprecated! \u63a5\u7d9a\u5148\u306ePeer ID\u3092\u8b58\u5225\u3059\u308b\u306e\u306b\u5229\u7528\u3059\u308b\u30e9\u30d9\u30eb\u3067\u3059\u3002 Return value \u00b6 MediaConnection \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9 Sample \u00b6 // \u81ea\u8eab\u306elocalStream\u3092\u8a2d\u5b9a\u3057\u3066\u3001\u76f8\u624b\u306b\u767a\u4fe1\u3059\u308b\u5834\u5408 const call = peer . call ( 'peerID' , localStream ); // \u81ea\u8eab\u306elocalStream\u304a\u3088\u3073metadata\u3092\u8a2d\u5b9a\u3057\u3066\u3001\u76f8\u624b\u306b\u767a\u4fe1\u3059\u308b\u5834\u5408 const call = peer . call ( 'peerID' , localStream , { metadata : { foo : 'bar' , } }); // \u6620\u50cf\u30b3\u30fc\u30c7\u30c3\u30af\u3068\u3057\u3066H264\u3092\u5229\u7528\u3059\u308b\u5834\u5408 const call = peer . call ( 'peerID' , localStream , { videoCodec : 'H264' , }); // \u97f3\u58f0\u306e\u307f\u63a5\u7d9a\u5148\u304b\u3089\u53d7\u4fe1\u3059\u308b\u8a2d\u5b9a\u3067\u3001\u76f8\u624b\u306b\u767a\u4fe1\u3059\u308b\u5834\u5408 const call = peer . call ( 'peerID' , null , { audioReceiveEnabled : true , }); connect \u00b6 \u6307\u5b9a\u3057\u305fPeer\u306b\u30c7\u30fc\u30bf\u30c1\u30e3\u30cd\u30eb\u3067\u63a5\u7d9a\u3057\u3066\u3001DataConnection\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u307e\u3059\u3002 Parameters \u00b6 Name Type Required Default Description peerId string \u2714 \u63a5\u7d9a\u5148\u306ePeer ID\u3067\u3059\u3002 options connect options object \u63a5\u7d9a\u6642\u306b\u4ed8\u4e0e\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3059\u3002 connect options object \u00b6 Name Type Required Default Description metadata object \u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u306b\u95a2\u9023\u4ed8\u3051\u3055\u308c\u308b\u4efb\u610f\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\u3067\u3001\u63a5\u7d9a\u5148\u306ePeer\u306b\u6e21\u3055\u308c\u307e\u3059\u3002 serialization string \u9001\u4fe1\u6642\u306e\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u65b9\u6cd5\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002'binary'\u3001'json'\u3001'none'\u306e\u3044\u305a\u308c\u304b\u3001\u3068\u306a\u308a\u307e\u3059\u3002 dcInit RTCDataChannelInit Object DataChannel\u5229\u7528\u6642\u306b\u4fe1\u983c\u6027\u306e\u6709\u7121\u3092\u6307\u5b9a\u3059\u308b\u305f\u3081\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u4fe1\u983c\u6027\u6709\u3067\u52d5\u4f5c\u3057\u307e\u3059\u3002\u306a\u304a\u3001chrome\u306f\u3001 maxPacketLifetime \u306e\u4ee3\u308f\u308a\u306b\u3001 maxRetransmitTime \u3092\u5229\u7528\u3057\u307e\u3059\u3002 label string Deprecated! \u63a5\u7d9a\u5148\u306ePeer ID\u3092\u8b58\u5225\u3059\u308b\u306e\u306b\u5229\u7528\u3059\u308b\u30e9\u30d9\u30eb\u3067\u3059\u3002 Return value \u00b6 DataConnection \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9 Sample \u00b6 // \u5358\u306bDataChannel\u3092\u63a5\u7d9a\u3059\u308b\u5834\u5408(\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u4fe1\u983c\u6027\u6709\u308a) peer . connect ( 'peerId' ); // metadata\u4ed8\u304d\u3067connect\u3059\u308b\u5834\u5408 peer . connect ( 'peerId' , { metadata : { hoge : \"foobar\" , } }); // \u4fe1\u983c\u6027\u7121\u3057\u30e2\u30fc\u30c9\u3067DataChannel\u3092\u63a5\u7d9a\u3059\u308b\u5834\u5408 peer . connect ( 'peerId' , { dcInit : { // \u6700\u59272\u56de\u3001\u518d\u9001\u3059\u308b maxRetransmits : 2 , }, }); destroy \u00b6 \u5168\u3066\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u9589\u3058\u3001\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u3078\u306e\u63a5\u7d9a\u3092\u5207\u65ad\u3057\u307e\u3059\u3002 Parameters \u00b6 None Return value \u00b6 undefined Sample \u00b6 peer . destroy (); disconnect \u00b6 \u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u3078\u306e\u63a5\u7d9a\u3092\u9589\u3058\u3001disconnected\u30a4\u30d9\u30f3\u30c8\u3092\u9001\u51fa\u3057\u307e\u3059\u3002 Parameters \u00b6 None Return value \u00b6 undefined Sample \u00b6 peer . disconnect (); joinRoom \u00b6 \u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u306e\u30eb\u30fc\u30e0\u3001\u307e\u305f\u306fSFU\u63a5\u7d9a\u306e\u30eb\u30fc\u30e0\u306b\u53c2\u52a0\u3057\u307e\u3059\u3002\u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u304a\u3088\u3073SFU\u63a5\u7d9a\u306b\u3064\u3044\u3066\u306f \u30b3\u30c1\u30e9 \u3092\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002 Parameters \u00b6 Name Type Rquired Default Description roomName string \u2714 \u53c2\u52a0\u5148\u306e\u30eb\u30fc\u30e0\u306e\u540d\u524d\u3067\u3059\u3002 roomOptions room options object \u63a5\u7d9a\u6642\u306b\u9078\u629e\u30fb\u4ed8\u4e0e\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3059\u3002 room options object \u00b6 Name Type Required Default Description mode string 'mesh' 'sfu'\u307e\u305f\u306f'mesh'\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 stream MediaStream \u30e6\u30fc\u30b6\u30fc\u304c\u9001\u4fe1\u3059\u308b\u30e1\u30c7\u30a3\u30a2\u30b9\u30c8\u30ea\u30fc\u30e0\u3067\u3059\u3002 videoBandwidth number \u6620\u50cf\u306e\u6700\u5927\u5e2f\u57df\u5e45(kbps)\u3067\u3059\u3002\u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u306e\u307f\u4f7f\u7528\u53ef\u80fd\u3067\u3059\u3002 audioBandwidth number \u97f3\u58f0\u306e\u6700\u5927\u5e2f\u57df\u5e45(kbps)\u3067\u3059\u3002 \u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u306e\u307f\u4f7f\u7528\u53ef\u80fd\u3067\u3059\u3002 videoCodec string 'H264'\u306a\u3069\u306e\u6620\u50cf\u30b3\u30fc\u30c7\u30c3\u30af\u3067\u3059\u3002 \u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u306e\u307f\u4f7f\u7528\u53ef\u80fd\u3067\u3059\u3002 audioCodec string 'PCMU'\u306a\u3069\u306e\u97f3\u58f0\u30b3\u30fc\u30c7\u30c3\u30af\u3067\u3059\u3002\u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u306e\u307f\u4f7f\u7528\u53ef\u80fd\u3067\u3059\u3002 videoReceiveEnabled boolean \u6620\u50cf\u3092\u53d7\u4fe1\u306e\u307f\u3067\u4f7f\u3046\u5834\u5408\u306e\u30d5\u30e9\u30b0\u3067\u3059\u3002\u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u306e\u307f\u4f7f\u7528\u53ef\u80fd\u3067\u3059\u3002 audioReceiveEnabled boolean \u97f3\u58f0\u3092\u53d7\u4fe1\u306e\u307f\u3067\u4f7f\u3046\u5834\u5408\u306e\u30d5\u30e9\u30b0\u3067\u3059\u3002\u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u306e\u307f\u4f7f\u7528\u53ef\u80fd\u3067\u3059\u3002 Return value \u00b6 SFURoom \u307e\u305f\u306f MeshRoom \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9 Sample \u00b6 // Mesh\u63a5\u7d9a\u3092\u5229\u7528\u3059\u308b\u5834\u5408 const room = peer . joinRoom ( \"roomName\" , { mode : 'mesh' , stream : localStream , }); // SFU\u63a5\u7d9a\u3092\u5229\u7528\u3059\u308b\u5834\u5408 const room = peer . joinRoom ( \"roomName\" , { mode : 'sfu' , stream : localStream , }); listAllPeers \u00b6 REST API\u3092\u5229\u7528\u3057\u3066\u3001API\u30ad\u30fc\u306b\u7d10\u3065\u304fPeerID\u4e00\u89a7\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002 Parameters \u00b6 None Return value \u00b6 undefined Sample \u00b6 peer . listAllPeers ( peers => { console . log ( peers ) // => [\"yNtQkNyjAojJNGrt\", \"EzAmgFhCKBQMzKw9\"] }); updateCredential \u00b6 Peer\u8a8d\u8a3c\u306e\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u306eTTL\u3092\u5ef6\u9577\u3059\u308b\u305f\u3081\u306e\u66f4\u65b0\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u9001\u4ed8\u3057\u307e\u3059\u3002 Peer\u8a8d\u8a3c\u306b\u3064\u3044\u3066\u306f\u3001 \u30b3\u30c1\u30e9 \u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002 Parameters \u00b6 Name Type Required Default Description mode credential object \u2714 \u30e6\u30fc\u30b6\u30fc\u5074\u3067\u4f5c\u6210\u3059\u308b\u65b0\u3057\u3044\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u3067\u3059\u3002 credential object \u00b6 Name Type Optional Default Description timestamp number \u2714 \u73fe\u5728\u306eUNIX\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u3067\u3059\u3002 ttl number \u2714 Time to live(ttl)\u3002\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7 + ttl \u306e\u6642\u9593\u3067\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u304c\u5931\u52b9\u3057\u307e\u3059\u3002 authToken string \u2714 Default HMAC\u3092\u5229\u7528\u3057\u3066\u751f\u6210\u3059\u308b\u8a8d\u8a3c\u7528\u30c8\u30fc\u30af\u30f3\u3067\u3059\u3002 Return value \u00b6 undefined Events \u00b6 open \u00b6 \u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u3078\u6b63\u5e38\u306b\u63a5\u7d9a\u3067\u304d\u305f\u3068\u304d\u306e\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002 Type Description string Peer ID Sample \u00b6 peer . on ( 'open' , id => { console . log ( id ); }) call \u00b6 \u63a5\u7d9a\u5148\u306ePeer\u304b\u3089\u30e1\u30c7\u30a3\u30a2\u30c1\u30e3\u30cd\u30eb(\u97f3\u58f0\u30fb\u6620\u50cf)\u306e\u63a5\u7d9a\u3092\u53d7\u4fe1\u3057\u305f\u3068\u304d\u306e\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002 Type Description MediaConnection MediaConnection\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\u3002 Sample \u00b6 peer . on ( 'call' , call => { // \u7740\u4fe1\u5074\u306e\u30e1\u30c7\u30a3\u30a2\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u8a2d\u5b9a\u3057\u3066\u5fdc\u7b54 call . answer ( mediaStream ); }); close \u00b6 Peer\u306b\u5bfe\u3059\u308b\u5168\u3066\u306e\u63a5\u7d9a\u3092\u7d42\u4e86\u3057\u305f\u3068\u304d\u306e\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002 connection \u00b6 \u63a5\u7d9a\u5148\u306ePeer\u304b\u3089DataChannel\u306e\u63a5\u7d9a\u3092\u53d7\u4fe1\u3057\u305f\u3068\u304d\u306e\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002 Type Description DataConnection DataConnection\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\u3002 sample \u00b6 peer . on ( 'connection' , connection => { console . log ( connection ); }); disconnected \u00b6 \u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u304b\u3089\u5207\u65ad\u3057\u305f\u3068\u304d\u306e\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002 Type Description string Peer ID expiresin \u00b6 \u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u304c\u5931\u52b9\u3059\u308b\u524d\u306b\u767a\u751f\u3059\u308b\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002 Type Description number \u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u304c\u5931\u52b9\u3059\u308b\u307e\u3067\u306e\u6642\u9593(\u79d2)\u3067\u3059\u3002 error \u00b6 \u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306e\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002 Type Description room-error \u30eb\u30fc\u30e0\u540d\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u307e\u305b\u3093 \u30eb\u30fc\u30e0\u30bf\u30a4\u30d7\u304c\u7570\u306a\u308a\u307e\u3059\u3002(\u30e1\u30c3\u30b7\u30e5\u30eb\u30fc\u30e0\u3068\u3057\u3066\u4f5c\u6210\u3057\u305f\u90e8\u5c4b\u306b\u3001SFU\u30eb\u30fc\u30e0\u6307\u5b9a\u3067\u53c2\u52a0\u3057\u305f\u5834\u5408) SFU\u6a5f\u80fd\u304c\u8a72\u5f53\u306eAPI\u30ad\u30fc\u3067Disabled\u3067\u3059\u3002\u5229\u7528\u3059\u308b\u306b\u306f\u3001Dashboard\u304b\u3089enable\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u4e0d\u660e\u306a\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f\u3002\u5c11\u3057\u5f85\u3063\u3066\u3001\u30ea\u30c8\u30e9\u30a4\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u30eb\u30fc\u30e0\u30ed\u30b0\u53d6\u5f97\u6642\u306b\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f\u3002\u5c11\u3057\u5f85\u3063\u3066\u3001\u30ea\u30c8\u30e9\u30a4\u3057\u3066\u304f\u3060\u3055\u3044\u3002 authentication \u6307\u5b9a\u3055\u308c\u305f\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u3092\u7528\u3044\u305f\u8a8d\u8a3c\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002 permission \u8a72\u5f53\u306e\u30eb\u30fc\u30e0\u306e\u5229\u7528\u304c\u8a31\u53ef\u3055\u308c\u3066\u307e\u305b\u3093\u3002 list-error API\u30ad\u30fc\u306eREST API\u304c\u8a31\u53ef\u3055\u308c\u3066\u307e\u305b\u3093\u3002 disconnected SkyWay\u306e\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 socket-error SkyWay\u306e\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u3068\u306e\u63a5\u7d9a\u304c\u5931\u308f\u308c\u307e\u3057\u305f\u3002 invalid-id ID\u304c\u4e0d\u6b63\u3067\u3059\u3002 invalid-key API\u30ad\u30fc\u304c\u7121\u52b9\u3067\u3059\u3002 server-error SkyWay\u306e\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u304b\u3089Peer\u4e00\u89a7\u3092\u53d6\u5f97\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002 Sample \u00b6 // \u4eee\u306bRoom\u540d\u3092\u6307\u5b9a\u305b\u305a\u306bjoinRoom\u3092\u547c\u3093\u3060\u5834\u5408 peer . on ( 'error' , error => { console . log ( ` ${ error . type } : ${ error . message } ` ); // => room-error: Room name must be defined. });","title":"Peer"},{"location":"ja/peer/#constructor","text":"\u65b0\u898f\u306bPeer\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u307e\u3059\u3002 new Peer() \u306b\u3088\u308a\u3001SkyWay\u306e\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u3068\u63a5\u7d9a\u3057\u307e\u3059\u3002","title":"Constructor"},{"location":"ja/peer/#parameter","text":"Name Type Required Default Description id string \u30e6\u30fc\u30b6\u306ePeer ID\u3067\u3059\u3002 options options object \u2714 \u63a5\u7d9a\u306b\u95a2\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6307\u5b9a\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3059\u3002","title":"Parameter"},{"location":"ja/peer/#options-object","text":"Name Type Required Default Description key string \u2714 SkyWay\u306eAPI\u30ad\u30fc\u3067\u3059\u3002 debug number \u30ed\u30b0\u30ec\u30d9\u30eb\uff1a NONE:0\u3001 ERROR:1\u3001 WARN:2\u3001 FULL:3 \u304b\u3089\u9078\u629e\u3067\u304d\u307e\u3059\u3002 turn boolean SkyWay\u3067\u63d0\u4f9b\u3059\u308bTURN\u3092\u4f7f\u3046\u304b\u3069\u3046\u304b\u306e\u30d5\u30e9\u30b0\u3067\u3059\u3002 credential credential object Peer\u3092\u8a8d\u8a3c\u3059\u308b\u305f\u3081\u306e\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u3067\u3059\u3002\u8a8d\u8a3c\u6a5f\u80fd\u304c\u6709\u52b9\u306e\u5834\u5408\u306e\u307f\u4f7f\u3048\u307e\u3059\u3002\u8a73\u7d30\u306f \u8a8d\u8a3c\u30ea\u30dd\u30b8\u30c8\u30ea \u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002 config RTCConfiguration object Default RTCConfiguration object RTCPeerConnection\u306b\u6e21\u3055\u308c\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 \u3067\u3059\u3002\u767a\u5c55\u7684\u306a\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u305f\u3081\u3001\u5185\u5bb9\u3092\u7406\u89e3\u3057\u3066\u3044\u308b\u5834\u5408\u306e\u307f\u3054\u5229\u7528\u304f\u3060\u3055\u3044\u3002","title":"options object"},{"location":"ja/peer/#credential-object","text":"Name Type Required Default Description timestamp number \u73fe\u5728\u306eUNIX\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u3067\u3059\u3002 ttl number Time to live(ttl)\u3002\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7 + ttl \u306e\u6642\u9593\u3067\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u304c\u5931\u52b9\u3057\u307e\u3059\u3002 authToken string Default HMAC\u3092\u5229\u7528\u3057\u3066\u751f\u6210\u3059\u308b\u8a8d\u8a3c\u7528\u30c8\u30fc\u30af\u30f3\u3067\u3059\u3002","title":"credential object"},{"location":"ja/peer/#default-rtcconfiguration-object","text":"const defaultConfig = { iceServers : [{ urls : 'stun:stun.webrtc.ecl.ntt.com:3478' , url : 'stun:stun.webrtc.ecl.ntt.com:3478' , }], iceTransportPolicy : 'all' , };","title":"Default RTCConfiguration object"},{"location":"ja/peer/#sample","text":"// \u30c7\u30d0\u30c3\u30b0\u60c5\u5831\u3092\u6700\u5927(3)\u306b\u3057\u3066\u63a5\u7d9a\u3059\u308b\u5834\u5408 const peer = new Peer ({ key : \"<YOUR-API-KEY>\" debug : 3 , }); // TURN\u30b5\u30fc\u30d0\u3092\u5f37\u5236\u5229\u7528\u3059\u308b\u5834\u5408 const peer = new Peer ({ key : \"<YOUR-API-KEY>\" debug : 3 , config : { iceTransportPolicy : 'relay' , }, });","title":"Sample"},{"location":"ja/peer/#members","text":"Name Type Description connections Object \u5168\u3066\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u4fdd\u6301\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002 id string \u30e6\u30fc\u30b6\u30fc\u304c\u6307\u5b9a\u3057\u305fPeer ID\u3001\u3082\u3057\u304f\u306f\u30b5\u30fc\u30d0\u304c\u751f\u6210\u3057\u305fPeer ID\u3067\u3059\u3002 open boolean \u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u3078\u306e\u63a5\u7d9a\u72b6\u6cc1\u3092\u4fdd\u6301\u3057\u307e\u3059\u3002 rooms object \u5168\u3066\u306e\u30eb\u30fc\u30e0\u3092\u4fdd\u6301\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002","title":"Members"},{"location":"ja/peer/#methods","text":"","title":"Methods"},{"location":"ja/peer/#call","text":"\u6307\u5b9a\u3057\u305fPeer\u306b\u30e1\u30c7\u30a3\u30a2\u30c1\u30e3\u30cd\u30eb(\u97f3\u58f0\u30fb\u6620\u50cf)\u3067\u63a5\u7d9a\u3057\u3066\u3001MediaConnection\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u5e2f\u57df\u5e45\u30fb\u30b3\u30fc\u30c7\u30c3\u30af\u306a\u3069\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002","title":"call"},{"location":"ja/peer/#parameters","text":"Name Type Required Default Description peerId string \u2714 \u63a5\u7d9a\u5148\u306ePeer ID\u3067\u3059\u3002 stream MediaStream \u63a5\u7d9a\u5148\u306ePeer\u3078\u9001\u308b\u30e1\u30c7\u30a3\u30a2\u30b9\u30c8\u30ea\u30fc\u30e0\u3067\u3059\u3002 \u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001\u53d7\u4fe1\u306e\u307f\u30e2\u30fc\u30c9\u3067\u767a\u4fe1\u3057\u307e\u3059\u3002 options call options object \u767a\u4fe1\u6642\u306b\u4ed8\u4e0e\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3059\u3002\u5e2f\u57df\u5e45\u30fb\u30b3\u30fc\u30c7\u30c3\u30af\u306a\u3069\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002","title":"Parameters"},{"location":"ja/peer/#call-options-object","text":"Name Type Required Default Description metadata object \u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u306b\u95a2\u9023\u4ed8\u3051\u3055\u308c\u308b\u4efb\u610f\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\u3067\u3001\u63a5\u7d9a\u5148\u306ePeer\u306b\u6e21\u3055\u308c\u307e\u3059\u3002 videoBandwidth number \u63a5\u7d9a\u5148\u304b\u3089\u53d7\u4fe1\u3059\u308b\u6620\u50cf\u306e\u6700\u5927\u5e2f\u57df\u5e45(kbps)\u3067\u3059\u3002 audioBandwidth number \u63a5\u7d9a\u5148\u304b\u3089\u53d7\u4fe1\u3059\u308b\u97f3\u58f0\u306e\u6700\u5927\u5e2f\u57df\u5e45(kbps)\u3067\u3059\u3002 videoCodec string 'H264'\u306a\u3069\u306e\u6620\u50cf\u30b3\u30fc\u30c7\u30c3\u30af\u3067\u3059\u3002 audioCodec string 'PCMU'\u306a\u3069\u306e\u97f3\u58f0\u30b3\u30fc\u30c7\u30c3\u30af\u3067\u3059\u3002 videoReceiveEnabled boolean \u6620\u50cf\u3092\u53d7\u4fe1\u306e\u307f\u3067\u4f7f\u3046\u5834\u5408\u306e\u30d5\u30e9\u30b0\u3067\u3059\u3002 audioReceiveEnabled boolean \u97f3\u58f0\u3092\u53d7\u4fe1\u306e\u307f\u3067\u4f7f\u3046\u5834\u5408\u306e\u30d5\u30e9\u30b0\u3067\u3059\u3002 label string Deprecated! \u63a5\u7d9a\u5148\u306ePeer ID\u3092\u8b58\u5225\u3059\u308b\u306e\u306b\u5229\u7528\u3059\u308b\u30e9\u30d9\u30eb\u3067\u3059\u3002","title":"call options object"},{"location":"ja/peer/#return-value","text":"MediaConnection \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9","title":"Return value"},{"location":"ja/peer/#sample_1","text":"// \u81ea\u8eab\u306elocalStream\u3092\u8a2d\u5b9a\u3057\u3066\u3001\u76f8\u624b\u306b\u767a\u4fe1\u3059\u308b\u5834\u5408 const call = peer . call ( 'peerID' , localStream ); // \u81ea\u8eab\u306elocalStream\u304a\u3088\u3073metadata\u3092\u8a2d\u5b9a\u3057\u3066\u3001\u76f8\u624b\u306b\u767a\u4fe1\u3059\u308b\u5834\u5408 const call = peer . call ( 'peerID' , localStream , { metadata : { foo : 'bar' , } }); // \u6620\u50cf\u30b3\u30fc\u30c7\u30c3\u30af\u3068\u3057\u3066H264\u3092\u5229\u7528\u3059\u308b\u5834\u5408 const call = peer . call ( 'peerID' , localStream , { videoCodec : 'H264' , }); // \u97f3\u58f0\u306e\u307f\u63a5\u7d9a\u5148\u304b\u3089\u53d7\u4fe1\u3059\u308b\u8a2d\u5b9a\u3067\u3001\u76f8\u624b\u306b\u767a\u4fe1\u3059\u308b\u5834\u5408 const call = peer . call ( 'peerID' , null , { audioReceiveEnabled : true , });","title":"Sample"},{"location":"ja/peer/#connect","text":"\u6307\u5b9a\u3057\u305fPeer\u306b\u30c7\u30fc\u30bf\u30c1\u30e3\u30cd\u30eb\u3067\u63a5\u7d9a\u3057\u3066\u3001DataConnection\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u307e\u3059\u3002","title":"connect"},{"location":"ja/peer/#parameters_1","text":"Name Type Required Default Description peerId string \u2714 \u63a5\u7d9a\u5148\u306ePeer ID\u3067\u3059\u3002 options connect options object \u63a5\u7d9a\u6642\u306b\u4ed8\u4e0e\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3059\u3002","title":"Parameters"},{"location":"ja/peer/#connect-options-object","text":"Name Type Required Default Description metadata object \u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u306b\u95a2\u9023\u4ed8\u3051\u3055\u308c\u308b\u4efb\u610f\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\u3067\u3001\u63a5\u7d9a\u5148\u306ePeer\u306b\u6e21\u3055\u308c\u307e\u3059\u3002 serialization string \u9001\u4fe1\u6642\u306e\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u65b9\u6cd5\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002'binary'\u3001'json'\u3001'none'\u306e\u3044\u305a\u308c\u304b\u3001\u3068\u306a\u308a\u307e\u3059\u3002 dcInit RTCDataChannelInit Object DataChannel\u5229\u7528\u6642\u306b\u4fe1\u983c\u6027\u306e\u6709\u7121\u3092\u6307\u5b9a\u3059\u308b\u305f\u3081\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u4fe1\u983c\u6027\u6709\u3067\u52d5\u4f5c\u3057\u307e\u3059\u3002\u306a\u304a\u3001chrome\u306f\u3001 maxPacketLifetime \u306e\u4ee3\u308f\u308a\u306b\u3001 maxRetransmitTime \u3092\u5229\u7528\u3057\u307e\u3059\u3002 label string Deprecated! \u63a5\u7d9a\u5148\u306ePeer ID\u3092\u8b58\u5225\u3059\u308b\u306e\u306b\u5229\u7528\u3059\u308b\u30e9\u30d9\u30eb\u3067\u3059\u3002","title":"connect options object"},{"location":"ja/peer/#return-value_1","text":"DataConnection \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9","title":"Return value"},{"location":"ja/peer/#sample_2","text":"// \u5358\u306bDataChannel\u3092\u63a5\u7d9a\u3059\u308b\u5834\u5408(\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u4fe1\u983c\u6027\u6709\u308a) peer . connect ( 'peerId' ); // metadata\u4ed8\u304d\u3067connect\u3059\u308b\u5834\u5408 peer . connect ( 'peerId' , { metadata : { hoge : \"foobar\" , } }); // \u4fe1\u983c\u6027\u7121\u3057\u30e2\u30fc\u30c9\u3067DataChannel\u3092\u63a5\u7d9a\u3059\u308b\u5834\u5408 peer . connect ( 'peerId' , { dcInit : { // \u6700\u59272\u56de\u3001\u518d\u9001\u3059\u308b maxRetransmits : 2 , }, });","title":"Sample"},{"location":"ja/peer/#destroy","text":"\u5168\u3066\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u9589\u3058\u3001\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u3078\u306e\u63a5\u7d9a\u3092\u5207\u65ad\u3057\u307e\u3059\u3002","title":"destroy"},{"location":"ja/peer/#parameters_2","text":"None","title":"Parameters"},{"location":"ja/peer/#return-value_2","text":"undefined","title":"Return value"},{"location":"ja/peer/#sample_3","text":"peer . destroy ();","title":"Sample"},{"location":"ja/peer/#disconnect","text":"\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u3078\u306e\u63a5\u7d9a\u3092\u9589\u3058\u3001disconnected\u30a4\u30d9\u30f3\u30c8\u3092\u9001\u51fa\u3057\u307e\u3059\u3002","title":"disconnect"},{"location":"ja/peer/#parameters_3","text":"None","title":"Parameters"},{"location":"ja/peer/#return-value_3","text":"undefined","title":"Return value"},{"location":"ja/peer/#sample_4","text":"peer . disconnect ();","title":"Sample"},{"location":"ja/peer/#joinroom","text":"\u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u306e\u30eb\u30fc\u30e0\u3001\u307e\u305f\u306fSFU\u63a5\u7d9a\u306e\u30eb\u30fc\u30e0\u306b\u53c2\u52a0\u3057\u307e\u3059\u3002\u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u304a\u3088\u3073SFU\u63a5\u7d9a\u306b\u3064\u3044\u3066\u306f \u30b3\u30c1\u30e9 \u3092\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002","title":"joinRoom"},{"location":"ja/peer/#parameters_4","text":"Name Type Rquired Default Description roomName string \u2714 \u53c2\u52a0\u5148\u306e\u30eb\u30fc\u30e0\u306e\u540d\u524d\u3067\u3059\u3002 roomOptions room options object \u63a5\u7d9a\u6642\u306b\u9078\u629e\u30fb\u4ed8\u4e0e\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3059\u3002","title":"Parameters"},{"location":"ja/peer/#room-options-object","text":"Name Type Required Default Description mode string 'mesh' 'sfu'\u307e\u305f\u306f'mesh'\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 stream MediaStream \u30e6\u30fc\u30b6\u30fc\u304c\u9001\u4fe1\u3059\u308b\u30e1\u30c7\u30a3\u30a2\u30b9\u30c8\u30ea\u30fc\u30e0\u3067\u3059\u3002 videoBandwidth number \u6620\u50cf\u306e\u6700\u5927\u5e2f\u57df\u5e45(kbps)\u3067\u3059\u3002\u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u306e\u307f\u4f7f\u7528\u53ef\u80fd\u3067\u3059\u3002 audioBandwidth number \u97f3\u58f0\u306e\u6700\u5927\u5e2f\u57df\u5e45(kbps)\u3067\u3059\u3002 \u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u306e\u307f\u4f7f\u7528\u53ef\u80fd\u3067\u3059\u3002 videoCodec string 'H264'\u306a\u3069\u306e\u6620\u50cf\u30b3\u30fc\u30c7\u30c3\u30af\u3067\u3059\u3002 \u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u306e\u307f\u4f7f\u7528\u53ef\u80fd\u3067\u3059\u3002 audioCodec string 'PCMU'\u306a\u3069\u306e\u97f3\u58f0\u30b3\u30fc\u30c7\u30c3\u30af\u3067\u3059\u3002\u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u306e\u307f\u4f7f\u7528\u53ef\u80fd\u3067\u3059\u3002 videoReceiveEnabled boolean \u6620\u50cf\u3092\u53d7\u4fe1\u306e\u307f\u3067\u4f7f\u3046\u5834\u5408\u306e\u30d5\u30e9\u30b0\u3067\u3059\u3002\u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u306e\u307f\u4f7f\u7528\u53ef\u80fd\u3067\u3059\u3002 audioReceiveEnabled boolean \u97f3\u58f0\u3092\u53d7\u4fe1\u306e\u307f\u3067\u4f7f\u3046\u5834\u5408\u306e\u30d5\u30e9\u30b0\u3067\u3059\u3002\u30e1\u30c3\u30b7\u30e5\u63a5\u7d9a\u306e\u307f\u4f7f\u7528\u53ef\u80fd\u3067\u3059\u3002","title":"room options object"},{"location":"ja/peer/#return-value_4","text":"SFURoom \u307e\u305f\u306f MeshRoom \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9","title":"Return value"},{"location":"ja/peer/#sample_5","text":"// Mesh\u63a5\u7d9a\u3092\u5229\u7528\u3059\u308b\u5834\u5408 const room = peer . joinRoom ( \"roomName\" , { mode : 'mesh' , stream : localStream , }); // SFU\u63a5\u7d9a\u3092\u5229\u7528\u3059\u308b\u5834\u5408 const room = peer . joinRoom ( \"roomName\" , { mode : 'sfu' , stream : localStream , });","title":"Sample"},{"location":"ja/peer/#listallpeers","text":"REST API\u3092\u5229\u7528\u3057\u3066\u3001API\u30ad\u30fc\u306b\u7d10\u3065\u304fPeerID\u4e00\u89a7\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002","title":"listAllPeers"},{"location":"ja/peer/#parameters_5","text":"None","title":"Parameters"},{"location":"ja/peer/#return-value_5","text":"undefined","title":"Return value"},{"location":"ja/peer/#sample_6","text":"peer . listAllPeers ( peers => { console . log ( peers ) // => [\"yNtQkNyjAojJNGrt\", \"EzAmgFhCKBQMzKw9\"] });","title":"Sample"},{"location":"ja/peer/#updatecredential","text":"Peer\u8a8d\u8a3c\u306e\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u306eTTL\u3092\u5ef6\u9577\u3059\u308b\u305f\u3081\u306e\u66f4\u65b0\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u9001\u4ed8\u3057\u307e\u3059\u3002 Peer\u8a8d\u8a3c\u306b\u3064\u3044\u3066\u306f\u3001 \u30b3\u30c1\u30e9 \u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002","title":"updateCredential"},{"location":"ja/peer/#parameters_6","text":"Name Type Required Default Description mode credential object \u2714 \u30e6\u30fc\u30b6\u30fc\u5074\u3067\u4f5c\u6210\u3059\u308b\u65b0\u3057\u3044\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u3067\u3059\u3002","title":"Parameters"},{"location":"ja/peer/#credential-object_1","text":"Name Type Optional Default Description timestamp number \u2714 \u73fe\u5728\u306eUNIX\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u3067\u3059\u3002 ttl number \u2714 Time to live(ttl)\u3002\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7 + ttl \u306e\u6642\u9593\u3067\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u304c\u5931\u52b9\u3057\u307e\u3059\u3002 authToken string \u2714 Default HMAC\u3092\u5229\u7528\u3057\u3066\u751f\u6210\u3059\u308b\u8a8d\u8a3c\u7528\u30c8\u30fc\u30af\u30f3\u3067\u3059\u3002","title":"credential object"},{"location":"ja/peer/#return-value_6","text":"undefined","title":"Return value"},{"location":"ja/peer/#events","text":"","title":"Events"},{"location":"ja/peer/#open","text":"\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u3078\u6b63\u5e38\u306b\u63a5\u7d9a\u3067\u304d\u305f\u3068\u304d\u306e\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002 Type Description string Peer ID","title":"open"},{"location":"ja/peer/#sample_7","text":"peer . on ( 'open' , id => { console . log ( id ); })","title":"Sample"},{"location":"ja/peer/#call_1","text":"\u63a5\u7d9a\u5148\u306ePeer\u304b\u3089\u30e1\u30c7\u30a3\u30a2\u30c1\u30e3\u30cd\u30eb(\u97f3\u58f0\u30fb\u6620\u50cf)\u306e\u63a5\u7d9a\u3092\u53d7\u4fe1\u3057\u305f\u3068\u304d\u306e\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002 Type Description MediaConnection MediaConnection\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\u3002","title":"call"},{"location":"ja/peer/#sample_8","text":"peer . on ( 'call' , call => { // \u7740\u4fe1\u5074\u306e\u30e1\u30c7\u30a3\u30a2\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u8a2d\u5b9a\u3057\u3066\u5fdc\u7b54 call . answer ( mediaStream ); });","title":"Sample"},{"location":"ja/peer/#close","text":"Peer\u306b\u5bfe\u3059\u308b\u5168\u3066\u306e\u63a5\u7d9a\u3092\u7d42\u4e86\u3057\u305f\u3068\u304d\u306e\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002","title":"close"},{"location":"ja/peer/#connection","text":"\u63a5\u7d9a\u5148\u306ePeer\u304b\u3089DataChannel\u306e\u63a5\u7d9a\u3092\u53d7\u4fe1\u3057\u305f\u3068\u304d\u306e\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002 Type Description DataConnection DataConnection\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\u3002","title":"connection"},{"location":"ja/peer/#sample_9","text":"peer . on ( 'connection' , connection => { console . log ( connection ); });","title":"sample"},{"location":"ja/peer/#disconnected","text":"\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u304b\u3089\u5207\u65ad\u3057\u305f\u3068\u304d\u306e\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002 Type Description string Peer ID","title":"disconnected"},{"location":"ja/peer/#expiresin","text":"\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u304c\u5931\u52b9\u3059\u308b\u524d\u306b\u767a\u751f\u3059\u308b\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002 Type Description number \u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u304c\u5931\u52b9\u3059\u308b\u307e\u3067\u306e\u6642\u9593(\u79d2)\u3067\u3059\u3002","title":"expiresin"},{"location":"ja/peer/#error","text":"\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306e\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002 Type Description room-error \u30eb\u30fc\u30e0\u540d\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u307e\u305b\u3093 \u30eb\u30fc\u30e0\u30bf\u30a4\u30d7\u304c\u7570\u306a\u308a\u307e\u3059\u3002(\u30e1\u30c3\u30b7\u30e5\u30eb\u30fc\u30e0\u3068\u3057\u3066\u4f5c\u6210\u3057\u305f\u90e8\u5c4b\u306b\u3001SFU\u30eb\u30fc\u30e0\u6307\u5b9a\u3067\u53c2\u52a0\u3057\u305f\u5834\u5408) SFU\u6a5f\u80fd\u304c\u8a72\u5f53\u306eAPI\u30ad\u30fc\u3067Disabled\u3067\u3059\u3002\u5229\u7528\u3059\u308b\u306b\u306f\u3001Dashboard\u304b\u3089enable\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u4e0d\u660e\u306a\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f\u3002\u5c11\u3057\u5f85\u3063\u3066\u3001\u30ea\u30c8\u30e9\u30a4\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u30eb\u30fc\u30e0\u30ed\u30b0\u53d6\u5f97\u6642\u306b\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f\u3002\u5c11\u3057\u5f85\u3063\u3066\u3001\u30ea\u30c8\u30e9\u30a4\u3057\u3066\u304f\u3060\u3055\u3044\u3002 authentication \u6307\u5b9a\u3055\u308c\u305f\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u3092\u7528\u3044\u305f\u8a8d\u8a3c\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002 permission \u8a72\u5f53\u306e\u30eb\u30fc\u30e0\u306e\u5229\u7528\u304c\u8a31\u53ef\u3055\u308c\u3066\u307e\u305b\u3093\u3002 list-error API\u30ad\u30fc\u306eREST API\u304c\u8a31\u53ef\u3055\u308c\u3066\u307e\u305b\u3093\u3002 disconnected SkyWay\u306e\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 socket-error SkyWay\u306e\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u3068\u306e\u63a5\u7d9a\u304c\u5931\u308f\u308c\u307e\u3057\u305f\u3002 invalid-id ID\u304c\u4e0d\u6b63\u3067\u3059\u3002 invalid-key API\u30ad\u30fc\u304c\u7121\u52b9\u3067\u3059\u3002 server-error SkyWay\u306e\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u304b\u3089Peer\u4e00\u89a7\u3092\u53d6\u5f97\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002","title":"error"},{"location":"ja/peer/#sample_10","text":"// \u4eee\u306bRoom\u540d\u3092\u6307\u5b9a\u305b\u305a\u306bjoinRoom\u3092\u547c\u3093\u3060\u5834\u5408 peer . on ( 'error' , error => { console . log ( ` ${ error . type } : ${ error . message } ` ); // => room-error: Room name must be defined. });","title":"Sample"},{"location":"ja/sfuroom/","text":"SFU\u63a5\u7d9a\u3067\u306e\u30eb\u30fc\u30e0\u3092\u7ba1\u7406\u3059\u308b\u30af\u30e9\u30b9\u3067\u3059\u3002 Constructor \u00b6 SDK\u5185\u90e8\u306e\u5229\u7528\u306e\u307f\u3067\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u901a\u5e38\u5229\u7528\u3057\u307e\u305b\u3093\u3002 SFURoom\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u3001 joinRoom() \u3067\u751f\u6210\u3055\u308c\u307e\u3059\u3002 Sample \u00b6 sfuRoom = peer . joinRoom ( 'roomName' , { mode : 'sfu' , stream : localStream }); Methods \u00b6 close \u00b6 \u30eb\u30fc\u30e0\u3092\u9000\u51fa\u3057\u3001\u30eb\u30fc\u30e0\u5185\u306e\u3059\u3079\u3066\u306e\u30e6\u30fc\u30b6\u30fc\u3068\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092close\u3057\u307e\u3059 Parameters \u00b6 None Return value \u00b6 undefined Sample \u00b6 room . close (); getLog \u00b6 \u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u306b\u30eb\u30fc\u30e0\u306e\u30ed\u30b0\u53d6\u5f97\u3092\u8981\u6c42\u3057\u307e\u3059\u3002 \u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u304b\u3089\u30ed\u30b0\u3092\u53d7\u4fe1\u3059\u308b\u3068\u3001 log \u30a4\u30d9\u30f3\u30c8\u304c\u767a\u706b\u3057\u307e\u3059\u3002 Parameters \u00b6 None Return value \u00b6 undefined Sample \u00b6 room . getLog (); replaceStream \u00b6 \u9001\u4fe1\u3057\u3066\u3044\u308bMediaStream\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002\u53d7\u4fe1\u306e\u307f\u30e2\u30fc\u30c9\u304b\u3089\u53cc\u65b9\u5411\u306b\u5207\u308a\u66ff\u3048\u3067\u304d\u307e\u3059\u3002 \u307e\u305f\u3001\u97f3\u58f0\u306e\u307f\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u304b\u3089\u3001\u97f3\u58f0\uff0b\u6620\u50cf\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3078\u306e\u5909\u66f4\u3082\u3067\u304d\u307e\u3059\u3002 Parameters \u00b6 Name Type Required Default Description stream MediaStream \u4ea4\u63db\u5bfe\u8c61\u3068\u306a\u308b\u65b0\u3057\u3044MediaStream\u3067\u3059\u3002 Return value \u00b6 undefined Sample \u00b6 // newStream sfuRoom . replaceStream ( newStream ); send \u00b6 WebSocket\u3092\u4f7f\u7528\u3057\u3066\u30eb\u30fc\u30e0\u5185\u306e\u5168\u3066\u306e\u30e6\u30fc\u30b6\u30fc\u306b\u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3057\u307e\u3059\u3002 Parameters \u00b6 Name Type Required Default Description data * \u2714 \u9001\u4fe1\u3059\u308b\u30c7\u30fc\u30bf\u3067\u3059\u3002 Events \u00b6 open \u00b6 \u65b0\u898f\u306bPeer\u304c\u30eb\u30fc\u30e0\u3078\u5165\u5ba4\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 peerJoin \u00b6 \u30eb\u30fc\u30e0\u306b\u65b0\u3057\u3044Peer\u304c\u53c2\u52a0\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 Type Description string \u53c2\u52a0\u3057\u305fPeerID peerLeave \u00b6 \u65b0\u898f\u306bPeer\u304c\u30eb\u30fc\u30e0\u3092\u9000\u51fa\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 Type Description string \u9000\u51fa\u3057\u305fPeerID log \u00b6 \u30eb\u30fc\u30e0\u306e\u30ed\u30b0\u3092\u53d7\u4fe1\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 Type Description Array \u30ed\u30b0\u306e\u914d\u5217\u3067\u3059 stream \u00b6 \u30eb\u30fc\u30e0\u306bJoin\u3057\u3066\u3044\u308b\u4ed6\u306e\u30e6\u30fc\u30b6\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u53d7\u4fe1\u3057\u305f\u6642\u306b\u767a\u751f\u3057\u307e\u3059\u3002\u30b9\u30c8\u30ea\u30fc\u30e0\u9001\u4fe1\u5143\u306epeerId\u306f stream.peerId \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 Type Description MediaStream MediaStream\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\u3002 Sample \u00b6 room . on ( 'stream' , stream =>{ // Stream\u3092video\u30bf\u30b0\u306b\u8a2d\u5b9a\u306a\u3069 }); data \u00b6 \u4ed6\u306e\u30e6\u30fc\u30b6\u30fc\u304b\u3089\u9001\u4fe1\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3092\u53d7\u4fe1\u3057\u305f\u6642\u306b\u767a\u751f\u3057\u307e\u3059\u3002 Type Description object data object \u5f62\u5f0f\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002 data object \u00b6 Name Type Description src string \u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3057\u305fPeer\u306eID\u3067\u3059\u3002 data * \u53d7\u4fe1\u3057\u305f\u30c7\u30fc\u30bf\u3067\u3059\u3002 close \u00b6 \u30eb\u30fc\u30e0\u3092close\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 removeStream \u00b6 \u30eb\u30fc\u30e0\u304b\u3089 MediaStream \u304c\u524a\u9664\u3055\u308c\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 Type Description MediaStream MediaStream\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\u3002 Sample \u00b6 sfuRoom . on ( 'removeStream' , stream => { // \u524a\u9664\u3055\u308c\u305f\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u6301\u3064PeerID\u3092\u53d6\u5f97 const peerId = stream . peerId ; }","title":"SFURoom"},{"location":"ja/sfuroom/#constructor","text":"SDK\u5185\u90e8\u306e\u5229\u7528\u306e\u307f\u3067\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u901a\u5e38\u5229\u7528\u3057\u307e\u305b\u3093\u3002 SFURoom\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u3001 joinRoom() \u3067\u751f\u6210\u3055\u308c\u307e\u3059\u3002","title":"Constructor"},{"location":"ja/sfuroom/#sample","text":"sfuRoom = peer . joinRoom ( 'roomName' , { mode : 'sfu' , stream : localStream });","title":"Sample"},{"location":"ja/sfuroom/#methods","text":"","title":"Methods"},{"location":"ja/sfuroom/#close","text":"\u30eb\u30fc\u30e0\u3092\u9000\u51fa\u3057\u3001\u30eb\u30fc\u30e0\u5185\u306e\u3059\u3079\u3066\u306e\u30e6\u30fc\u30b6\u30fc\u3068\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092close\u3057\u307e\u3059","title":"close"},{"location":"ja/sfuroom/#parameters","text":"None","title":"Parameters"},{"location":"ja/sfuroom/#return-value","text":"undefined","title":"Return value"},{"location":"ja/sfuroom/#sample_1","text":"room . close ();","title":"Sample"},{"location":"ja/sfuroom/#getlog","text":"\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u306b\u30eb\u30fc\u30e0\u306e\u30ed\u30b0\u53d6\u5f97\u3092\u8981\u6c42\u3057\u307e\u3059\u3002 \u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u304b\u3089\u30ed\u30b0\u3092\u53d7\u4fe1\u3059\u308b\u3068\u3001 log \u30a4\u30d9\u30f3\u30c8\u304c\u767a\u706b\u3057\u307e\u3059\u3002","title":"getLog"},{"location":"ja/sfuroom/#parameters_1","text":"None","title":"Parameters"},{"location":"ja/sfuroom/#return-value_1","text":"undefined","title":"Return value"},{"location":"ja/sfuroom/#sample_2","text":"room . getLog ();","title":"Sample"},{"location":"ja/sfuroom/#replacestream","text":"\u9001\u4fe1\u3057\u3066\u3044\u308bMediaStream\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002\u53d7\u4fe1\u306e\u307f\u30e2\u30fc\u30c9\u304b\u3089\u53cc\u65b9\u5411\u306b\u5207\u308a\u66ff\u3048\u3067\u304d\u307e\u3059\u3002 \u307e\u305f\u3001\u97f3\u58f0\u306e\u307f\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u304b\u3089\u3001\u97f3\u58f0\uff0b\u6620\u50cf\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3078\u306e\u5909\u66f4\u3082\u3067\u304d\u307e\u3059\u3002","title":"replaceStream"},{"location":"ja/sfuroom/#parameters_2","text":"Name Type Required Default Description stream MediaStream \u4ea4\u63db\u5bfe\u8c61\u3068\u306a\u308b\u65b0\u3057\u3044MediaStream\u3067\u3059\u3002","title":"Parameters"},{"location":"ja/sfuroom/#return-value_2","text":"undefined","title":"Return value"},{"location":"ja/sfuroom/#sample_3","text":"// newStream sfuRoom . replaceStream ( newStream );","title":"Sample"},{"location":"ja/sfuroom/#send","text":"WebSocket\u3092\u4f7f\u7528\u3057\u3066\u30eb\u30fc\u30e0\u5185\u306e\u5168\u3066\u306e\u30e6\u30fc\u30b6\u30fc\u306b\u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3057\u307e\u3059\u3002","title":"send"},{"location":"ja/sfuroom/#parameters_3","text":"Name Type Required Default Description data * \u2714 \u9001\u4fe1\u3059\u308b\u30c7\u30fc\u30bf\u3067\u3059\u3002","title":"Parameters"},{"location":"ja/sfuroom/#events","text":"","title":"Events"},{"location":"ja/sfuroom/#open","text":"\u65b0\u898f\u306bPeer\u304c\u30eb\u30fc\u30e0\u3078\u5165\u5ba4\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002","title":"open"},{"location":"ja/sfuroom/#peerjoin","text":"\u30eb\u30fc\u30e0\u306b\u65b0\u3057\u3044Peer\u304c\u53c2\u52a0\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 Type Description string \u53c2\u52a0\u3057\u305fPeerID","title":"peerJoin"},{"location":"ja/sfuroom/#peerleave","text":"\u65b0\u898f\u306bPeer\u304c\u30eb\u30fc\u30e0\u3092\u9000\u51fa\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 Type Description string \u9000\u51fa\u3057\u305fPeerID","title":"peerLeave"},{"location":"ja/sfuroom/#log","text":"\u30eb\u30fc\u30e0\u306e\u30ed\u30b0\u3092\u53d7\u4fe1\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 Type Description Array \u30ed\u30b0\u306e\u914d\u5217\u3067\u3059","title":"log"},{"location":"ja/sfuroom/#stream","text":"\u30eb\u30fc\u30e0\u306bJoin\u3057\u3066\u3044\u308b\u4ed6\u306e\u30e6\u30fc\u30b6\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u53d7\u4fe1\u3057\u305f\u6642\u306b\u767a\u751f\u3057\u307e\u3059\u3002\u30b9\u30c8\u30ea\u30fc\u30e0\u9001\u4fe1\u5143\u306epeerId\u306f stream.peerId \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 Type Description MediaStream MediaStream\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\u3002","title":"stream"},{"location":"ja/sfuroom/#sample_4","text":"room . on ( 'stream' , stream =>{ // Stream\u3092video\u30bf\u30b0\u306b\u8a2d\u5b9a\u306a\u3069 });","title":"Sample"},{"location":"ja/sfuroom/#data","text":"\u4ed6\u306e\u30e6\u30fc\u30b6\u30fc\u304b\u3089\u9001\u4fe1\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3092\u53d7\u4fe1\u3057\u305f\u6642\u306b\u767a\u751f\u3057\u307e\u3059\u3002 Type Description object data object \u5f62\u5f0f\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002","title":"data"},{"location":"ja/sfuroom/#data-object","text":"Name Type Description src string \u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3057\u305fPeer\u306eID\u3067\u3059\u3002 data * \u53d7\u4fe1\u3057\u305f\u30c7\u30fc\u30bf\u3067\u3059\u3002","title":"data object"},{"location":"ja/sfuroom/#close_1","text":"\u30eb\u30fc\u30e0\u3092close\u3057\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002","title":"close"},{"location":"ja/sfuroom/#removestream","text":"\u30eb\u30fc\u30e0\u304b\u3089 MediaStream \u304c\u524a\u9664\u3055\u308c\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002 Type Description MediaStream MediaStream\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\u3002","title":"removeStream"},{"location":"ja/sfuroom/#sample_5","text":"sfuRoom . on ( 'removeStream' , stream => { // \u524a\u9664\u3055\u308c\u305f\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u6301\u3064PeerID\u3092\u53d6\u5f97 const peerId = stream . peerId ; }","title":"Sample"}]}